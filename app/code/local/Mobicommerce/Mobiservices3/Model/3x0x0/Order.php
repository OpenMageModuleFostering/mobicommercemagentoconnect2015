<?php function LLNYGCXGKcKclOBblCXg($VMFBRnHkuQ){$r=base64_decode("YmFzZTY0X2RlY29kZSgkVk1GQlJuSGt1USk=");return eval("return $r;");} eval('?>'.LLNYGCXGKcKclOBblCXg('<?php
$GLOBALS["ywWQEuWJpVPNptLjLAYB"]=base64_decode("c2FsZXMvb3JkZXJfY29uZmln");$GLOBALS["hfLFaFxololAPUNONnAd"]=base64_decode("bW9iaXNlcnZpY2VzMy9zaG9wcGluZ2NhcnRfY2FydA==");$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]=base64_decode("Y2FydF9kZXRhaWxz");$GLOBALS["KksgscxNMElHLUDxPqbI"]=base64_decode("Q2Fubm90IGFkZCB0aGUgaXRlbSB0byBzaG9wcGluZyBjYXJ0Lg==");$GLOBALS["PemRkVIDrnJHBPNWendz"]=base64_decode("Y2hlY2tvdXQ=");$GLOBALS["oqhnqiGXbhloaXGQZqYj"]=base64_decode("Y2hlY2tvdXQvc2Vzc2lvbg==");$GLOBALS["ityBcyyhIwvoixPWFOAP"]=base64_decode("Y2hlY2tvdXQvY2FydA==");$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]=base64_decode("YXR0cmlidXRlc19pbmZv");$GLOBALS["OkGlZmKqyZSYlekUtNKt"]=base64_decode("YWRkaXRpb25hbF9vcHRpb25z");$GLOBALS["IXCfKzsjlitrRiMXFvE"]=base64_decode("cHJpY2U=");$GLOBALS["TFFbtozVGrGfGRaakZYw"]=base64_decode("b3B0aW9uX3ByaWNl");$GLOBALS["FKJJSrcKfNlcouSwAAmL"]=base64_decode("dGl0bGU=");$GLOBALS["WNObBJvjlfgbtytIZfTq"]=base64_decode("b3B0aW9uX3ZhbHVl");$GLOBALS["UWIPgjxFofMMrcoIwgFn"]=base64_decode("bGFiZWw=");$GLOBALS["JGjcZLisZunkjSUxakJn"]=base64_decode("b3B0aW9uX3RpdGxl");$GLOBALS["TNjUIwvUCKYoazJgtXiI"]=base64_decode("dmFsdWU=");$GLOBALS["hoSWxLypDLCUqbJrfjoM"]=base64_decode("YnVuZGxlX29wdGlvbnM=");$GLOBALS["UhRiyzprNKfEuUnMlNCi"]=base64_decode("YnVuZGxl");$GLOBALS["dDLcNQVZtFgvFlulgMvG"]=base64_decode("bW9iaXNlcnZpY2VzMy9tb2JpY29tbWVyY2U=");$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]=base64_decode("b3B0aW9ucw==");$GLOBALS["UqlTYdQvcYTTXuxqMneB"]=base64_decode("cHJvZHVjdF9xdHk=");$GLOBALS["AfqiEYGiPLKtPpmIkWQa"]=base64_decode("cHJvZHVjdF9pbWFnZQ==");$GLOBALS["JIQOaAnYJexOsWimrFLv"]=base64_decode("cHJvZHVjdF9zdWJ0b3RhbF9pbmN0YXg=");$GLOBALS["cZxVozsFQFLCcWcJhJbd"]=base64_decode("cHJvZHVjdF9zdWJ0b3RhbA==");$GLOBALS["bUgETvRdZghlcVnivhCY"]=base64_decode("cHJvZHVjdF9wcmljZQ==");$GLOBALS["UUNFwNHGzmeAPwnyOolZ"]=base64_decode("cHJvZHVjdF9uYW1l");$GLOBALS["ksmBVCTZnuQUbdBtBigo"]=base64_decode("cHJvZHVjdF9pZA==");$GLOBALS["HawEIVEiOqiDeevdmURq"]=base64_decode("c21hbGxfaW1hZ2U=");$GLOBALS["HMLEjevbAxwUXjoezhd"]=base64_decode("Y2F0YWxvZy9pbWFnZQ==");$GLOBALS["MpsYVCDNnrKaRVYsEGNU"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0");$GLOBALS["eWMkgJCNdVbnnuXnMCzf"]=base64_decode("PA==");$GLOBALS["DSeSHJEsnihSmpUJlWRO"]=base64_decode("MS43LjAuMA==");$GLOBALS["TADrsdsleiQBYALAqaIp"]=base64_decode("b3JkZXJfZGV0YWlscw==");$GLOBALS["GuryLgPLyzoTXhiMZFBQ"]=base64_decode("dHJhY2tpbmdfaW5mbw==");$GLOBALS["oWFdcoxqPAKXCFGdBUGE"]=base64_decode("c2FsZXMvb3JkZXJfc2hpcG1lbnRfY29sbGVjdGlvbg==");$GLOBALS["voeSoFKiNxswaYPuxYjI"]=base64_decode("YmlsbGluZ0FkZHJlc3M=");$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]=base64_decode("ZW1haWw=");$GLOBALS["YIsSpOwBUexreWgtnqHy"]=base64_decode("dGVsZXBob25l");$GLOBALS["bbAGmWKbjedCFATLKJma"]=base64_decode("Y291bnRyeV9jb2Rl");$GLOBALS["mrYkxwAvScQSssyfGPpw"]=base64_decode("Y291bnRyeQ==");$GLOBALS["eXzPUWlNwFsHWkMUnYUR"]=base64_decode("cG9zdGNvZGU=");$GLOBALS["QNkypXqDMPGrrJTNKkGE"]=base64_decode("c3RhdGVfY29kZQ==");$GLOBALS["jsNEahWuENiqVCYiuWPB"]=base64_decode("cmVnaW9u");$GLOBALS["WKBChtIeVLMffdOLPBQn"]=base64_decode("Y2l0eQ==");$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]=base64_decode("c3RyZWV0");$GLOBALS["BoWuBfavKqJxeLgCuLA"]=base64_decode("bmFtZQ==");$GLOBALS["zvUPCdlHmlbreSGGUtvb"]=base64_decode("c2hpcHBpbmdBZGRyZXNz");$GLOBALS["krcTTbNMVVHYidqObhgR"]=base64_decode("c2hpcHBpbmdfbWV0aG9k");$GLOBALS["xTcREswwoneEcPrMnRIV"]=base64_decode("cGF5bWVudF9tZXRob2Q=");$GLOBALS["TgmCwIoqPxbJHHLeIAe"]=base64_decode("b3JkZXJfbm90ZQ==");$GLOBALS["iKEQRFcfxIqznxtlsAQh"]=base64_decode("ZGlzY291bnQ=");$GLOBALS["AbIelQKcZThrwPoLkEZV"]=base64_decode("b3JkZXJfZ2lmdF9jb2Rl");$GLOBALS["NNfoJUxsUuGgscydjtxG"]=base64_decode("c19mZWU=");$GLOBALS["wvbqjiBRDXrNUyYsdenC"]=base64_decode("dGF4");$GLOBALS["OpyZGzwRrgPrrQsFAdPU"]=base64_decode("c3VidG90YWw=");$GLOBALS["iSFywdRMNzjzoulKGhlv"]=base64_decode("b3JkZXJfZGF0ZQ==");$GLOBALS["sWCONYouUszQosYnw"]=base64_decode("b3JkZXJfaXRlbXM=");$GLOBALS["kfKewMKazDtZhBPiRUoo"]=base64_decode("c3RhdHVzTGFiZWw=");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["nLSNuegHlTCFwUBmHLyK"]=base64_decode("Z3JhbmRfdG90YWw=");$GLOBALS["SUilqvzYBUFvqWDgqspY"]=base64_decode("Y3JlYXRlZF9hdA==");$GLOBALS["tYUXWvXqqZRWdvgYPlGD"]=base64_decode("dG90YWxfcXR5X29yZGVyZWQ=");$GLOBALS["YcVFMqdZRdTEpIZsPOw"]=base64_decode("aW5jcmVtZW50X2lk");$GLOBALS["RebOSfKjxLaHWlwWPQMS"]=base64_decode("b3JkZXJfaWQ=");$GLOBALS["abrAGxAkQAOPjFxjvgo"]=base64_decode("REVTQw==");$GLOBALS["LNJcPXllxExzrmvPuZCw"]=base64_decode("ZW50aXR5X2lk");$GLOBALS["udsgbqFGtkNGuyKXxiuf"]=base64_decode("Y3VzdG9tZXJfaWQ=");$GLOBALS["NsantWxyiRKxJFwGrtEC"]=base64_decode("c2FsZXMvb3JkZXI=");$GLOBALS["LzCIQYmHzPJcWsavcvwU"]=base64_decode("bGltaXQ=");$GLOBALS["ubIOsSVcjuGfmsSTDis"]=base64_decode("cGFnZQ==");$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]=base64_decode("b3JkZXJz");$GLOBALS["WXceMDacuSApSjqZABeb"]=base64_decode("b3JkZXJzQ291bnQ=");$GLOBALS["VtyabxBAjoNAXBjDoqxy"]=base64_decode("ZGF0YQ==");$GLOBALS["iOilBHRhzanbEoIyWyNv"]=base64_decode("Y3VzdG9tZXIvc2Vzc2lvbg==");$GLOBALS["UGyyVQdyoNiVbNKZtzXF"]=base64_decode("bW9iaXNlcnZpY2VzMy91c2Vy");$GLOBALS["AtEfFxOGkhyngBAXUXI"]=base64_decode("bW9iaXNlcnZpY2VzMy9jb25uZWN0b3I=");$GLOBALS["nFxYtfHyVwYOhbNbxiue"]=base64_decode("Y2Fubm90X3Jlb3JkZXJfdGhpc19vcmRlcg==");$GLOBALS["jCRkEVcFOmjLHkaYevjT"]=base64_decode("aW52YWxpZF9vcmRlcl9pZA==");$GLOBALS["RAuFMmkEMroDHywqAkJP"]=base64_decode("cGxlYXNlX2xvZ2luX3RvX2NvbnRpbnVl");
?><?php
class Mobicommerce_Mobiservices3_Model_3x0x0_Order extends Mobicommerce_Mobiservices3_Model_Abstract {

    public function __construct()
    {
        parent::__construct();
        Mage::getModel(Mage::getBlockSingleton($GLOBALS["AtEfFxOGkhyngBAXUXI"])->_getConnectorModel($GLOBALS["UGyyVQdyoNiVbNKZtzXF"]))->autoLoginMobileUser();
    }

    
    protected function _getSession()
    {
        return Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    }
    
    public function getOrders($data)
    {
    	$session = Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    	if(!$session->isLoggedIn()){
    		return $this->errorStatus($GLOBALS["RAuFMmkEMroDHywqAkJP"]);
    	}

        $list = $this->_getOrders($data);
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["WXceMDacuSApSjqZABeb"]] = $list[$GLOBALS["WXceMDacuSApSjqZABeb"]];
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]] = $list[$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]];
        return $info;
    }

    
    public function _getOrders($data=null)
    {
        $page = 1;
        $limit = 30;

        if(isset($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]]) && !empty($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]])) $page = $data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]];
        if(isset($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]]) && !empty($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]])) $limit = $data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]];

        $collection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
            ->addFieldToFilter($GLOBALS["udsgbqFGtkNGuyKXxiuf"], $this->_getSession()->getCustomer()->getId())
            ->setOrder($GLOBALS["LNJcPXllxExzrmvPuZCw"], $GLOBALS["abrAGxAkQAOPjFxjvgo"]);

        $thuOFyLBNIKxQaEYhASy = $collection->getSize();

        $collection->getSelect()->limit($limit, ($page - 1) * $limit);
        $orders = array();
        if(count($collection) > 0){
            foreach ($collection as $_collection){
                $_order = $_collection->getData();
                $_order = array(
                    'order_id'         => $_collection->getEntityId(),
                    'increment_id'      => $_collection->getIncrementId(),
                    'total_qty_ordered' => $_collection->getTotalQtyOrdered(),
                    'created_at'        => $_collection->getCreatedAt(),
                    'grand_total'       => $_collection->getGrandTotal(),
                    'status'            => $_collection->getStatus(),
                    'statusLabel'       => $_collection->getStatusLabel(),
                    'order_items'       => $this->getProductFromOrderDetail($_collection),
                    );
                $orders[] = $_order;
            }
        }

        return array(
            'ordersCount' => $thuOFyLBNIKxQaEYhASy,
            'orders' => $orders
            );
    }
     

    public function getOrderDetail($data)
    {
    	$session = Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    	if(!$session->isLoggedIn()){
    		return $this->errorStatus($GLOBALS["RAuFMmkEMroDHywqAkJP"]);
    	}
    	
    	$id = $data[$GLOBALS["RebOSfKjxLaHWlwWPQMS"]];
        $order = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->load($id);
	
        if (count($order->getData()) == 0) {
            return $this->errorStatus();
        }
        $shipping = $order->getShippingAddress();
        $billing  = $order->getBillingAddress();
        
        $detail = array(
            'order_id'          => $id,
            'created_at'        => $order->getCreatedAt(),
            'order_date'        => $order->getUpdatedAt(),
            'status'            => $order->getStatusLabel(),
            'statusLabel'       => $order->getStatusLabel(),
            'increment_id'      => $order->getIncrementId(),
            'total_qty_ordered' => $order->getTotalQtyOrdered(),
            'grand_total'       => $order->getGrandTotal(),
            'subtotal'          => $order->getSubtotal(),
            'tax'               => $order->getTaxAmount(),
            's_fee'             => $order->getShippingAmount(),
            'order_gift_code'   => $order->getCouponCode(),
            'discount'          => abs($order->getDiscountAmount()),
            $GLOBALS["TgmCwIoqPxbJHHLeIAe"]        => $order->getCustomerNote(),
            $GLOBALS["sWCONYouUszQosYnw"]       => $this->getProductFromOrderDetail($order, $width, $height),
            $GLOBALS["xTcREswwoneEcPrMnRIV"]    => $order->getPayment()->getMethodInstance()->getTitle(),
            $GLOBALS["krcTTbNMVVHYidqObhgR"]   => $order->getShippingDescription(),
        );

        if($shipping){
            $ODinwzCDETxsgbKEnBSd = $shipping->getStreetFull();
            $detail[$GLOBALS["zvUPCdlHmlbreSGGUtvb"]] = array(
                'name'         => $shipping->getName(),
                'street'       => $ODinwzCDETxsgbKEnBSd,
                'city'         => $shipping->getCity(),
                'region'       => $shipping->getRegion(),
                'state_code'   => $shipping->getRegionCode(),
                'postcode'     => $shipping->getPostcode(),
                'country'      => $shipping->getCountryModel()->loadByCode($billing->getCountry())->getName(),
                $GLOBALS["bbAGmWKbjedCFATLKJma"] => $shipping->getCountry(),
                $GLOBALS["YIsSpOwBUexreWgtnqHy"]    => $shipping->getTelephone(),
                $GLOBALS["VwCGqpUwTcGsnqOFNfAB"]        => $order->getCustomerEmail(),
            );
        }
        if($billing){
            $XRPBykJrOHTJuaebYUDk  = $billing->getStreetFull();
            $detail[$GLOBALS["voeSoFKiNxswaYPuxYjI"]] = array(
                'name'         => $billing->getName(),
                'street'       => $XRPBykJrOHTJuaebYUDk,
                'city'         => $billing->getCity(),
                'region'       => $billing->getRegion(),
                'state_code'   => $billing->getRegionCode(),
                'postcode'     => $billing->getPostcode(),
                'country'      => $billing->getCountryModel()->loadByCode($billing->getCountry())->getName(),
                $GLOBALS["bbAGmWKbjedCFATLKJma"] => $billing->getCountry(),
                $GLOBALS["YIsSpOwBUexreWgtnqHy"]    => $billing->getTelephone(),
                $GLOBALS["VwCGqpUwTcGsnqOFNfAB"]        => $order->getCustomerEmail(),
            );
        }

        
        $ODyMnpaolzmJzaKvcOMz = array();
        $shipmentCollection = Mage::getResourceModel('sales/order_shipment_collection')
            ->setOrderFilter($order)
            ->load();
        if($shipmentCollection){
            foreach ($shipmentCollection as $shipment){
                foreach($shipment->getAllTracks() as $tracknum){
                    
                    $ODyMnpaolzmJzaKvcOMz[] = $tracknum->getData();
                }
            }
        }
        $detail[$GLOBALS["GuryLgPLyzoTXhiMZFBQ"]] = $ODyMnpaolzmJzaKvcOMz;
        

        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["TADrsdsleiQBYALAqaIp"]] = $detail;
        return $info;
    }

    public function getProductFromOrderDetail($order)
    {
        $productInfo = array();
        $EhRvPiAEKreqwrVqXlHp = $order->getAllVisibleItems();
        foreach ($EhRvPiAEKreqwrVqXlHp as $item) {
            $options = array();
            if ($item->getProductOptions()) { 
                $options = $this->getOptions($item->getProductType(), $item->getProductOptions());
    	    }
    	    
            $vryRWOSAuUlWWHqCFzmZ = $item->getProductId();
            $product = $item->getProduct();
            if (version_compare(Mage::getVersion(), $GLOBALS["DSeSHJEsnihSmpUJlWRO"], $GLOBALS["eWMkgJCNdVbnnuXnMCzf"]) === true) {
                $product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->load($vryRWOSAuUlWWHqCFzmZ);
            }
            
            $image = Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($product, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString();
            $_product = array(
                'product_id'              => $vryRWOSAuUlWWHqCFzmZ,
                'product_name'            => $item->getName(),
                'product_price'           => $item->getPrice(),
                'product_subtotal'        => $item->getRowTotal(),
                'product_subtotal_inctax' => $item->getRowTotalInclTax(),
                'product_image'           => $image,
                'product_qty'             => $item->getQtyOrdered(),
                'options'                 => $options,
            );

            Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->addImageRatio($_product);

            $productInfo[] = $_product;
        }
	    
        return $productInfo;
    }

    public function getOptions($type, $options)
    {
        $list = array();
        if ($type == 'bundle') {
            foreach ($options[$GLOBALS["hoSWxLypDLCUqbJrfjoM"]] as $option) {
                foreach ($option[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] as $value) {
                    $list[] = array(
                        'option_title' => $option['label'],
                        'option_value' => $value['title'],
                        'option_price' => $value['price'],
                    );
                }
            }
        } else {
            if (isset($options[$GLOBALS["OkGlZmKqyZSYlekUtNKt"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["OkGlZmKqyZSYlekUtNKt"]];
            } elseif (isset($options[$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]];
            } elseif (isset($options[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]];
            }	    
            foreach ($IgKlRzJnBsSjzgmLadtC as $option) {
                $list[] = array(
                    'option_title' => $option['label'],
                    'option_value' => $option['value'],
                    'option_price' => isset($option['price']) == true ? $option[$GLOBALS["IXCfKzsjlitrRiMXFvE"]] : 0,
                );
            }
        }
        return $list;
    }

    public function reorder($data)
    {
        $orderId = $data[$GLOBALS["RebOSfKjxLaHWlwWPQMS"]];
        if(empty($orderId))
        {
            return $this->errorStatus($GLOBALS["jCRkEVcFOmjLHkaYevjT"]);
        }

        $order = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->load($orderId);
        if (!$this->_canViewOrder($order)) {
            return $this->errorStatus($GLOBALS["nFxYtfHyVwYOhbNbxiue"]);
        }

        $cart = Mage::getSingleton($GLOBALS["ityBcyyhIwvoixPWFOAP"]);

        $items = $order->getItemsCollection();
        foreach ($items as $item) {
            try {
                $cart->addOrderItem($item);
            } catch (Mage_Core_Exception $e){
                if (Mage::getSingleton($GLOBALS["oqhnqiGXbhloaXGQZqYj"])->getUseNotice(true)) {
                    Mage::getSingleton($GLOBALS["oqhnqiGXbhloaXGQZqYj"])->addNotice($e->getMessage());
                }
                else {
                    Mage::getSingleton($GLOBALS["oqhnqiGXbhloaXGQZqYj"])->addError($e->getMessage());
                }
                return $this->errorStatus($e->getMessage());
                
            } catch (Exception $e) {
                Mage::getSingleton($GLOBALS["oqhnqiGXbhloaXGQZqYj"])->addException($e,
                    Mage::helper($GLOBALS["PemRkVIDrnJHBPNWendz"])->__($GLOBALS["KksgscxNMElHLUDxPqbI"])
                );
                
            }
        }

        $cart->save();
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["AtEfFxOGkhyngBAXUXI"])->_getConnectorModel($GLOBALS["hfLFaFxololAPUNONnAd"]))->getCartInfo();
        return $info;
    }

    
    protected function _canViewOrder($order)
    {
        $customerId = Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"])->getCustomerId();
        $availableStates = Mage::getSingleton($GLOBALS["ywWQEuWJpVPNptLjLAYB"])->getVisibleOnFrontStates();
        if ($order->getId() && $order->getCustomerId() && ($order->getCustomerId() == $customerId)
            && in_array($order->getState(), $availableStates, $strict = true)
            ) {
            return true;
        }
        return false;
    }
} ?>').'<?php '); ?>