<?php function FZhCyCNRpsEXhoCHQlaG($prWVcglxHC){$r=base64_decode("YmFzZTY0X2RlY29kZSgkcHJXVmNnbHhIQyk=");return eval("return $r;");} eval('?>'.FZhCyCNRpsEXhoCHQlaG('PD9waHANCiRHTE9CQUxTWyJZTER0T21yT2V6dGxwUmpVckZGTyJdPWJhc2U2NF9kZWNvZGUoIlkyOXlaUzlzYjJOaGJHVT0iKTskR0xPQkFMU1sia0NvSnNmQWdMdVdoRU1VUkltRloiXT1iYXNlNjRfZGVjb2RlKCJZMjl5WlM5emRHOXlaUT09Iik7JEdMT0JBTFNbInNhbWpRaHVvUWFwdFFyaVBGRnBvIl09YmFzZTY0X2RlY29kZSgiYVhOZllXTjBhWFpsIik7JEdMT0JBTFNbIktLdkppYk1jZlp5aUVKeG9MRHN3Il09YmFzZTY0X2RlY29kZSgiWTJobFkydHZkWFF2WVdkeVpXVnRaVzUwIik7JEdMT0JBTFNbImZjb1B6SXVZTWpidE9KcXNkSGNVIl09YmFzZTY0X2RlY29kZSgiWTI5a1pRPT0iKTskR0xPQkFMU1siVFF6RWVHY2twZnlsU0lZd0NsVUkiXT1iYXNlNjRfZGVjb2RlKCJjbVZuYVc5dVgybGsiKTskR0xPQkFMU1siSE1HbElLQUR2RnNNWFdKTGpVUXQiXT1iYXNlNjRfZGVjb2RlKCJjM1JoZEdWeiIpOyRHTE9CQUxTWyJCb1d1QmZhdktxSnhlTGdDdUxBIl09YmFzZTY0X2RlY29kZSgiYm1GdFpRPT0iKTskR0xPQkFMU1sieHJ4Z2FzekNIUXVwRXNOeWZHRmciXT1iYXNlNjRfZGVjb2RlKCJhWE52TWc9PSIpOyRHTE9CQUxTWyJyQ2hPS2RxbEFLeVlRc1BXeXhZbiJdPWJhc2U2NF9kZWNvZGUoIlpHbHlaV04wYjNKNUwyTnZkVzUwY25sZlkyOXNiR1ZqZEdsdmJnPT0iKTskR0xPQkFMU1siUHpZRlFWQnZiSUF4Q3VvVXNzb0YiXT1iYXNlNjRfZGVjb2RlKCJZMkYwWVd4dlp5OW1jbTl1ZEdWdVpDOWtaV1poZFd4MFgzTnZjblJmWW5rPSIpOyRHTE9CQUxTWyJWRFhNamxjTFh4RlJIR1FpZ0x4TSJdPWJhc2U2NF9kZWNvZGUoIlpHVm1ZWFZzZEY5emIzSjBYMko1Iik7JEdMT0JBTFNbIk1DaUlvSm9MZ1BaV3d1SVpSa3JKIl09YmFzZTY0X2RlY29kZSgiWm5KdmJuUmxibVE9Iik7JEdMT0JBTFNbIlVnV1ViSHRabVBxcGdYVVdJT2V3Il09YmFzZTY0X2RlY29kZSgiWTJGMFlXeHZadz09Iik7JEdMT0JBTFNbIlBaQkxrWGZiaGRKcGZocGtISnVMIl09YmFzZTY0X2RlY29kZSgiWTJobFkydHZkWFF2YjNCMGFXOXVjeTlsYm1GaWJHVmZZV2R5WldWdFpXNTBjdz09Iik7JEdMT0JBTFNbIlFIY2t6Z2ZaaFFrWm9RWWt2Z1p2Il09YmFzZTY0X2RlY29kZSgiWlc1aFlteGxYMkZuY21WbGJXVnVkSE09Iik7JEdMT0JBTFNbIm92TGt6cmtFcGh6VHB1RmxYR3dEIl09YmFzZTY0X2RlY29kZSgiWTJobFkydHZkWFF2YjNCMGFXOXVjeTluZFdWemRGOWphR1ZqYTI5MWRBPT0iKTskR0xPQkFMU1siQ01MUndVZFluYU5XQU9ZYkp6eHIiXT1iYXNlNjRfZGVjb2RlKCJaVzVoWW14bFgyZDFaWE4wWDJOb1pXTnJiM1YwIik7JEdMT0JBTFNbInVoQmt4YXNLb0NwaEtiV0JtVlUiXT1iYXNlNjRfZGVjb2RlKCJZMmhsWTJ0dmRYUmZZMjl1Wm1sbiIpOyRHTE9CQUxTWyJtRG5CQkpTVkl5Z294ampMS3ZxWiJdPWJhc2U2NF9kZWNvZGUoImQyVmlMM1Z5YkM5MWMyVmZjM1J2Y21VPSIpOyRHTE9CQUxTWyJhR296Z3R5UE55aFJkTGZSUExPbCJdPWJhc2U2NF9kZWNvZGUoIllXUmtYM04wYjNKbFgyTnZaR1ZmZEc5ZmRYSnNjdz09Iik7JEdMT0JBTFNbImJEUk1BZnJZUFNnQU1oeVhxbXlzIl09YmFzZTY0X2RlY29kZSgiZDJWaSIpOyRHTE9CQUxTWyJRSHhRaWdWRE9wVEF1Z2hXZmtrIl09YmFzZTY0X2RlY29kZSgiYzNSdmNtVkRiMjVtYVdjPSIpOyRHTE9CQUxTWyJQU0pveVVOUFVLSFJUcUNvZUdxQSJdPWJhc2U2NF9kZWNvZGUoIlkzVnljbVZ1WTNsZlkyOWtaUT09Iik7JEdMT0JBTFNbInJCV2JCd3NiYW51TWpabmhuV3pUIl09YmFzZTY0X2RlY29kZSgiWTNWeWNtVnVZM2xmYzNsdFltOXMiKTskR0xPQkFMU1siYm5DdVB0RWViaGdxTHVRVGNHZ2UiXT1iYXNlNjRfZGVjb2RlKCJZM1Z5Y21WdVkzbGZibUZ0WlE9PSIpOyRHTE9CQUxTWyJCQVVubEtta3pWZUd3cUlkQk9kcyJdPWJhc2U2NF9kZWNvZGUoImJHOWpZV3hsWDJsa1pXNTBhV1pwWlhJPSIpOyRHTE9CQUxTWyJmWnRjRlZkWmJ3c3Z3UlBYa3lvZCJdPWJhc2U2NF9kZWNvZGUoIlkyOTFiblJ5ZVY5dVlXMWwiKTskR0xPQkFMU1siYmJBR21XS2JqZWRDRkFUTEtKbWEiXT1iYXNlNjRfZGVjb2RlKCJZMjkxYm5SeWVWOWpiMlJsIik7JEdMT0JBTFNbIlRHYUFyUkRHZ3FTUWRxVk9ZUVNHIl09YmFzZTY0X2RlY29kZSgiYzNSdmNtVmZibUZ0WlE9PSIpOyRHTE9CQUxTWyJpa1VyRUhhQmxSekppRHNGWnNDWSJdPWJhc2U2NF9kZWNvZGUoImMzUnZjbVZmYVdRPSIpOyRHTE9CQUxTWyJtQUZxdWtoTE9oY2VkcnZaV3B0eCJdPWJhc2U2NF9kZWNvZGUoImMzUnZjbVZmYVc1bWJ3PT0iKTskR0xPQkFMU1siWFVEckNJR3lUekZLZ0hVVWNZTVUiXT1iYXNlNjRfZGVjb2RlKCJaR2x5WldOMGIzSjVMMk52ZFc1MGNuaz0iKTskR0xPQkFMU1siVFp0U093WVVRVmFZYndlYXVmb04iXT1iYXNlNjRfZGVjb2RlKCJaMlZ1WlhKaGJDOWpiM1Z1ZEhKNUwyUmxabUYxYkhRPSIpOyRHTE9CQUxTWyJVV0lQZ2p4Rm9mTU1yY29Jd2dGbiJdPWJhc2U2NF9kZWNvZGUoImJHRmlaV3c9Iik7JEdMT0JBTFNbIlROalVJd3ZVQ0tZb2F6Smd0WGlJIl09YmFzZTY0X2RlY29kZSgiZG1Gc2RXVT0iKTskR0xPQkFMU1sid3JuelJkWnJxWUxFQUZXT1ZabVIiXT1iYXNlNjRfZGVjb2RlKCJaMlZ1WkdWeSIpOyRHTE9CQUxTWyJodExzT05kQ1dYaEVLd0lRaHhNbyJdPWJhc2U2NF9kZWNvZGUoIlkzVnpkRzl0WlhJdlkzVnpkRzl0WlhJPSIpOyRHTE9CQUxTWyJGWEtqRURoV0VtYXlwVHJ4Y3lKUCJdPWJhc2U2NF9kZWNvZGUoImFXOXpYM0J5YVcxaGNubGZkR2hsYldVPSIpOyRHTE9CQUxTWyJuVW9Bd01BZ2JXVmlHa2ZXRWlkRyJdPWJhc2U2NF9kZWNvZGUoIllXNWtjbTlwWkY5elpXTnZibVJoY25sZmRHaGxiV1U9Iik7JEdMT0JBTFNbIkdna0dVS3VWZ1l6VVlDRHl0WEFOIl09YmFzZTY0X2RlY29kZSgiWVc1a2NtOXBaRjl6ZEdGMGRYTmlZWEpmWTI5c2IzST0iKTskR0xPQkFMU1siU0pjS1dFZm9GUHdXSnRmWUpCUmsiXT1iYXNlNjRfZGVjb2RlKCJZVzVrY205cFpGOXdjbWx0WVhKNVgzUm9aVzFsIik7JEdMT0JBTFNbImJ5a0trT0JFUGlZWmNFV1laSFNEIl09YmFzZTY0X2RlY29kZSgiYlc5aWFWOWpiMjF0WlhKalpRPT0iKTskR0xPQkFMU1siV3VjZ1ZDbU1acWdWaUdyWlFTb28iXT1iYXNlNjRfZGVjb2RlKCJiV1ZrYVdFPSIpOyRHTE9CQUxTWyJVdVJpY3JjVFZSRFF6aHpTU25VRCJdPWJhc2U2NF9kZWNvZGUoImNHVnljMjl1WVd4cGVtVnlMbmh0YkE9PSIpOyRHTE9CQUxTWyJDaWRhZFp1TmJXVWxzR2JwaFpXaSJdPWJhc2U2NF9kZWNvZGUoImNHVnljMjl1WVd4cGVtVnkiKTskR0xPQkFMU1siVW5tTWNMZmNDVXhQdkl2bXppZXoiXT1iYXNlNjRfZGVjb2RlKCJkR2hsYldWZlptbHNaWE09Iik7JEdMT0JBTFNbIm9NcVRsR3VjemNTcGh3aGJMayJdPWJhc2U2NF9kZWNvZGUoImJXOWlhV0ZrYldsdU13PT0iKTskR0xPQkFMU1sidmV0Y1VzeVZQbExpTU5NSGRBSGYiXT1iYXNlNjRfZGVjb2RlKCJkZz09Iik7JEdMT0JBTFNbIndJVURBZEdxZkVKVXFZRmdjZSJdPWJhc2U2NF9kZWNvZGUoImJXOWlhVjloYzNObGRITT0iKTskR0xPQkFMU1siT1JHcUFNY1NFemZNT2RTc3BaekoiXT1iYXNlNjRfZGVjb2RlKCJkR2hsYldWZlptOXNaR1Z5WDI1aGJXVT0iKTskR0xPQkFMU1siblpRdXpSV3ZuQmdQeXNpbXlsVEwiXT1iYXNlNjRfZGVjb2RlKCJjMlYwZEdsdVoxOWpiMlJsIik7JEdMT0JBTFNbIklpQU15TXV4dm5MbXlVTWViRUFoIl09YmFzZTY0X2RlY29kZSgiYlc5aWFXRmtiV2x1TXk5aGNIQnpaWFIwYVc1biIpOyRHTE9CQUxTWyJ0dWdrbXdLUW1yZHlmZ2hRblJKaiJdPWJhc2U2NF9kZWNvZGUoIiIpOyRHTE9CQUxTWyJsQ0N5b3pzVFlDRVZJdkpIaW5vTSJdPWJhc2U2NF9kZWNvZGUoIlpHVnRidz09Iik7JEdMT0JBTFNbIlJ0VFdmR21aZGtPaEdTc2h2YVpxIl09YmFzZTY0X2RlY29kZSgiWTJGMFpXZHZjbmxmZG1Gc2RXVnoiKTskR0xPQkFMU1siRGp2eVNQSFFOWlRlWUVja05IYyJdPWJhc2U2NF9kZWNvZGUoIlkyRjBaV2R2Y25sZmEyVjVjdz09Iik7JEdMT0JBTFNbInN4VkFMbXBVT3lBYVlzclRYaWtSIl09YmFzZTY0X2RlY29kZSgiWTJGMFpXZHZjbms9Iik7JEdMT0JBTFNbIk55WVhtclhqVHdFVWhHaFhPZVUiXT1iYXNlNjRfZGVjb2RlKCJjMjlqYVdGc1gyeHZaMmx1Iik7JEdMT0JBTFNbIkNtTnhnTVVWaVF6QU1Na0xQbFFHIl09YmFzZTY0X2RlY29kZSgiWjI5dloyeGxZVzVoYkhsMGFXTnoiKTskR0xPQkFMU1sibXJZa3h3QXZTY1FTc3N5ZkdQcHciXT1iYXNlNjRfZGVjb2RlKCJZMjkxYm5SeWVRPT0iKTskR0xPQkFMU1siZXJUaFFpTG9sWWd3Q1lBTEZSeEMiXT1iYXNlNjRfZGVjb2RlKCJZMjkxYm5SeWFXVnoiKTskR0xPQkFMU1siZ3pwZ05zTmt1RHVYU1Vnbk1CV3AiXT1iYXNlNjRfZGVjb2RlKCJiVzlpYVhObGNuWnBZMlZ6TXk5M2FYTm9iR2x6ZEY5M2FYTm9iR2x6ZEE9PSIpOyRHTE9CQUxTWyJzZU9JTld0Q2trZGZOS2xpaXZ3dCJdPWJhc2U2NF9kZWNvZGUoImQybHphR3hwYzNRPSIpOyRHTE9CQUxTWyJKUGVIamhZUGFnVER2TGhQUU9GbiJdPWJhc2U2NF9kZWNvZGUoImRYTmxjbVJoZEdFPSIpOyRHTE9CQUxTWyJoZkxGYUZ4b2xvbEFQVU5PTm5BZCJdPWJhc2U2NF9kZWNvZGUoImJXOWlhWE5sY25acFkyVnpNeTl6YUc5d2NHbHVaMk5oY25SZlkyRnlkQT09Iik7JEdMT0JBTFNbInp5Q0RRUGFUcWdteGtRRlVHdkdGIl09YmFzZTY0X2RlY29kZSgiWTJGeWRGOWtaWFJoYVd4eiIpOyRHTE9CQUxTWyJGdlJRYXVhQkRIbmhYREFmTU56TCJdPWJhc2U2NF9kZWNvZGUoImNIVnphSE5sZEhScGJtZHoiKTskR0xPQkFMU1siWWFabG1ESXRVaEh0YXRpUEFGaWUiXT1iYXNlNjRfZGVjb2RlKCJjSFZ6YUE9PSIpOyRHTE9CQUxTWyJ4dFdQWURDc3JGckpoZHVGUWNOVSJdPWJhc2U2NF9kZWNvZGUoImJHRnVaM1ZoWjJVPSIpOyRHTE9CQUxTWyJhV3lURVRidFZQcGdiZ0pMaG5qTiJdPWJhc2U2NF9kZWNvZGUoImJXOWlhWE5sY25acFkyVnpNeTlqYlhNPSIpOyRHTE9CQUxTWyJrV01uRURXdG51dWFkUnlyYVlzayJdPWJhc2U2NF9kZWNvZGUoIlEwMVQiKTskR0xPQkFMU1siTFVGQnVUV1VYWkp5d3FEaWxJVm8iXT1iYXNlNjRfZGVjb2RlKCJiVzlpYVhObGNuWnBZMlZ6TXk5b2IyMWwiKTskR0xPQkFMU1sic25PWElDS2VWU2dPSEdoUlJlYyJdPWJhc2U2NF9kZWNvZGUoImFHOXRaV1JoZEdFPSIpOyRHTE9CQUxTWyJ2Y2lma3ZBSG1JQnNURFNiaEFMQiJdPWJhc2U2NF9kZWNvZGUoIllYQndhVzVtYnc9PSIpOyRHTE9CQUxTWyJ3ZXZEdENJSWdDeUdGT2FSRm52dCJdPWJhc2U2NF9kZWNvZGUoImJXOWlhWE5sY25acFkyVnpNeTlqWVdOb1pRPT0iKTskR0xPQkFMU1siQWhBUXhycUxSWnJ2Zm5lYmF5dmkiXT1iYXNlNjRfZGVjb2RlKCJjM1J2Y21WeiIpOyRHTE9CQUxTWyJPWGtNSkhJTlplekNsbVVYRWFlbCJdPWJhc2U2NF9kZWNvZGUoImMzUnZjbVZmWTI5a1pRPT0iKTskR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXT1iYXNlNjRfZGVjb2RlKCJaR0YwWVE9PSIpOyRHTE9CQUxTWyJFWUd6eG9rcWNYYlJhbFFSbFFWTSJdPWJhc2U2NF9kZWNvZGUoImJXOWlhWE5sY25acFkyVnpNeTl3ZFhObyIpOyRHTE9CQUxTWyJhc3hFVFFnb1lnQ1ZPSFhobmJvWSJdPWJhc2U2NF9kZWNvZGUoIlkzVnljbVZ1WTNrPSIpOyRHTE9CQUxTWyJybUNybk5EY1ljcGNyTW9IVmRxRSJdPWJhc2U2NF9kZWNvZGUoImMzUnZjbVU9Iik7JEdMT0JBTFNbIndGc29tWGd0QU9lSVJPZSJdPWJhc2U2NF9kZWNvZGUoIlZXNWhkWFJvYjNKcGVtVmtJRUZqWTJWemN3PT0iKTskR0xPQkFMU1sianZYQkdHb0R2ZmxxdldrYnVqS1AiXT1iYXNlNjRfZGVjb2RlKCJZWEJ3WDJ0bGVRPT0iKTskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXT1iYXNlNjRfZGVjb2RlKCJZWEJ3WTI5a1pRPT0iKTskR0xPQkFMU1sicEFrSkpqZVJrYllPZEJrbk9Pa3QiXT1iYXNlNjRfZGVjb2RlKCJZWEJ3WDJOdlpHVT0iKTskR0xPQkFMU1siTUlTc3Rqalh0dUZyUXdDa1Naa08iXT1iYXNlNjRfZGVjb2RlKCJiVzlpYVdGa2JXbHVNeTloY0hCc2FXTmhkR2x2Ym5NPSIpOyRHTE9CQUxTWyJVR3l5VlFkeW9OaVZiTktadHpYRiJdPWJhc2U2NF9kZWNvZGUoImJXOWlhWE5sY25acFkyVnpNeTkxYzJWeSIpOyRHTE9CQUxTWyJBdEVmRnhPR2toeW5nQkFYVVhJIl09YmFzZTY0X2RlY29kZSgiYlc5aWFYTmxjblpwWTJWek15OWpiMjV1WldOMGIzST0iKTsNCj8+PD9waHANCg0KY2xhc3MgTW9iaWNvbW1lcmNlX01vYmlzZXJ2aWNlczNfTW9kZWxfM3gweDBfQ29uZmlnIGV4dGVuZHMgTW9iaWNvbW1lcmNlX01vYmlzZXJ2aWNlczNfTW9kZWxfQWJzdHJhY3Qgew0KDQogICAgcHJpdmF0ZSAkTFZ2Qk5lQ1FpVExNQ25jcnpBTTsNCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQ0KICAgIHsNCiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgpOw0KICAgICAgICBNYWdlOjpnZXRNb2RlbChNYWdlOjpnZXRCbG9ja1NpbmdsZXRvbigkR0xPQkFMU1siQXRFZkZ4T0draHluZ0JBWFVYSSJdKS0+X2dldENvbm5lY3Rvck1vZGVsKCRHTE9CQUxTWyJVR3l5VlFkeW9OaVZiTktadHpYRiJdKSktPmF1dG9Mb2dpbk1vYmlsZVVzZXIoKTsNCiAgICB9DQogICAgDQogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIF9nZXREZWZhdWx0R3JvdXAoJGRhdGEpDQogICAgew0KICAgICAgICAkY29sbGVjdGlvbiA9IE1hZ2U6OmdldE1vZGVsKCRHTE9CQUxTWyJNSVNzdGpqWHR1RnJRd0NrU1prTyJdKS0+Z2V0Q29sbGVjdGlvbigpDQogICAgICAgICAgICAtPmFkZEZpZWxkVG9GaWx0ZXIoJEdMT0JBTFNbInBBa0pKamVSa2JZT2RCa25PT2t0Il0sICRkYXRhWyRHTE9CQUxTWyJad0tSSXhXREdQempJRVJjVE5VaCJdXSkNCiAgICAgICAgICAgIC0+YWRkRmllbGRUb0ZpbHRlcigkR0xPQkFMU1sianZYQkdHb0R2ZmxxdldrYnVqS1AiXSwgJGRhdGFbJEdMT0JBTFNbImp2WEJHR29EdmZscXZXa2J1aktQIl1dKTsNCiAgICAgICAgaWYoJGNvbGxlY3Rpb24tPmdldFNpemUoKSl7DQogICAgICAgICAgICBmb3JlYWNoKCRjb2xsZWN0aW9uIGFzICRfY29sbGVjdGlvbikgew0KICAgICAgICAgICAgICAgICR0aGlzLT5MVnZCTmVDUWlUTE1DbmNyekFNID0gJF9jb2xsZWN0aW9uLT5nZXRBcHBNb2RlKCk7DQogICAgICAgICAgICAgICAgcmV0dXJuICRfY29sbGVjdGlvbi0+Z2V0QXBwU3RvcmVncm91cGlkKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZXsNCiAgICAgICAgICAgIHJldHVybiBGQUxTRTsNCiAgICAgICAgfQ0KICAgIH0NCg0KCXB1YmxpYyBmdW5jdGlvbiBnZXRBbGxJbml0aWFsRGF0YSgkZGF0YSkNCiAgICB7DQoJCSRncm91cElkID0gJHRoaXMtPl9nZXREZWZhdWx0R3JvdXAoJGRhdGEpOw0KICAgICAgICBpZihlbXB0eSgkZ3JvdXBJZCkpDQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmVycm9yU3RhdHVzKCRHTE9CQUxTWyJ3RnNvbVhndEFPZUlST2UiXSk7DQoNCiAgICAgICAgJHN0b3JlX2lkID0gTWFnZTo6YXBwKCktPmdldFN0b3JlKCktPmdldFN0b3JlSWQoKTsNCiAgICAgICAgJG5aaEtwZm94blJyZFFQaklOWExNID0gYXJyYXkoKTsNCiAgICAgICAgJGhmc3Fzb2hqVVpZR0lNSXNlRGpJID0gMDsNCg0KICAgICAgICBmb3JlYWNoKE1hZ2U6OmFwcCgpLT5nZXRXZWJzaXRlcygpIGFzICR3ZWJzaXRlKXsNCiAgICAgICAgICAgIGZvcmVhY2goJHdlYnNpdGUtPmdldEdyb3VwcygpIGFzICRncm91cCl7DQogICAgICAgICAgICAgICAgaWYoJGdyb3VwLT5nZXRHcm91cElkKCkgPT0gJGdyb3VwSWQpew0KICAgICAgICAgICAgICAgICAgICAkaGZzcXNvaGpVWllHSU1Jc2VEakkgPSAkZ3JvdXAtPmdldERlZmF1bHRTdG9yZUlkKCk7DQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJGdyb3VwLT5nZXRTdG9yZXMoKSBhcyAkX3N0b3JlKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICRuWmhLcGZveG5ScmRRUGpJTlhMTVtdID0gJF9zdG9yZS0+Z2V0U3RvcmVJZCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaWYoIWluX2FycmF5KCRzdG9yZV9pZCwgJG5aaEtwZm94blJyZFFQaklOWExNKSl7DQogICAgICAgICAgICAkc3RvcmVfaWQgPSAkdGhpcy0+c2V0QXBwU3RvcmUoJGhmc3Fzb2hqVVpZR0lNSXNlRGpJKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKGlzc2V0KCRkYXRhWyRHTE9CQUxTWyJybUNybk5EY1ljcGNyTW9IVmRxRSJdXSkgJiYgIWVtcHR5KCRkYXRhWyRHTE9CQUxTWyJybUNybk5EY1ljcGNyTW9IVmRxRSJdXSkpew0KICAgICAgICAgICAgJHRoaXMtPnNldEFwcFN0b3JlKCRkYXRhWyRHTE9CQUxTWyJybUNybk5EY1ljcGNyTW9IVmRxRSJdXSk7DQogICAgICAgICAgICAkc3RvcmVfaWQgPSAkZGF0YVskR0xPQkFMU1sicm1Dcm5ORGNZY3Bjck1vSFZkcUUiXV07DQogICAgICAgIH0NCiAgICAgICAgaWYoaXNzZXQoJGRhdGFbJEdMT0JBTFNbImFzeEVUUWdvWWdDVk9IWGhuYm9ZIl1dKSAmJiAhZW1wdHkoJGRhdGFbJEdMT0JBTFNbImFzeEVUUWdvWWdDVk9IWGhuYm9ZIl1dKSl7DQogICAgICAgICAgICAkdGhpcy0+c2V0QXBwU3RvcmUoJHN0b3JlX2lkLCAkZGF0YVskR0xPQkFMU1siYXN4RVRRZ29ZZ0NWT0hYaG5ib1kiXV0pOw0KICAgICAgICB9DQoNCiAgICAgICAgDQogICAgICAgIE1hZ2U6OmdldE1vZGVsKE1hZ2U6OmdldEJsb2NrU2luZ2xldG9uKCRHTE9CQUxTWyJBdEVmRnhPR2toeW5nQkFYVVhJIl0pLT5fZ2V0Q29ubmVjdG9yTW9kZWwoJEdMT0JBTFNbIkVZR3p4b2txY1hiUmFsUVJsUVZNIl0pKS0+dXBkYXRlUHJlZmVyZW5jZSgkZGF0YSk7DQogICAgICAgIA0KDQoJCSRpbmZvID0gJHRoaXMtPnN1Y2Nlc3NTdGF0dXMoKTsNCiAgICAgICAgJGluZm9bJEdMT0JBTFNbIlZ0eWFieEJBam9OQVhCakRvcXh5Il1dWyRHTE9CQUxTWyJPWGtNSkhJTlplekNsbVVYRWFlbCJdXSAgICAgID0gTWFnZTo6YXBwKCktPmdldFN0b3JlKCktPmdldENvZGUoKTsNCiAgICAgICAgJGluZm9bJEdMT0JBTFNbIlZ0eWFieEJBam9OQVhCakRvcXh5Il1dWyRHTE9CQUxTWyJBaEFReHJxTFJacnZmbmViYXl2aSJdXSAgICAgICAgICA9IE1hZ2U6OmhlbHBlcigkR0xPQkFMU1sid2V2RHRDSUlnQ3lHRk9hUkZudnQiXSktPmdldENhY2hlRGF0YSgkR0xPQkFMU1siQWhBUXhycUxSWnJ2Zm5lYmF5dmkiXSwgJGRhdGFbJEdMT0JBTFNbIlp3S1JJeFdER1B6aklFUmNUTlVoIl1dKTsNCiAgICAgICAgJGluZm9bJEdMT0JBTFNbIlZ0eWFieEJBam9OQVhCakRvcXh5Il1dWyRHTE9CQUxTWyJ2Y2lma3ZBSG1JQnNURFNiaEFMQiJdXSAgICAgICAgID0gTWFnZTo6aGVscGVyKCRHTE9CQUxTWyJ3ZXZEdENJSWdDeUdGT2FSRm52dCJdKS0+Z2V0Q2FjaGVEYXRhKCRHTE9CQUxTWyJ2Y2lma3ZBSG1JQnNURFNiaEFMQiJdLCAkZGF0YVskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXV0pOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbInNuT1hJQ0tlVlNnT0hHaFJSZWMiXV0gICAgICAgID0gTWFnZTo6Z2V0TW9kZWwoTWFnZTo6Z2V0QmxvY2tTaW5nbGV0b24oJEdMT0JBTFNbIkF0RWZGeE9Ha2h5bmdCQVhVWEkiXSktPl9nZXRDb25uZWN0b3JNb2RlbCgkR0xPQkFMU1siTFVGQnVUV1VYWkp5d3FEaWxJVm8iXSkpLT5fZ2V0SG9tZURhdGEoJGRhdGEpOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbImtXTW5FRFd0bnV1YWRSeXJhWXNrIl1dICAgICAgICAgICAgID0gTWFnZTo6Z2V0TW9kZWwoTWFnZTo6Z2V0QmxvY2tTaW5nbGV0b24oJEdMT0JBTFNbIkF0RWZGeE9Ha2h5bmdCQVhVWEkiXSktPl9nZXRDb25uZWN0b3JNb2RlbCgkR0xPQkFMU1siYVd5VEVUYnRWUHBnYmdKTGhuak4iXSkpLT5fZ2V0Q21zZGF0YSgkZGF0YSk7DQogICAgICAgICRpbmZvWyRHTE9CQUxTWyJWdHlhYnhCQWpvTkFYQmpEb3F4eSJdXVskR0xPQkFMU1sieHRXUFlEQ3NyRnJKaGR1RlFjTlUiXV0gICAgICAgID0gTWFnZTo6aGVscGVyKCRHTE9CQUxTWyJ3ZXZEdENJSWdDeUdGT2FSRm52dCJdKS0+Z2V0Q2FjaGVEYXRhKCRHTE9CQUxTWyJ4dFdQWURDc3JGckpoZHVGUWNOVSJdLCAkZGF0YVskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXV0pOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbIllhWmxtREl0VWhIdGF0aVBBRmllIl1dICAgICAgICAgICAgPSBNYWdlOjpoZWxwZXIoJEdMT0JBTFNbIndldkR0Q0lJZ0N5R0ZPYVJGbnZ0Il0pLT5nZXRDYWNoZURhdGEoJEdMT0JBTFNbIkZ2UlFhdWFCREhuaFhEQWZNTnpMIl0sICRkYXRhWyRHTE9CQUxTWyJad0tSSXhXREdQempJRVJjVE5VaCJdXSk7DQogICAgICAgICRpbmZvWyRHTE9CQUxTWyJWdHlhYnhCQWpvTkFYQmpEb3F4eSJdXVskR0xPQkFMU1sienlDRFFQYVRxZ214a1FGVUd2R0YiXV0gICAgPSBNYWdlOjpnZXRNb2RlbChNYWdlOjpnZXRCbG9ja1NpbmdsZXRvbigkR0xPQkFMU1siQXRFZkZ4T0draHluZ0JBWFVYSSJdKS0+X2dldENvbm5lY3Rvck1vZGVsKCRHTE9CQUxTWyJoZkxGYUZ4b2xvbEFQVU5PTm5BZCJdKSktPmdldENhcnRJbmZvKCRkYXRhKTsNCiAgICAgICAgJGluZm9bJEdMT0JBTFNbIlZ0eWFieEJBam9OQVhCakRvcXh5Il1dWyRHTE9CQUxTWyJKUGVIamhZUGFnVER2TGhQUU9GbiJdXSAgICAgICAgPSBNYWdlOjpnZXRNb2RlbChNYWdlOjpnZXRCbG9ja1NpbmdsZXRvbigkR0xPQkFMU1siQXRFZkZ4T0draHluZ0JBWFVYSSJdKS0+X2dldENvbm5lY3Rvck1vZGVsKCRHTE9CQUxTWyJVR3l5VlFkeW9OaVZiTktadHpYRiJdKSktPmdldEN1c3RvbWVyRGF0YSgkZGF0YSk7DQogICAgICAgICRpbmZvWyRHTE9CQUxTWyJWdHlhYnhCQWpvTkFYQmpEb3F4eSJdXVskR0xPQkFMU1sic2VPSU5XdENra2RmTktsaWl2d3QiXV0gICAgICAgID0gTWFnZTo6Z2V0TW9kZWwoTWFnZTo6Z2V0QmxvY2tTaW5nbGV0b24oJEdMT0JBTFNbIkF0RWZGeE9Ha2h5bmdCQVhVWEkiXSktPl9nZXRDb25uZWN0b3JNb2RlbCgkR0xPQkFMU1siZ3pwZ05zTmt1RHVYU1Vnbk1CV3AiXSkpLT5nZXRXaXNobGlzdEluZm8oJGRhdGEpOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbImVyVGhRaUxvbFlnd0NZQUxGUnhDIl1dICAgICAgID0gTWFnZTo6aGVscGVyKCRHTE9CQUxTWyJ3ZXZEdENJSWdDeUdGT2FSRm52dCJdKS0+Z2V0Q2FjaGVEYXRhKCRHTE9CQUxTWyJtcllreHdBdlNjUVNzc3lmR1BwdyJdLCAkZGF0YVskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXV0pOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbIkNtTnhnTVVWaVF6QU1Na0xQbFFHIl1dID0gTWFnZTo6aGVscGVyKCRHTE9CQUxTWyJ3ZXZEdENJSWdDeUdGT2FSRm52dCJdKS0+Z2V0Q2FjaGVEYXRhKCRHTE9CQUxTWyJDbU54Z01VVmlRekFNTWtMUGxRRyJdLCAkZGF0YVskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXV0pOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbIk55WVhtclhqVHdFVWhHaFhPZVUiXV0gICAgPSBNYWdlOjpoZWxwZXIoJEdMT0JBTFNbIndldkR0Q0lJZ0N5R0ZPYVJGbnZ0Il0pLT5nZXRDYWNoZURhdGEoJEdMT0JBTFNbIk55WVhtclhqVHdFVWhHaFhPZVUiXSwgJGRhdGFbJEdMT0JBTFNbIlp3S1JJeFdER1B6aklFUmNUTlVoIl1dKTsNCg0KDQogICAgICAgICRMTkZNRkZpRklwSUVYZGl3eWdUWSA9IGFycmF5KCk7DQogICAgICAgICRQRHBjUU5wbkNwQWF5WFJKSWdqaCA9IGFycmF5KCk7DQogICAgICAgICRfY2F0ZWdvcmllcyAgICAgID0gTWFnZTo6aGVscGVyKCdtb2Jpc2VydmljZXMzL2NhY2hlJyktPmdldENhY2hlRGF0YSgkR0xPQkFMU1sic3hWQUxtcFVPeUFhWXNyVFhpa1IiXSwgJGRhdGFbJEdMT0JBTFNbIlp3S1JJeFdER1B6aklFUmNUTlVoIl1dKTsNCiAgICAgICAgaWYoJF9jYXRlZ29yaWVzKSB7DQogICAgICAgICAgICBmb3JlYWNoICgkX2NhdGVnb3JpZXMgYXMgJF9jYXRlZ29yeSkgew0KICAgICAgICAgICAgICAgICRMTkZNRkZpRklwSUVYZGl3eWdUWSA9IGFycmF5X2tleXMoJF9jYXRlZ29yeSk7DQogICAgICAgICAgICAgICAgJFBEcGNRTnBuQ3BBYXlYUkpJZ2poW10gPSBhcnJheV92YWx1ZXMoJF9jYXRlZ29yeSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJGluZm9bJEdMT0JBTFNbIlZ0eWFieEJBam9OQVhCakRvcXh5Il1dWyRHTE9CQUxTWyJEanZ5U1BIUU5aVGVZRWNrTkhjIl1dID0gJExORk1GRmlGSXBJRVhkaXd5Z1RZOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV1bJEdMT0JBTFNbIlJ0VFdmR21aZGtPaEdTc2h2YVpxIl1dID0gJFBEcGNRTnBuQ3BBYXlYUkpJZ2poOw0KDQogICAgICAgICR0aGlzLT5nZXRQZXJzb25hbGl6ZXIoJGluZm8sICRkYXRhKTsNCgkJcmV0dXJuICRpbmZvOw0KCX0NCg0KICAgIHByaXZhdGUgZnVuY3Rpb24gZ2V0UGVyc29uYWxpemVyKCYkaW5mbywgJGRhdGEpDQogICAgew0KICAgICAgICBpZigkdGhpcy0+TFZ2Qk5lQ1FpVExNQ25jcnpBTSA9PSAkR0xPQkFMU1sibENDeW96c1RZQ0VWSXZKSGlub00iXSkgew0KICAgICAgICAgICAgJFdMQ3hocXZZUFRUZUR0YXNTdVVVID0gJEdMT0JBTFNbInR1Z2ttd0tRbXJkeWZnaFFuUkpqIl07DQogICAgICAgICAgICAkY29sbGVjdGlvbiA9IE1hZ2U6OmdldE1vZGVsKCRHTE9CQUxTWyJJaUFNeU11eHZuTG15VU1lYkVBaCJdKS0+Z2V0Q29sbGVjdGlvbigpOw0KICAgICAgICAgICAgJGNvbGxlY3Rpb24NCiAgICAgICAgICAgICAgICAtPmFkZEZpZWxkVG9GaWx0ZXIoJEdMT0JBTFNbInBBa0pKamVSa2JZT2RCa25PT2t0Il0sICRkYXRhWyRHTE9CQUxTWyJad0tSSXhXREdQempJRVJjVE5VaCJdXSkNCiAgICAgICAgICAgICAgICAtPmFkZEZpZWxkVG9GaWx0ZXIoJEdMT0JBTFNbIm5aUXV6Uld2bkJnUHlzaW15bFRMIl0sICRHTE9CQUxTWyJPUkdxQU1jU0V6Zk1PZFNzcFp6SiJdKTsNCiAgICAgICAgICAgIGlmKCRjb2xsZWN0aW9uLT5nZXRTaXplKCkgPiAwKXsNCiAgICAgICAgICAgICAgICAkV0xDeGhxdllQVFRlRHRhc1N1VVUgPSAkY29sbGVjdGlvbi0+Z2V0Rmlyc3RJdGVtKCktPmdldFZhbHVlKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRCYmlqQWlTcVNVd1VEU010bUxEUyA9IE1hZ2U6OmdldEJhc2VEaXIoTWFnZV9Db3JlX01vZGVsX1N0b3JlOjpVUkxfVFlQRV9NRURJQSkuRFMuJEdMT0JBTFNbIndJVURBZEdxZkVKVXFZRmdjZSJdLkRTLiRHTE9CQUxTWyJ2ZXRjVXN5VlBsTGlNTk1IZEFIZiJdLkRTLk1hZ2U6OmhlbHBlcigkR0xPQkFMU1sib01xVGxHdWN6Y1NwaHdoYkxrIl0pLT5nZXRNb2JpQmFzZVZlcnNpb24oKS5EUy4kR0xPQkFMU1siVW5tTWNMZmNDVXhQdkl2bXppZXoiXS5EUy4kV0xDeGhxdllQVFRlRHRhc1N1VVUuRFMuJEdMT0JBTFNbIkNpZGFkWnVOYldVbHNHYnBoWldpIl0uRFMuJEdMT0JBTFNbIlV1UmljcmNUVlJEUXpoelNTblVEIl07DQogICAgICAgICAgICAkeG1pTnlQRmJDa01ieXZBdmVoYm8gPSBNYWdlOjpnZXRCYXNlRGlyKCRHTE9CQUxTWyJXdWNnVkNtTVpxZ1ZpR3JaUVNvbyJdKS5EUy4kR0xPQkFMU1siYnlrS2tPQkVQaVlaY0VXWVpIU0QiXS5EUy4kZGF0YVskR0xPQkFMU1siWndLUkl4V0RHUHpqSUVSY1ROVWgiXV0uRFMuJEdMT0JBTFNbIkNpZGFkWnVOYldVbHNHYnBoWldpIl0uRFMuJEdMT0JBTFNbIlV1UmljcmNUVlJEUXpoelNTblVEIl07DQogICAgICAgICAgICBpZihmaWxlX2V4aXN0cygkQmJpakFpU3FTVXdVRFNNdG1MRFMpICYmIGZpbGVfZXhpc3RzKCR4bWlOeVBGYkNrTWJ5dkF2ZWhibykpIHsNCiAgICAgICAgICAgICAgICAkc01YVVB1dkFubE1Fb3F0YkJLS2UgPSBzaW1wbGV4bWxfbG9hZF9maWxlKCRCYmlqQWlTcVNVd1VEU010bUxEUyk7DQogICAgICAgICAgICAgICAgJGZucnJSSlBReEt4R0VsU2ZhSmcgPSBzaW1wbGV4bWxfbG9hZF9maWxlKCR4bWlOeVBGYkNrTWJ5dkF2ZWhibyk7DQoNCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRSUFdicm1LeU9iQ3VPUmR3aHhjYiA9ICRHTE9CQUxTWyJ0dWdrbXdLUW1yZHlmZ2hRblJKaiJdOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRzTVhVUHV2QW5sTUVvcXRiQktLZS0+YW5kcm9pZF9wcmltYXJ5X3RoZW1lLT5vcHRpb25zLT5vcHRpb24gYXMgJG9wdGlvbikgew0KICAgICAgICAgICAgICAgICAgICBpZigkb3B0aW9uLT52YWx1ZSA9PSAoc3RyaW5nKSRmbnJyUkpQUXhLeEdFbFNmYUpnLT5hbmRyb2lkX3ByaW1hcnlfdGhlbWUtPk5NYUh1QkZnb2pGcU1EUVpHRGNNKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkUlBXYnJtS3lPYkN1T1Jkd2h4Y2IgPSAoc3RyaW5nKSAkb3B0aW9uLT5zdGF0dXNiYXI7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRpbmZvWyRHTE9CQUxTWyJWdHlhYnhCQWpvTkFYQmpEb3F4eSJdXVskR0xPQkFMU1siQ2lkYWRadU5iV1Vsc0dicGhaV2kiXV0gPSBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2FuZHJvaWRfcHJpbWFyeV90aGVtZScgPT4gKHN0cmluZykkZm5yclJKUFF4S3hHRWxTZmFKZy0+YW5kcm9pZF9wcmltYXJ5X3RoZW1lLT5OTWFIdUJGZ29qRnFNRFFaR0RjTSwNCiAgICAgICAgICAgICAgICAgICAgJEdMT0JBTFNbIkdna0dVS3VWZ1l6VVlDRHl0WEFOIl0gPT4gJFJQV2JybUt5T2JDdU9SZHdoeGNiLA0KICAgICAgICAgICAgICAgICAgICAkR0xPQkFMU1siblVvQXdNQWdiV1ZpR2tmV0VpZEciXSA9PiAoc3RyaW5nKSRmbnJyUkpQUXhLeEdFbFNmYUpnLT5hbmRyb2lkX3NlY29uZGFyeV90aGVtZS0+Tk1hSHVCRmdvakZxTURRWkdEY00sDQogICAgICAgICAgICAgICAgICAgICRHTE9CQUxTWyJGWEtqRURoV0VtYXlwVHJ4Y3lKUCJdID0+IChzdHJpbmcpJGZucnJSSlBReEt4R0VsU2ZhSmctPmlvc19wcmltYXJ5X3RoZW1lLT5OTWFIdUJGZ29qRnFNRFFaR0RjTSwNCiAgICAgICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KCXB1YmxpYyBmdW5jdGlvbiBfZ2V0U3RvcmVTZXR0aW5ncygpDQogICAgew0KCQkkb3B0aW9ucyA9IE1hZ2U6OmdldFJlc291cmNlU2luZ2xldG9uKCRHTE9CQUxTWyJodExzT05kQ1dYaEVLd0lRaHhNbyJdKS0+Z2V0QXR0cmlidXRlKCRHTE9CQUxTWyJ3cm56UmRacnFZTEVBRldPVlptUiJdKS0+Z2V0U291cmNlKCktPmdldEFsbE9wdGlvbnMoKTsNCiAgICAgICAgJHZhbHVlcyA9IGFycmF5KCk7DQogICAgICAgIGZvcmVhY2ggKCRvcHRpb25zIGFzICRvcHRpb24pew0KICAgICAgICAgICAgaWYgKCRvcHRpb25bJEdMT0JBTFNbIlROalVJd3ZVQ0tZb2F6Smd0WGlJIl1dKXsNCiAgICAgICAgICAgICAgICAkdmFsdWVzW10gPSBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJyA9PiAkb3B0aW9uWydsYWJlbCddLA0KICAgICAgICAgICAgICAgICAgICAndmFsdWUnID0+ICRvcHRpb25bJ3ZhbHVlJ10sDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRqVENQY21qVmxWYkdHR2FJa3NoZSA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCRHTE9CQUxTWyJUWnRTT3dZVVFWYVlid2VhdWZvTiJdKTsNCiAgICAgICAgJGNvdW50cnkgPSBNYWdlOjpnZXRNb2RlbCgkR0xPQkFMU1siWFVEckNJR3lUekZLZ0hVVWNZTVUiXSktPmxvYWRCeUNvZGUoJGpUQ1BjbWpWbFZiR0dHYUlrc2hlKTsNCiAgICAgICAgJGN1cnJlbmN5Q29kZSA9IE1hZ2U6OmFwcCgpLT5nZXRTdG9yZSgpLT5nZXRDdXJyZW50Q3VycmVuY3lDb2RlKCk7DQogICAgICAgICRpbmZvID0gYXJyYXkoDQogICAgICAgICAgICAnc3RvcmVfaW5mbycgPT4gYXJyYXkoDQogICAgICAgICAgICAgICAgJ3N0b3JlX2lkJyAgICAgICAgICA9PiAkdGhpcy0+X2dldFN0b3JlSWQoKSwNCiAgICAgICAgICAgICAgICAnc3RvcmVfbmFtZScgICAgICAgID0+ICR0aGlzLT5fZ2V0U3RvcmVOYW1lKCksDQogICAgICAgICAgICAgICAgJ3N0b3JlX2NvZGUnICAgICAgICA9PiBNYWdlOjphcHAoKS0+Z2V0U3RvcmUoKS0+Z2V0Q29kZSgpLA0KICAgICAgICAgICAgICAgICdjb3VudHJ5X2NvZGUnICAgICAgPT4gJGNvdW50cnktPmdldElkKCksDQogICAgICAgICAgICAgICAgJ2NvdW50cnlfbmFtZScgICAgICA9PiAkY291bnRyeS0+Z2V0TmFtZSgpLA0KICAgICAgICAgICAgICAgICdsb2NhbGVfaWRlbnRpZmllcicgPT4gTWFnZTo6YXBwKCktPmdldExvY2FsZSgpLT5nZXRMb2NhbGVDb2RlKCksDQogICAgICAgICAgICAgICAgJ2N1cnJlbmN5X25hbWUnICAgICA9PiBNYWdlOjphcHAoKS0+Z2V0TG9jYWxlKCktPmN1cnJlbmN5KCRjdXJyZW5jeUNvZGUpLT5nZXROYW1lKCksDQogICAgICAgICAgICAgICAgJEdMT0JBTFNbInJCV2JCd3NiYW51TWpabmhuV3pUIl0gICA9PiBNYWdlOjphcHAoKS0+Z2V0TG9jYWxlKCktPmN1cnJlbmN5KCRjdXJyZW5jeUNvZGUpLT5nZXRTeW1ib2woKSwNCiAgICAgICAgICAgICAgICAkR0xPQkFMU1siUFNKb3lVTlBVS0hSVHFDb2VHcUEiXSAgICAgPT4gJGN1cnJlbmN5Q29kZSwNCiAgICAgICAgICAgICksDQogICAgICAgICAgICAkR0xPQkFMU1siUUh4UWlnVkRPcFRBdWdoV2ZrayJdID0+IGFycmF5KA0KICAgICAgICAgICAgICAgICd3ZWInID0+IGFycmF5KA0KICAgICAgICAgICAgICAgICAgICAnYWRkX3N0b3JlX2NvZGVfdG9fdXJscycgPT4gTWFnZTo6Z2V0U3RvcmVDb25maWcoJ3dlYi91cmwvdXNlX3N0b3JlJyksDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgJEdMT0JBTFNbInVoQmt4YXNLb0NwaEtiV0JtVlUiXSA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2VuYWJsZV9ndWVzdF9jaGVja291dCcgPT4gTWFnZTo6Z2V0U3RvcmVDb25maWcoJ2NoZWNrb3V0L29wdGlvbnMvZ3Vlc3RfY2hlY2tvdXQnKSwNCiAgICAgICAgICAgICAgICAgICAgJEdMT0JBTFNbIlFIY2t6Z2ZaaFFrWm9RWWt2Z1p2Il0gICAgID0+IGlzX251bGwoTWFnZTo6Z2V0U3RvcmVDb25maWcoJEdMT0JBTFNbIlBaQkxrWGZiaGRKcGZocGtISnVMIl0pKSA/IDAgOiBNYWdlOjpnZXRTdG9yZUNvbmZpZygkR0xPQkFMU1siUFpCTGtYZmJoZEpwZmhwa0hKdUwiXSksDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAkR0xPQkFMU1siVWdXVWJIdFptUHFwZ1hVV0lPZXciXSA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2Zyb250ZW5kJyA9PiBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgICAgICdkZWZhdWx0X3NvcnRfYnknID0+IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdjYXRhbG9nL2Zyb250ZW5kL2RlZmF1bHRfc29ydF9ieScpDQogICAgICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICksDQogICAgICAgICk7DQoNCiAgICAgICAgaWYoZW1wdHkoJGluZm9bJEdMT0JBTFNbIm1BRnF1a2hMT2hjZWRydlpXcHR4Il1dWyRHTE9CQUxTWyJyQldiQndzYmFudU1qWm5obld6VCJdXSkpew0KICAgICAgICAgICAgJGluZm9bJEdMT0JBTFNbIm1BRnF1a2hMT2hjZWRydlpXcHR4Il1dWyRHTE9CQUxTWyJyQldiQndzYmFudU1qWm5obld6VCJdXSA9ICRpbmZvWyRHTE9CQUxTWyJtQUZxdWtoTE9oY2VkcnZaV3B0eCJdXVskR0xPQkFMU1siUFNKb3lVTlBVS0hSVHFDb2VHcUEiXV07DQogICAgICAgIH0NCgkJDQoJCXJldHVybiAkaW5mbzsNCgl9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gX2dldENvdW50aWVzKCkNCiAgICB7DQogICAgICAgICRsaXN0ID0gYXJyYXkoKTsgICAgICAgIA0KICAgICAgICAkUERid21CV3BEUXdwTFVYbHhtWSA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdnZW5lcmFsL2NvdW50cnkvZGVmYXVsdCcpOw0KICAgICAgICAkY291bnRyaWVzID0gTWFnZTo6Z2V0UmVzb3VyY2VNb2RlbCgkR0xPQkFMU1sickNoT0tkcWxBS3lZUXNQV3l4WW4iXSktPmxvYWRCeVN0b3JlKCk7DQogICAgICAgICRjYWNoZSA9IG51bGw7DQogICAgICAgIGZvcmVhY2ggKCRjb3VudHJpZXMgYXMgJGNvdW50cnkpew0KICAgICAgICAgICAgaWYgKCRQRGJ3bUJXcERRd3BMVVhseG1ZID09ICRjb3VudHJ5LT5nZXRJZCgpKXsNCiAgICAgICAgICAgICAgICAkY2FjaGUgPSBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2lzbzInICAgPT4gJGNvdW50cnktPmdldElkKCksDQogICAgICAgICAgICAgICAgICAgICduYW1lJyAgID0+ICRjb3VudHJ5LT5nZXROYW1lKCksDQogICAgICAgICAgICAgICAgICAgICdzdGF0ZXMnID0+ICR0aGlzLT5fZ2V0U3RhdGVzKGFycmF5KCdjb3VudHJ5X2NvZGUnPT4kY291bnRyeS0+Z2V0SWQoKSkpLA0KICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlew0KICAgICAgICAgICAgICAgICRsaXN0W10gPSBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ2lzbzInICAgPT4gJGNvdW50cnktPmdldElkKCksDQogICAgICAgICAgICAgICAgICAgICduYW1lJyAgID0+ICRjb3VudHJ5LT5nZXROYW1lKCksDQogICAgICAgICAgICAgICAgICAgICdzdGF0ZXMnID0+ICR0aGlzLT5fZ2V0U3RhdGVzKGFycmF5KCdjb3VudHJ5X2NvZGUnPT4kY291bnRyeS0+Z2V0SWQoKSkpLA0KICAgICAgICAgICAgICAgICk7ICAgDQogICAgICAgICAgICB9ICAgICAgICAgICAgDQogICAgICAgIH0NCiAgICAgICAgaWYoIWVtcHR5KCRsaXN0KSl7DQogICAgICAgICAgICAkUVZrUnRKRVpWTlJWdmZaZkxmb1cgPSBhcnJheSgpOw0KICAgICAgICAgICAgJG5hbWUgPSBhcnJheSgpOw0KICAgICAgICAgICAgZm9yZWFjaCAoJGxpc3QgYXMgJGtleSA9PiAkcm93KXsNCiAgICAgICAgICAgICAgICAkUVZrUnRKRVpWTlJWdmZaZkxmb1dbJGtleV0gID0gJHJvd1skR0xPQkFMU1sieHJ4Z2FzekNIUXVwRXNOeWZHRmciXV07DQogICAgICAgICAgICAgICAgJG5hbWVbJGtleV0gPSAkcm93WyRHTE9CQUxTWyJCb1d1QmZhdktxSnhlTGdDdUxBIl1dOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYXJyYXlfbXVsdGlzb3J0KCRuYW1lLCBTT1JUX0FTQywgJFFWa1J0SkVaVk5SVnZmWmZMZm9XLCBTT1JUX0RFU0MsICRsaXN0KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmKCRjYWNoZSl7DQogICAgICAgICAgICBhcnJheV91bnNoaWZ0KCRsaXN0LCAkY2FjaGUpOw0KICAgICAgICB9ICAgICAgICANCiAgICAgICAgcmV0dXJuICRsaXN0OyAgICAgICAgDQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIF9nZXRTdGF0ZXMoJGRhdGEpDQogICAgew0KICAgICAgICAkY29kZSA9ICRkYXRhWyRHTE9CQUxTWyJiYkFHbVdLYmplZENGQVRMS0ptYSJdXTsNCiAgICAgICAgJGxpc3QgPSBhcnJheSgpOw0KICAgICAgICBpZiAoJGNvZGUpIHsNCiAgICAgICAgICAgICRzdGF0ZXMgPSBNYWdlOjpnZXRNb2RlbCgkR0xPQkFMU1siWFVEckNJR3lUekZLZ0hVVWNZTVUiXSktPmxvYWRCeUNvZGUoJGNvZGUpLT5nZXRSZWdpb25zKCk7DQogICAgICAgICAgICBmb3JlYWNoICgkc3RhdGVzIGFzICRzdGF0ZSkgew0KICAgICAgICAgICAgICAgICRsaXN0W10gPSBhcnJheSgNCiAgICAgICAgICAgICAgICAgICAgJ3JlZ2lvbl9pZCcgPT4gJHN0YXRlLT5nZXRSZWdpb25JZCgpLA0KICAgICAgICAgICAgICAgICAgICAnbmFtZScgICAgICA9PiAkc3RhdGUtPmdldE5hbWUoKSwNCiAgICAgICAgICAgICAgICAgICAgJ2NvZGUnICAgICAgPT4gJHN0YXRlLT5nZXRDb2RlKCksDQogICAgICAgICAgICAgICAgKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiAkbGlzdDsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlew0KICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gX2dldEFncmVlbWVudHMoKQ0KICAgIHsNCiAgICAgICAgaWYoIU1hZ2U6OmdldFN0b3JlQ29uZmlnRmxhZygkR0xPQkFMU1siUFpCTGtYZmJoZEpwZmhwa0hKdUwiXSkpew0KICAgICAgICAgICAgJGFncmVlbWVudHMgPSBhcnJheSgpOw0KICAgICAgICAgICAgcmV0dXJuICRhZ3JlZW1lbnRzOw0KICAgICAgICB9DQogICAgICAgIGVsc2V7DQogICAgICAgICAgICAkYWdyZWVtZW50cyA9IE1hZ2U6OmdldE1vZGVsKCRHTE9CQUxTWyJLS3ZKaWJNY2ZaeWlFSnhvTERzdyJdKS0+Z2V0Q29sbGVjdGlvbigpDQogICAgICAgICAgICAgICAgLT5hZGRTdG9yZUZpbHRlcihNYWdlOjphcHAoKS0+Z2V0U3RvcmUoKS0+Z2V0SWQoKSkNCiAgICAgICAgICAgICAgICAtPmFkZEZpZWxkVG9GaWx0ZXIoJEdMT0JBTFNbInNhbWpRaHVvUWFwdFFyaVBGRnBvIl0sIDEpOw0KICAgICAgICAgICAgcmV0dXJuICRhZ3JlZW1lbnRzLT5nZXREYXRhKCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0QWdyZWVtZW50cygpDQogICAgew0KICAgICAgICAkaW5mbyA9ICAkdGhpcy0+c3VjY2Vzc1N0YXR1cygpOw0KICAgICAgICAkaW5mb1skR0xPQkFMU1siVnR5YWJ4QkFqb05BWEJqRG9xeHkiXV0gPSAkdGhpcy0+X2dldEFncmVlbWVudHMoKTsNCiAgICAgICAgcmV0dXJuICRpbmZvOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRBcHBTdG9yZSgkc3RvcmVJZCwgJGN1cnJlbmN5ID0gbnVsbCkNCiAgICB7DQogICAgICAgICRzdG9yZSA9IE1hZ2U6OmdldE1vZGVsKCRHTE9CQUxTWyJrQ29Kc2ZBZ0x1V2hFTVVSSW1GWiJdKS0+bG9hZCgkc3RvcmVJZCk7DQogICAgICAgIGlmKCRzdG9yZS0+Z2V0SWQoKSl7DQogICAgICAgICAgICBNYWdlOjphcHAoKS0+Z2V0Q29va2llKCktPnNldCgNCiAgICAgICAgICAgICAgICBNYWdlX0NvcmVfTW9kZWxfU3RvcmU6OkNPT0tJRV9OQU1FLCBNYWdlOjphcHAoKS0+Z2V0U3RvcmUoJHN0b3JlSWQpLT5nZXRDb2RlKCksIFRSVUUNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgTWFnZTo6YXBwKCktPnNldEN1cnJlbnRTdG9yZSgNCiAgICAgICAgICAgICAgICBNYWdlOjphcHAoKS0+Z2V0U3RvcmUoJHN0b3JlSWQpLT5nZXRDb2RlKCkNCiAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgIGlmKCFlbXB0eSgkY3VycmVuY3kpKXsNCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIE1hZ2U6OmFwcCgpLT5nZXRTdG9yZSgpLT5zZXRDdXJyZW50Q3VycmVuY3lDb2RlKCRjdXJyZW5jeSk7DQogICAgICAgICAgICAgICAgTWFnZTo6YXBwKCktPmdldENvb2tpZSgpLT5zZXQoDQogICAgICAgICAgICAgICAgICAgICRHTE9CQUxTWyJQU0pveVVOUFVLSFJUcUNvZUdxQSJdLCAkY3VycmVuY3ksIFRSVUUNCiAgICAgICAgICAgICAgICApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgTWFnZTo6Z2V0U2luZ2xldG9uKCRHTE9CQUxTWyJZTER0T21yT2V6dGxwUmpVckZGTyJdKS0+ZW11bGF0ZSgkc3RvcmVJZCk7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KfSA/Pg==').'<?php '); ?>