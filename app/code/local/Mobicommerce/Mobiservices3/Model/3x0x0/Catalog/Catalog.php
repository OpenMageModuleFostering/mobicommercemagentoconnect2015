<?php function rNQvDNNAMqPrkbohAigA($wNiZeBKszN){$r=base64_decode("YmFzZTY0X2RlY29kZSgkd05pWmVCS3N6Tik=");return eval("return $r;");} eval('?>'.rNQvDNNAMqPrkbohAigA('<?php
$GLOBALS["OecjgeveAguzJiqDxlIO"]=base64_decode("cGFyZW50X2lk");$GLOBALS["enNqNaCvEaCEJfTuGZEY"]=base64_decode("Ig==");$GLOBALS["mADcDrPgLtOqLDssenuj"]=base64_decode("bWlu");$GLOBALS["uXLGBVAYHZPiTuDhJWkD"]=base64_decode("Y2F0YWxvZy9sYXllcg==");$GLOBALS["PlMIiOdaIwcSLByTwLpK"]=base64_decode("bWF4");$GLOBALS["fcoPzIuYMjbtOJqsdHcU"]=base64_decode("Y29kZQ==");$GLOBALS["UWIPgjxFofMMrcoIwgFn"]=base64_decode("bGFiZWw=");$GLOBALS["xTfpcXyoLrWHKltgxtwp"]=base64_decode("YXR0cmlidXRlQ29kZQ==");$GLOBALS["zXsINfWGmfkFloAAxbcc"]=base64_decode("Y2F0YWxvZ3NlYXJjaC9sYXllcl9maWx0ZXJfYXR0cmlidXRl");$GLOBALS["pqVXYkTkzQqIqGugVhGy"]=base64_decode("Y2F0YWxvZy9sYXllcl9maWx0ZXJfYXR0cmlidXRl");$GLOBALS["VkazBnstjSTUmVliXjhN"]=base64_decode("Y2F0YWxvZy9sYXllcl9maWx0ZXJfZGVjaW1hbA==");$GLOBALS["lQtGutVvIuZbSVWMzeFb"]=base64_decode("ZGVjaW1hbA==");$GLOBALS["psExTFzlLoYKgojTLXHb"]=base64_decode("Y2F0YWxvZy9sYXllcl9maWx0ZXJfcHJpY2U=");$GLOBALS["maKUHUDjGVPbBRMtVrCw"]=base64_decode("cmVsYXRpb24=");$GLOBALS["DduhgfNAtYnaQvvYBuh"]=base64_decode("dGFnL3RhZw==");$GLOBALS["ZnnkbqOEXOBANGDSWXgE"]=base64_decode("bW9iaWljb251cmw=");$GLOBALS["NFEiyPlncFksnlRULnCI"]=base64_decode("bW9iaWljb24=");$GLOBALS["usQgqSxeDwaxJeUAIhPM"]=base64_decode("aW1hZ2V1cmw=");$GLOBALS["MHnhKiBomzagpEodlXvq"]=base64_decode("TUFHRU5UT19DQVRFR09SWV9USFVNQk5BSUw=");$GLOBALS["oMqTlGuczcSphwhbLk"]=base64_decode("bW9iaWFkbWluMw==");$GLOBALS["greMjHLAJCwhvtvtysNM"]=base64_decode("Y2F0ZWdvcnlfaWNvbnM=");$GLOBALS["nZQuzRWvnBgPysimylTL"]=base64_decode("c2V0dGluZ19jb2Rl");$GLOBALS["pAkJJjeRkbYOdBknOOkt"]=base64_decode("YXBwX2NvZGU=");$GLOBALS["IiAMyMuxvnLmyUMebEAh"]=base64_decode("bW9iaWFkbWluMy9hcHBzZXR0aW5n");$GLOBALS["gkcrEqvopYWKBRpEJslV"]=base64_decode("Y2F0YWxvZ2ludmVudG9yeS9zdG9jaw==");$GLOBALS["ZsOCbmbtvcbdAQDhY"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0X3Zpc2liaWxpdHk=");$GLOBALS["kCoJsfAgLuWhEMURImFZ"]=base64_decode("Y29yZS9zdG9yZQ==");$GLOBALS["UdMbGacpozweTmeCGNPQ"]=base64_decode("dGh1bWJuYWls");$GLOBALS["TcDUGskLGppupyGRDtso"]=base64_decode("ZmluYWxfcHJpY2U=");$GLOBALS["cObngTcExoZkYbJVKQUk"]=base64_decode("dHlwZV9pZA==");$GLOBALS["CkgCQXyStLUUGdkAAVqQ"]=base64_decode("TWFnZV9SZXBvcnRzX0Jsb2NrX1Byb2R1Y3RfVmlld2Vk");$GLOBALS["WucgVCmMZqgViGrZQSoo"]=base64_decode("bWVkaWE=");$GLOBALS["hdNADhDYzBGwyDbViRvk"]=base64_decode("dGV4dA==");$GLOBALS["UOVexLkZcLhtzwapZLrU"]=base64_decode("c3RvcmVfdGl0bGU=");$GLOBALS["SAnQwEJbeMQSBEyiNTlI"]=base64_decode("aXNfdW5saW1pdGVk");$GLOBALS["aaVSngfyKHLQgxZvwrY"]=base64_decode("MA==");$GLOBALS["nluzFckVloVKJyWGkuiS"]=base64_decode("c2FtcGxlX2ZpbGVfc2F2ZQ==");$GLOBALS["lGlHEwGbhIVEVLthuqCP"]=base64_decode("b2xk");$GLOBALS["hIYefrboBPBVRqfrUmw"]=base64_decode("c2l6ZQ==");$GLOBALS["IgeWufVqStQvBURUeOvR"]=base64_decode("ZmlsZQ==");$GLOBALS["GZNfaiuTDWyOWRvdTnDo"]=base64_decode("ZmlsZV9zYXZl");$GLOBALS["TQtnowDWEDbeiKKtotZY"]=base64_decode("Y29yZS9maWxlX3N0b3JhZ2VfZGF0YWJhc2U=");$GLOBALS["hWXHGgJBIHbmgrFxSqZX"]=base64_decode("ZG93bmxvYWRhYmxlL2ZpbGU=");$GLOBALS["UBmkXYiwrwACKcKfPguC"]=base64_decode("c29ydF9vcmRlcg==");$GLOBALS["gsJJQezJkaZevUZXXLs"]=base64_decode("c2FtcGxlX3R5cGU=");$GLOBALS["dPxXduYHAishMYVfjByC"]=base64_decode("c2FtcGxlX3VybA==");$GLOBALS["cahfXvFyTPVIFcQbQxU"]=base64_decode("c2FtcGxlX2ZpbGU=");$GLOBALS["BmloHPYfpuUxpEuTiJNo"]=base64_decode("bGlua190eXBl");$GLOBALS["yHuclRMYErVvPyYRkBhn"]=base64_decode("bGlua191cmw=");$GLOBALS["GlVAokobPzwDfEzLwdwO"]=base64_decode("aXNfc2hhcmVhYmxl");$GLOBALS["uvIFLEsbRTCIgaZwtDFu"]=base64_decode("bnVtYmVyX29mX2Rvd25sb2Fkcw==");$GLOBALS["lolxpYUiVTTrcqQyKtQU"]=base64_decode("bGlua19pZA==");$GLOBALS["IBZwzuJgvBWZYidvxPtQ"]=base64_decode("ZGVwZW5kZW5jZV9vcHRpb25faWRz");$GLOBALS["tuzptJJzLjUFJIJkYTN"]=base64_decode("cHJpY2luZ19maW5hbF92YWx1ZQ==");$GLOBALS["FdrIKJCIoMwlmZMTFLo"]=base64_decode("cHJpY2luZ192YWx1ZQ==");$GLOBALS["kpCMtwBlpSyiuAFpcTmA"]=base64_decode("aXNfcGVyY2VudA==");$GLOBALS["iFclrXbTKczamEOdKSNA"]=base64_decode("dmFsdWVfaW5kZXg=");$GLOBALS["QVSnPctBGIGzARseHVld"]=base64_decode("cHJpY2Vz");$GLOBALS["IVjdyItUilCRPVCnbPBB"]=base64_decode("cHJvZHVjdF9hdHRyaWJ1dGU=");$GLOBALS["LQYVbietYctkkDHJGZYT"]=base64_decode("YWxsb3dfcHJvZHVjdHM=");$GLOBALS["DSeSHJEsnihSmpUJlWRO"]=base64_decode("MS43LjAuMA==");$GLOBALS["TFFbtozVGrGfGRaakZYw"]=base64_decode("b3B0aW9uX3ByaWNl");$GLOBALS["cluountjmNcscHKUGaic"]=base64_decode("b3B0aW9uX2lzX2RlZmF1bHQ=");$GLOBALS["uEvuUtPtRVYIYNniWPbN"]=base64_decode("b3B0aW9uX3Bvc2l0aW9u");$GLOBALS["JesVerfQqhrHTmftVWWj"]=base64_decode("b3B0aW9uX3NlbGVjdGlvbl9jYW5fY2hhbmdlX3F0eQ==");$GLOBALS["dBKvDEIZQqlqNjoPTplc"]=base64_decode("b3B0aW9uX3NlbGVjdGlvbl9xdHk=");$GLOBALS["WNObBJvjlfgbtytIZfTq"]=base64_decode("b3B0aW9uX3ZhbHVl");$GLOBALS["HiLSPmDnoqwXWMipsyQf"]=base64_decode("b3B0aW9uX3R5cGU=");$GLOBALS["NfjjcVEGrlZrcaNSlODH"]=base64_decode("cmVxdWlyZWQ=");$GLOBALS["JGjcZLisZunkjSUxakJn"]=base64_decode("b3B0aW9uX3RpdGxl");$GLOBALS["MyGfQYdQGWFabnAhbjGR"]=base64_decode("b3B0aW9uX2lk");$GLOBALS["NDZjCvhVEKmUrnolwYox"]=base64_decode("aW1hZ2Vfc2l6ZV95");$GLOBALS["TjqHEEtdniuZezRCoNxB"]=base64_decode("aW1hZ2Vfc2l6ZV94");$GLOBALS["HdsMZmAXnwxTUgEcyEVw"]=base64_decode("ZmlsZV9leHRlbnNpb24=");$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]=base64_decode("b3B0aW9ucw==");$GLOBALS["RjRORlDLDBZfcTOZRkUL"]=base64_decode("bWF4X2NoYXJhY3RlcnM=");$GLOBALS["GrGjpRfPcOWKkTICvloM"]=base64_decode("c2t1");$GLOBALS["FmcHoLewPGYTTNwZWyku"]=base64_decode("cHJpY2VfdHlwZQ==");$GLOBALS["sCiDKdRFsiTytRkEJzbl"]=base64_decode("c2FtcGxlcw==");$GLOBALS["XBztbCOeeqPdjzEQbNzr"]=base64_decode("bGlua3M=");$GLOBALS["jDtfrSslRHGhlqFhyNmP"]=base64_decode("ZG93bmxvYWRhYmxl");$GLOBALS["bDXkzXmuHOdlCsbKAeWE"]=base64_decode("dmlydHVhbA==");$GLOBALS["UhRiyzprNKfEuUnMlNCi"]=base64_decode("YnVuZGxl");$GLOBALS["sFONyDwGEFBiMOicFKhF"]=base64_decode("c2FtcGxlX2xpbmtz");$GLOBALS["qFGAeKdJqpooSeeytFgg"]=base64_decode("bGluaw==");$GLOBALS["GDuVUYWlnSTGmNPHfAzk"]=base64_decode("c3VwZXJfZ3JvdXA=");$GLOBALS["jtQELVpcAjeMCcOqGrNl"]=base64_decode("cHJvZHVjdF9zdXBlcl9hdHRyaWJ1dGVz");$GLOBALS["irCwZnlUmpzbYeDrQlmI"]=base64_decode("cHJvZHVjdF9vcHRpb25z");$GLOBALS["TNjUIwvUCKYoazJgtXiI"]=base64_decode("dmFsdWU=");$GLOBALS["FKJJSrcKfNlcouSwAAmL"]=base64_decode("dGl0bGU=");$GLOBALS["wvbqjiBRDXrNUyYsdenC"]=base64_decode("dGF4");$GLOBALS["gKmlFYFdaTKzVlRyhpVc"]=base64_decode("bWF4X3ByaWNl");$GLOBALS["PSacPJwJZRribZFCkecy"]=base64_decode("bWluX3ByaWNl");$GLOBALS["MTBLnfAjdfqwjJAmdyMn"]=base64_decode("d2VlZQ==");$GLOBALS["keNuMDRuqVbtNisoXiNN"]=base64_decode("Pj0=");$GLOBALS["zSTseaujPuZiOqYeRhMX"]=base64_decode("MS40LjIuMA==");$GLOBALS["zXCOxsQYPQXnbOHmBrBV"]=base64_decode("cmVjZW50bHlWaWV3ZWQ=");$GLOBALS["qcrjgZfRtvjCecarEwcK"]=base64_decode("bW9iaXNlcnZpY2VzMy9yZXZpZXc=");$GLOBALS["idumNZtnyCdKUNpoNPo"]=base64_decode("cmF0aW5nT3B0aW9ucw==");$GLOBALS["dZflgWRBqhDGhXArjEvY"]=base64_decode("cHJvZHVjdF9kZXRhaWxz");$GLOBALS["gWHzKFIlyRTLYLZstOE"]=base64_decode("Y2F0YWxvZy9zZXNzaW9u");$GLOBALS["sUkETZfXQGPZAnJuIIhu"]=base64_decode("Y2F0YWxvZ19jb250cm9sbGVyX3Byb2R1Y3Rfdmlldw==");$GLOBALS["LEkBfuIEeWYbfafjzUIK"]=base64_decode("YWRkUmVjZW50Vmlld3M=");$GLOBALS["CAOACLMUkrZqQKOxxqTw"]=base64_decode("cHJvZHVjdA==");$GLOBALS["jZvmiKqDcFkTpGNWdmCE"]=base64_decode("b2JqZWN0");$GLOBALS["yRaXKDNdHoIIrzRiXSKd"]=base64_decode("X3Byb2R1Y3RfZGV0YWls");$GLOBALS["rojWvnbZNAUBRjTQLXdg"]=base64_decode("Xw==");$GLOBALS["jzTjktRqpozAuxsUrvBB"]=base64_decode("YXZlcmFnZVJhdGluZw==");$GLOBALS["KELWTCpcJHrlqxpkgpdY"]=base64_decode("c3VtbWFyeQ==");$GLOBALS["TOeAMkZYbiIeTLssrRUI"]=base64_decode("Y291bnQ=");$GLOBALS["AifixoOKOxcKsjcSxsUU"]=base64_decode("cmV2aWV3L3Jldmlld19zdW1tYXJ5");$GLOBALS["HStcHLdiWhHgZNzNbBJU"]=base64_decode("b3JkZXJlZF9xdHk=");$GLOBALS["daWoxIretRloKFsopCtQ"]=base64_decode("bGVmdA==");$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]=base64_decode("c3RvcmVfaWQ=");$GLOBALS["wHuCLskeSjEusHwEtjg"]=base64_decode("ZW50aXR5X3R5cGU=");$GLOBALS["roNpHphPnBFPpTtlGjLl"]=base64_decode("ZW50aXR5X3BrX3ZhbHVlPWVudGl0eV9pZA==");$GLOBALS["NMdDXZnwEQVnVFxMBVw"]=base64_decode("cmF0aW5nX3N1bW1hcnk=");$GLOBALS["GOwlpKhEimCdSmkZMbNR"]=base64_decode("cmV2aWV3X2VudGl0eV9zdW1tYXJ5");$GLOBALS["glVDkgOCQKadaswLNmew"]=base64_decode("cmF0aW5nX3Njb3Jl");$GLOBALS["TxKKShAyajUHzxDEYMAz"]=base64_decode("ZGVzYw==");$GLOBALS["TadxZIBCwBlxKgJKpBc"]=base64_decode("YXNj");$GLOBALS["kZnTCBdSHDvtMTIgANFV"]=base64_decode("QVND");$GLOBALS["sEVWmFbTxTyXCAuzlzdI"]=base64_decode("cG9zaXRpb24=");$GLOBALS["ebKuPojsdYSIHbPwRrnc"]=base64_decode("ZmlsdGVy");$GLOBALS["dicenoLUGANefAAHDNPT"]=base64_decode("Kg==");$GLOBALS["IAcMpONuWJoxxDHgcmcR"]=base64_decode("Y2F0YWxvZy9jb25maWc=");$GLOBALS["VDAYqZkCFMOWhCEFQhAw"]=base64_decode("Y2F0ZWdvcnlfcHJvZHVjdHM=");$GLOBALS["btXEgEsRWVvaxWXJiPvu"]=base64_decode("ZGVmYXVsdF9zb3J0aW5n");$GLOBALS["bZtlcnesnciRpTfvnLxP"]=base64_decode("cHJvZHVjdGxpc3Q=");$GLOBALS["LUFBuTWUXZJywqDilIVo"]=base64_decode("bW9iaXNlcnZpY2VzMy9ob21l");$GLOBALS["ZhmRYLUkdrLEbBDHhOI"]=base64_decode("d2lkZ2V0cw==");$GLOBALS["gJjAThkuTqlirrdCgvYV"]=base64_decode("Y2F0ZWdvcnlJZA==");$GLOBALS["MbqyYZAMiOQYALAHsHWc"]=base64_decode("dW5kZWZpbmVk");$GLOBALS["BtblPJmhSNAmwHVVQnPp"]=base64_decode("Y2F0ZWdvcnlfd2lkZ2V0cw==");$GLOBALS["WaQhaIpRseVJVcAreurq"]=base64_decode("SU5ORVI=");$GLOBALS["DYUMoMnijxhhjLCLIbTZ"]=base64_decode("ZW50aXR5X2lkPWVudGl0eV9pZA==");$GLOBALS["zYawxQtlNyTGJyGXaSlz"]=base64_decode("Y2F0YWxvZ19wcm9kdWN0X2luZGV4X2Vhdg==");$GLOBALS["qFPQswwreCAKvtgSzRoV"]=base64_decode("X2lkeA==");$GLOBALS["ElmLYfTWwUJWcNdlNTFe"]=base64_decode("aW4=");$GLOBALS["LNJcPXllxExzrmvPuZCw"]=base64_decode("ZW50aXR5X2lk");$GLOBALS["zTSJOpKZANUYMjhPAOQB"]=base64_decode("Z3JvdXBlZA==");$GLOBALS["dJLWnUZqJJMnpFGrjgZA"]=base64_decode("c2ltcGxl");$GLOBALS["nuBRtgZupChyxvvqHfat"]=base64_decode("Zmluc2V0");$GLOBALS["DBJgVwYKYwjxrLzcQ"]=base64_decode("YXR0cmlidXRl");$GLOBALS["vWsgPOLZrWfzkmDCJcyA"]=base64_decode("dG8=");$GLOBALS["WHHHNWglORchfVdTbXpc"]=base64_decode("ZnJvbQ==");$GLOBALS["iniwehpYmjwvgAigCAVX"]=base64_decode("Y2F0YWxvZy9jYXRlZ29yeQ==");$GLOBALS["gmexsaQBKzADZJaDzcAc"]=base64_decode("c3ViY2F0ZWdvcmllcw==");$GLOBALS["IUyxwiSnFvUOuLSFxbJQ"]=base64_decode("dG9rZW4=");$GLOBALS["oqTLpquYVEJTMyjXAtSP"]=base64_decode("ZmlsdGVycw==");$GLOBALS["RBJbMQCDHxABfRSjHxyJ"]=base64_decode("cHJvZHVjdF9jb3VudA==");$GLOBALS["BqyYELduncgqBkajIVvH"]=base64_decode("cHJvZHVjdHM=");$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]=base64_decode("bWVzc2FnZQ==");$GLOBALS["XIfiBFkMiAUaTlyVRhKD"]=base64_decode("bW9iaXNlcnZpY2VzMy9wcm9kdWN0");$GLOBALS["npjYrUmxXsOjHVoIGfVv"]=base64_decode("cHJvZHVjdF9pbWFnZV91cmw=");$GLOBALS["HawEIVEiOqiDeevdmURq"]=base64_decode("c21hbGxfaW1hZ2U=");$GLOBALS["HMLEjevbAxwUXjoezhd"]=base64_decode("Y2F0YWxvZy9pbWFnZQ==");$GLOBALS["QtXGAQQggTtyJvIWmFWm"]=base64_decode("cHJvZHVjdF9zbWFsbF9pbWFnZV91cmw=");$GLOBALS["rxVRfDIGAUAOANLeBlcD"]=base64_decode("cmV2aWV3X3N1bW1hcnk=");$GLOBALS["mtniJtSfBUifnYAdTgNC"]=base64_decode("c3RvY2tfc3RhdHVz");$GLOBALS["FtaoUjQYZIwYCvcntNjy"]=base64_decode("c3BlY2lhbF9wcmljZQ==");$GLOBALS["dDLcNQVZtFgvFlulgMvG"]=base64_decode("bW9iaXNlcnZpY2VzMy9tb2JpY29tbWVyY2U=");$GLOBALS["IXCfKzsjlitrRiMXFvE"]=base64_decode("cHJpY2U=");$GLOBALS["kqpjokinrNKzMlmecrBs"]=base64_decode("dHlwZQ==");$GLOBALS["BoWuBfavKqJxeLgCuLA"]=base64_decode("bmFtZQ==");$GLOBALS["ksmBVCTZnuQUbdBtBigo"]=base64_decode("cHJvZHVjdF9pZA==");$GLOBALS["jPjhbjCsvvgnWDJjHBgf"]=base64_decode("Y2F0YWxvZ2ludmVudG9yeS9zdG9ja19pdGVt");$GLOBALS["LzCIQYmHzPJcWsavcvwU"]=base64_decode("bGltaXQ=");$GLOBALS["ubIOsSVcjuGfmsSTDis"]=base64_decode("cGFnZQ==");$GLOBALS["HyoWHiaULyiuurcyZeYC"]=base64_decode("c29ydA==");$GLOBALS["MOtTUmnXwRzNNWKdkc"]=base64_decode("NA==");$GLOBALS["IRllJVACrdFgLeZLBXsV"]=base64_decode("dmlzaWJpbGl0eQ==");$GLOBALS["SHlRCNLzGtCGyHhhetLl"]=base64_decode("MQ==");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["MpsYVCDNnrKaRVYsEGNU"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0");$GLOBALS["nDEJLLgmYTqibpsduIYl"]=base64_decode("Y2F0ZWdvcmllcw==");$GLOBALS["VtyabxBAjoNAXBjDoqxy"]=base64_decode("ZGF0YQ==");$GLOBALS["PiAcIEATXlQdiYGIyCLU"]=base64_decode("Y2F0ZWdvcnlfaWQ=");$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]=base64_decode("YXBwY29kZQ==");$GLOBALS["sxVALmpUOyAaYsrTXikR"]=base64_decode("Y2F0ZWdvcnk=");$GLOBALS["wevDtCIIgCyGFOaRFnvt"]=base64_decode("bW9iaXNlcnZpY2VzMy9jYWNoZQ==");$GLOBALS["pSUufetENUNzhabtUOWJ"]=base64_decode("Y2F0YWxvZ3NlYXJjaC9sYXllcg==");$GLOBALS["IqOITdVwpKrSQIVuNGAo"]=base64_decode("Z2V0RW5naW5l");$GLOBALS["tugkmwKQmrdyfghQnRJj"]=base64_decode("");$GLOBALS["iKLyShFQlpjmJpFfaoec"]=base64_decode("IA==");$GLOBALS["YeljdOfpUMqQXDdWZvAZ"]=base64_decode("JTIw");$GLOBALS["iSWXuUQwLhxHsgugbtIM"]=base64_decode("Y2F0YWxvZ3NlYXJjaA==");$GLOBALS["EuHxvRhklQEZsNJgXMCv"]=base64_decode("cQ==");$GLOBALS["UGyyVQdyoNiVbNKZtzXF"]=base64_decode("bW9iaXNlcnZpY2VzMy91c2Vy");$GLOBALS["AtEfFxOGkhyngBAXUXI"]=base64_decode("bW9iaXNlcnZpY2VzMy9jb25uZWN0b3I=");$GLOBALS["smmCxYfoUQdvUdmSLJFg"]=base64_decode("Y2F0YWxvZ3NlYXJjaC9sYXllcg==");$GLOBALS["oRfwPLJPqKqdZnWJsJUp"]=base64_decode("Y2F0YWxvZy9sYXllcg==");$GLOBALS["TkTImXpgWecqAfMQVEHf"]=base64_decode("ZGF0YQ==");$GLOBALS["SnsSSwMKZSYeMFnEirnh"]=base64_decode("");$GLOBALS["OfJAVntGDwQlnwXDRQyi"]=base64_decode("bWVzc2FnZQ==");$GLOBALS["sbIrrlApbYPuKhCTpTXD"]=base64_decode("cHJvZHVjdF9zbWFsbF9pbWFnZV91cmw=");$GLOBALS["bFUTAqREbuOzHMQRKIWl"]=base64_decode("cHJvZHVjdF90aHVtYm5haWxfdXJs");$GLOBALS["vRMUkMIcVLwxzdfpZljz"]=base64_decode("c3RhdHVz");$GLOBALS["rodMYFbAfpFIFmvHZwUC"]=base64_decode("c3RvY2tfc3RhdHVz");$GLOBALS["XckkIahjVOedVNldUNrH"]=base64_decode("bmFtZQ==");$GLOBALS["VPIaNjFLhqCsZpTGsUgI"]=base64_decode("c3BlY2lhbF9wcmljZQ==");$GLOBALS["ugBTpBacrBJBoWYmrL"]=base64_decode("bWF4X3ByaWNl");$GLOBALS["tjuFoXJXONdFKYMfrhEm"]=base64_decode("bWluX3ByaWNl");$GLOBALS["hpFfomJiyiKtyjLABY"]=base64_decode("ZmluYWxfcHJpY2U=");$GLOBALS["QRlkbSxwznPvVurFDqFi"]=base64_decode("c2t1");$GLOBALS["rjrpXgDiuYDjFnWbBAmG"]=base64_decode("dHlwZQ==");$GLOBALS["VvNzCxloyDAwNYmAMEHy"]=base64_decode("Y2F0YWxvZy9jYXRlZ29yeS9jYWNoZS9jYXRfcmVzaXplZC8=");$GLOBALS["JLoaXXiaeSTyIBhbzrwb"]=base64_decode("Y2F0X3Jlc2l6ZWQ=");$GLOBALS["PwznFxDJJnFbUJcVMooa"]=base64_decode("Y2FjaGU=");$GLOBALS["YwBGfBWczmQWyyxmTlYr"]=base64_decode("Y2F0ZWdvcnk=");$GLOBALS["lmawavrwJSLMdxPCwRkE"]=base64_decode("Y2F0YWxvZw==");$GLOBALS["JsPuQXopAGHsqRwURiUS"]=base64_decode("Lw==");$GLOBALS["HgqgZqjyYAcgZIziegI"]=base64_decode("ZW50aXR5X2lk");$GLOBALS["dZNQnorhARFoPvueHHwe"]=base64_decode("Y2F0YWxvZy9jb25maWc=");$GLOBALS["TYpoosDhUeHYpShjQrjY"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0");$GLOBALS["VzlXpDYQwtySTyLctKVI"]=base64_decode("cHJvZHVjdF9pZA==");$GLOBALS["uRksYckIsLnTlqVQYuDv"]=base64_decode("bmV3ZXN0");$GLOBALS["JQPsrpNlQDJyOHjBcJiq"]=base64_decode("bmFtZS16LWE=");$GLOBALS["qIoNxfvcrBCFQMSciZu"]=base64_decode("bmFtZS1hLXo=");$GLOBALS["IrPupiOgqnXRiBxvUjgS"]=base64_decode("cmF0aW5nLWgtbA==");$GLOBALS["sWSvosvbUTBAvWfnMBOd"]=base64_decode("cHJpY2UtaC1s");$GLOBALS["UGgrymukEGoXYYSyIiBj"]=base64_decode("cHJpY2UtbC1o");$GLOBALS["QwAfmGtJdGdXECGiKVJk"]=base64_decode("cG9zaXRpb24=");$GLOBALS["iKiNaNiCQphLZYsByYlV"]=base64_decode("Y2F0YWxvZy9jYXRlZ29yeQ==");$GLOBALS["CGbFgRIFcNnyLvvmfknU"]=base64_decode("Jw==");$GLOBALS["bKhhsNPJGriwYGwfQOyo"]=base64_decode("JyBBTkQge3t0YWJsZX19LnZhbHVlID0gJw==");$GLOBALS["YqDVShiPuFceQHOvdevx"]=base64_decode("e3t0YWJsZX19LnN0b3JlX2lkPSc=");$GLOBALS["SHZELTscVQrrwixhgxol"]=base64_decode("LQ==");$GLOBALS["VrIktHzGpoHbbHMGmvhk"]=base64_decode("cHJpY2U=");
?><?php

class Mobicommerce_Mobiservices3_Model_3x0x0_Catalog_Catalog extends Mobicommerce_Mobiservices3_Model_Abstract {

	public function __construct()
	{
		parent::__construct();
		Mage::getModel(Mage::getBlockSingleton($GLOBALS["AtEfFxOGkhyngBAXUXI"])->_getConnectorModel($GLOBALS["UGyyVQdyoNiVbNKZtzXF"]))->autoLoginMobileUser();
	}

	public function search($data) 
	{
		$keyword = $data[$GLOBALS["EuHxvRhklQEZsNJgXMCv"]];
		$_helper = Mage::helper($GLOBALS["iSWXuUQwLhxHsgugbtIM"]);
		$queryParam = str_replace($GLOBALS["YeljdOfpUMqQXDdWZvAZ"], $GLOBALS["iKLyShFQlpjmJpFfaoec"], $keyword);
		Mage::app()->getRequest()->setParam($_helper->getQueryParamName(), $queryParam);
		
		$query = $_helper->getQuery();
		$query->setStoreId(Mage::app()->getStore()->getId());
		if ($query->getQueryText() != $GLOBALS["tugkmwKQmrdyfghQnRJj"]) {
		    $check = false;
		    if (Mage::helper($GLOBALS["iSWXuUQwLhxHsgugbtIM"])->isMinQueryLength()) {
			$query->setId(0)
				->setIsActive(1)
				->setIsProcessed(1);
		    } else {
				if ($query->getId()) {
				    $query->setPopularity($query->getPopularity() + 1);
				} else {
				    $query->setPopularity(1);
				}

				if ($query->getRedirect()) {
				    $query->save();
				    $check = true;
				} else {
				    $query->prepare();
				}
		    }
		    if ($check == FALSE) {
				Mage::helper($GLOBALS["iSWXuUQwLhxHsgugbtIM"])->checkNotes();
				if (!Mage::helper($GLOBALS["iSWXuUQwLhxHsgugbtIM"])->isMinQueryLength()) {
				    $query->save();
				}
		    }		    
		} else {
		    return $this->statusError();
		}
		if (method_exists($_helper, $GLOBALS["IqOITdVwpKrSQIVuNGAo"])) {
		    $engine = Mage::helper($GLOBALS["iSWXuUQwLhxHsgugbtIM"])->getEngine();
		    if ($engine instanceof Varien_Object) {
				$isLayeredNavigationAllowed = $engine->isLeyeredNavigationAllowed();
		    } else {
				$isLayeredNavigationAllowed = true;
		    }
		} else {
		    $isLayeredNavigationAllowed = true;
		}
		$layer = Mage::getSingleton($GLOBALS["pSUufetENUNzhabtUOWJ"]);
		$collection = $layer->getProductCollection();
		return $collection;
	}

	public function getCategories($data)
	{
	    $info = $this->successStatus();
	    $categories = Mage::helper($GLOBALS["wevDtCIIgCyGFOaRFnvt"])->getCacheData($GLOBALS["sxVALmpUOyAaYsrTXikR"], $data[$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]]);
	    $categories = $this->getNlevelCateories($categories, $data[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]]);
	    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["nDEJLLgmYTqibpsduIYl"]] = $categories;
	    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["PiAcIEATXlQdiYGIyCLU"]] = $data[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]];
	    return $info;
	}

	public function productList($data)
	{
		$storeId = $this->_getStoreId();
		if(isset($data[$GLOBALS["EuHxvRhklQEZsNJgXMCv"]]) && $data[$GLOBALS["EuHxvRhklQEZsNJgXMCv"]] != $GLOBALS["tugkmwKQmrdyfghQnRJj"]){
			$GNueIxcckpOucEcfNBZY = $this->search($data);
		}
		else{
			$GNueIxcckpOucEcfNBZY = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])
				->getCollection()
                ->addAttributeToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"])
				->addAttributeToFilter($GLOBALS["IRllJVACrdFgLeZLBXsV"], $GLOBALS["MOtTUmnXwRzNNWKdkc"])
				->setStoreId($storeId)
				->addMinimalPrice()
				->addFinalPrice();
		}

		if(isset($data[$GLOBALS["HyoWHiaULyiuurcyZeYC"]])){
			$GNueIxcckpOucEcfNBZY = $this->_sortProductCollection($data[$GLOBALS["HyoWHiaULyiuurcyZeYC"]], $GNueIxcckpOucEcfNBZY);
		}

		$GNueIxcckpOucEcfNBZY = $this->_applyFilter($data, $GNueIxcckpOucEcfNBZY);

		$page = 1;
	    $limit = 20;
	    if(isset($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]]) && !empty($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]])) $page = $data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]];
		if(isset($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]]) && !empty($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]])) $limit = $data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]];

		$UyDjvfpvRPtWkDlyXEUU = $GNueIxcckpOucEcfNBZY->getSize();
		$GNueIxcckpOucEcfNBZY->getSelect()->limit($limit, ($page - 1) * $limit);

        $products = array();
		if($GNueIxcckpOucEcfNBZY->getSize() > 0){
            foreach($GNueIxcckpOucEcfNBZY as $_collection){

            	$JmEoGThvHzDPGHE = Mage::getModel($GLOBALS["jPjhbjCsvvgnWDJjHBgf"])->loadByProduct($_collection);
            	$stock = true;
                if (!$_collection->isSaleable()) $stock = false;
                if(!$JmEoGThvHzDPGHE->getQty()) $stock = false;

                $_product = array(
					'product_id'              => $_collection->getId(),
					'name'                    => $_collection->getName(),
					'type'                    => $_collection->getTypeId(),
					'price'                   => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($_collection->getPrice()),
					$GLOBALS["FtaoUjQYZIwYCvcntNjy"]           => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($_collection->getFinalPrice()),
					$GLOBALS["mtniJtSfBUifnYAdTgNC"]            => $stock,
					$GLOBALS["rxVRfDIGAUAOANLeBlcD"]          => $this->getReviewSummary($_collection->getId(), $store),
					$GLOBALS["QtXGAQQggTtyJvIWmFWm"] => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($_collection, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString(),
					$GLOBALS["npjYrUmxXsOjHVoIGfVv"]       => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($_collection, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString()
                    );

                $prices = $this->_productPrices($_collection);
			    if ($prices) {
					$_product = array_merge($_product, $prices);
			    }
			    Mage::helper($GLOBALS["XIfiBFkMiAUaTlyVRhKD"])->addDiscount($_product);
			    Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->addImageRatio($_product);
                $products[] = $_product;
            }
        }
		
		$info = $this->successStatus();
		$info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = NULL;
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["BqyYELduncgqBkajIVvH"]] = $products;
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["RBJbMQCDHxABfRSjHxyJ"]] = $UyDjvfpvRPtWkDlyXEUU;
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["oqTLpquYVEJTMyjXAtSP"]] = $this->_getFilters();
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IUyxwiSnFvUOuLSFxbJQ"]] = $data[$GLOBALS["IUyxwiSnFvUOuLSFxbJQ"]];

		return $info;
    }

    public function _applyFilter($data, $GNueIxcckpOucEcfNBZY)
    {
    	$storeId = Mage::app()->getStore()->getId();
    	$filters = array();
    	if(isset($data['filters']) && !empty($data[$GLOBALS["oqTLpquYVEJTMyjXAtSP"]])) {
    		parse_str($data[$GLOBALS["oqTLpquYVEJTMyjXAtSP"]], $filters);
    	}
    	
		if(!empty($filters)):
			foreach($filters as $key => $value){
				if($key == $GLOBALS["gmexsaQBKzADZJaDzcAc"]){
					$GNueIxcckpOucEcfNBZY->addCategoryFilter(Mage::getModel($GLOBALS["iniwehpYmjwvgAigCAVX"])->load($value),true);
				}
				else if(is_array($value)){
					if($key == $GLOBALS["VrIktHzGpoHbbHMGmvhk"]){
						foreach($value as $option){
							$option = explode($GLOBALS["SHZELTscVQrrwixhgxol"],$option);
							
							if($option[0] == $GLOBALS["tugkmwKQmrdyfghQnRJj"]) $option[0] = 0;
							if($option[1] == $GLOBALS["tugkmwKQmrdyfghQnRJj"]) $option[1] = 100000000;
							$GNueIxcckpOucEcfNBZY->addAttributeToFilter($key, array('from' => $option[0], 'to' => $option[1]));
						}
					}
					else{
						$optionArray = array();
						foreach($value as $option){
							$optionArray[] = array('attribute' => $key, 'finset' => $option);
						}
						
						$GNueIxcckpOucEcfNBZY->addAttributeToFilter($optionArray);
					}
				}
				else{
					if($key == $GLOBALS["VrIktHzGpoHbbHMGmvhk"]){
						$option = explode($GLOBALS["SHZELTscVQrrwixhgxol"],$value);
						if($option[0] == $GLOBALS["tugkmwKQmrdyfghQnRJj"]) $option[0] = 0;
						if($option[1] == $GLOBALS["tugkmwKQmrdyfghQnRJj"]) $option[1] = 100000000;
						$GNueIxcckpOucEcfNBZY->addAttributeToFilter($key, array('from' => $option[0], 'to' => $option[1]));
						$RehHIauVckdjNRZlnLUi = array();
						foreach($GNueIxcckpOucEcfNBZY as $_collection){
							if($_collection->getTypeId() == $GLOBALS["dJLWnUZqJJMnpFGrjgZA"]) {
				                $price = $_collection->getFinalPrice();
				                if($price >= $option[0] && $price <= $option[1]){
				                    $RehHIauVckdjNRZlnLUi[] = $_collection->getId();
				                }
				                else{
				                	$GNueIxcckpOucEcfNBZY->removeItemByKey($_collection->getId());
				                }
				            }
				            elseif($_collection->getTypeId() == $GLOBALS["zTSJOpKZANUYMjhPAOQB"]){
				            	$mFNBPDWBtmLIRKTprhfo = Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($_collection->getMinimalPrice());
				                if($mFNBPDWBtmLIRKTprhfo >= $option[0] && $mFNBPDWBtmLIRKTprhfo <= $option[1] ){
				                	$RehHIauVckdjNRZlnLUi[] = $_collection->getId();
				                }
				                else{
				                	$GNueIxcckpOucEcfNBZY->removeItemByKey($_collection->getId());
				                }
				            }
				            else{
				            	$RehHIauVckdjNRZlnLUi[] = $_collection->getId();
				            }
						}
						$RehHIauVckdjNRZlnLUi = array_unique($RehHIauVckdjNRZlnLUi);
						$GNueIxcckpOucEcfNBZY->addAttributeToFilter($GLOBALS["LNJcPXllxExzrmvPuZCw"], array('in' => $RehHIauVckdjNRZlnLUi));
					}
					else{
						$value = (int)$value;
						
						$prefix = Mage::getConfig()->getTablePrefix();
						$GNueIxcckpOucEcfNBZY->joinField($key.$GLOBALS["qFPQswwreCAKvtgSzRoV"],
							$prefix.$GLOBALS["zYawxQtlNyTGJyGXaSlz"],
							null,
							$GLOBALS["DYUMoMnijxhhjLCLIbTZ"],
							$GLOBALS["YqDVShiPuFceQHOvdevx"].$storeId.$GLOBALS["bKhhsNPJGriwYGwfQOyo"].$value.$GLOBALS["CGbFgRIFcNnyLvvmfknU"],
							$GLOBALS["WaQhaIpRseVJVcAreurq"]);
					}
				}
			}
		endif;

		
		return $GNueIxcckpOucEcfNBZY;
    }

    public function getCategoryWidgets($data)
    {
    	$storeId = Mage::app()->getStore()->getId();
    	$info = $this->successStatus();
		$widgets = Mage::helper($GLOBALS["wevDtCIIgCyGFOaRFnvt"])->getCacheData($GLOBALS["BtblPJmhSNAmwHVVQnPp"], $GLOBALS["MbqyYZAMiOQYALAHsHWc"], array('categoryId' => $data['category_id']));
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["ZhmRYLUkdrLEbBDHhOI"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["AtEfFxOGkhyngBAXUXI"])->_getConnectorModel($GLOBALS["LUFBuTWUXZJywqDilIVo"]))->_arrangeWidgetData($widgets);
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["PiAcIEATXlQdiYGIyCLU"]] = $data[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]];
		return $info;
    }

    public function categoryProductList($data)
    {
    	$storeId = Mage::app()->getStore()->getId();
    	$IrQhSPeqdQofJwHMMpJR = true;
    	$categoryId = $data[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]];
    	$urkVPIVohXQURHwTCRbs = $data[$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]];

    	$MdBguppwurQYrvpxnwGo = Mage::helper($GLOBALS["wevDtCIIgCyGFOaRFnvt"])->_getAdvanceSettings($urkVPIVohXQURHwTCRbs);

    	$JLKPNipYYXVGRxMQPpNX = null;
    	if(isset($MdBguppwurQYrvpxnwGo[$GLOBALS["bZtlcnesnciRpTfvnLxP"]][$GLOBALS["btXEgEsRWVvaxWXJiPvu"]]) && !empty($MdBguppwurQYrvpxnwGo[$GLOBALS["bZtlcnesnciRpTfvnLxP"]][$GLOBALS["btXEgEsRWVvaxWXJiPvu"]])){
    		$JLKPNipYYXVGRxMQPpNX = $MdBguppwurQYrvpxnwGo[$GLOBALS["bZtlcnesnciRpTfvnLxP"]][$GLOBALS["btXEgEsRWVvaxWXJiPvu"]];
    	}
    	$sort = isset($data[$GLOBALS["HyoWHiaULyiuurcyZeYC"]]) ? $data[$GLOBALS["HyoWHiaULyiuurcyZeYC"]] : null;
    	if(!empty($sort) && $sort != $JLKPNipYYXVGRxMQPpNX)
    		$IrQhSPeqdQofJwHMMpJR = false;

    	$page = 1;
	    $limit = 20;
	    if(isset($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]]) && !empty($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]])) $page = $data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]];
		if(isset($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]]) && !empty($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]])) $limit = $data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]];

		if($page > 1){
			$IrQhSPeqdQofJwHMMpJR = false;
		}

		if(!empty($data[$GLOBALS["oqTLpquYVEJTMyjXAtSP"]])) {
			$IrQhSPeqdQofJwHMMpJR = false;
		}

		if($IrQhSPeqdQofJwHMMpJR){
			$params = array('categoryId' => $categoryId, 'limit' => $limit);
			$SVckKnkXpRsLDBqZMYiE = Mage::helper($GLOBALS["wevDtCIIgCyGFOaRFnvt"])->getCacheData($GLOBALS["VDAYqZkCFMOWhCEFQhAw"], $urkVPIVohXQURHwTCRbs, $params);
		}
		else{
			$category = Mage::getModel($GLOBALS["iKiNaNiCQphLZYsByYlV"])->load($categoryId);
	        $GNueIxcckpOucEcfNBZY = $category->getProductCollection();
	        $GNueIxcckpOucEcfNBZY->addAttributeToSelect(Mage::getSingleton($GLOBALS["IAcMpONuWJoxxDHgcmcR"])->getProductAttributes())
	        	->addAttributeToSelect($GLOBALS["dicenoLUGANefAAHDNPT"])
	            ->addAttributeToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"])
	            ->addAttributeToFilter($GLOBALS["IRllJVACrdFgLeZLBXsV"], $GLOBALS["MOtTUmnXwRzNNWKdkc"])
	            ->setStoreId($storeId)
	            ->addMinimalPrice()
	            ->addFinalPrice();

	        if(empty($sort))
	        	$sort = $JLKPNipYYXVGRxMQPpNX;

	        $GNueIxcckpOucEcfNBZY = $this->_sortProductCollection($sort, $GNueIxcckpOucEcfNBZY);

	        $GNueIxcckpOucEcfNBZY = $this->_applyFilter($data, $GNueIxcckpOucEcfNBZY);

	        $KzcOufMDFgKYOmLvGLls = $GNueIxcckpOucEcfNBZY->getSize();
	        
	        $GNueIxcckpOucEcfNBZY->getSelect()->limit($limit, ($page - 1) * $limit);
	        
	        $products = array();
			if($GNueIxcckpOucEcfNBZY->getSize() > 0){
	            foreach($GNueIxcckpOucEcfNBZY as $_collection){

	            	$product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->setStoreId($store)->load($_collection->getId());
                    $JmEoGThvHzDPGHE = Mage::getModel($GLOBALS["jPjhbjCsvvgnWDJjHBgf"])->loadByProduct($product);

                    $stock = true;
	                if (!$product->isSaleable()) $stock = false;
	                if(!$JmEoGThvHzDPGHE->getQty()) $stock = false;

	                $_product = array(
						'product_id'              => $_collection->getId(),
						'name'                    => $_collection->getName(),
						'type'                    => $_collection->getTypeId(),
						'price'                   => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($_collection->getPrice()),
						$GLOBALS["FtaoUjQYZIwYCvcntNjy"]           => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($_collection->getFinalPrice()),
						$GLOBALS["mtniJtSfBUifnYAdTgNC"]            => $stock,
						$GLOBALS["rxVRfDIGAUAOANLeBlcD"]          => $this->getReviewSummary($_collection->getId(), $store),
						$GLOBALS["QtXGAQQggTtyJvIWmFWm"] => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($_collection, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString(),
						$GLOBALS["npjYrUmxXsOjHVoIGfVv"]       => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($_collection, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString(),
	                    );

	                $prices = $this->_productPrices($_collection);
				    if ($prices) {
						$_product = array_merge($_product, $prices);
				    }

				    Mage::helper($GLOBALS["XIfiBFkMiAUaTlyVRhKD"])->addDiscount($_product);
				    Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->addImageRatio($_product);
	                $products[] = $_product;
	            }
	        }

	        $SVckKnkXpRsLDBqZMYiE = array(
	        	'products' => $products
	        	);
		}

		$info = $this->successStatus();
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["BqyYELduncgqBkajIVvH"]] = $SVckKnkXpRsLDBqZMYiE[$GLOBALS["BqyYELduncgqBkajIVvH"]];
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["oqTLpquYVEJTMyjXAtSP"]] = isset($SVckKnkXpRsLDBqZMYiE[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]]) ? $SVckKnkXpRsLDBqZMYiE[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]] : $this->_getFilters($categoryId);
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["RBJbMQCDHxABfRSjHxyJ"]] = isset($SVckKnkXpRsLDBqZMYiE[$GLOBALS["RBJbMQCDHxABfRSjHxyJ"]]) ? $SVckKnkXpRsLDBqZMYiE[$GLOBALS["RBJbMQCDHxABfRSjHxyJ"]] : $KzcOufMDFgKYOmLvGLls;

		
		
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["PiAcIEATXlQdiYGIyCLU"]] = $categoryId;
		$info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IUyxwiSnFvUOuLSFxbJQ"]] = $data[$GLOBALS["IUyxwiSnFvUOuLSFxbJQ"]];
		
		return $info;
    }

    protected function _sortProductCollection($sort, $GNueIxcckpOucEcfNBZY)
    {
    	switch ($sort) {
            case $GLOBALS["QwAfmGtJdGdXECGiKVJk"]:
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["sEVWmFbTxTyXCAuzlzdI"], $GLOBALS["kZnTCBdSHDvtMTIgANFV"]);
                break;
            case $GLOBALS["UGgrymukEGoXYYSyIiBj"]: 
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["IXCfKzsjlitrRiMXFvE"], $GLOBALS["TadxZIBCwBlxKgJKpBc"]);
                break;
            case $GLOBALS["sWSvosvbUTBAvWfnMBOd"]:
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["IXCfKzsjlitrRiMXFvE"], $GLOBALS["TxKKShAyajUHzxDEYMAz"]);
                break;
            case $GLOBALS["IrPupiOgqnXRiBxvUjgS"]:
                $GNueIxcckpOucEcfNBZY->joinField($GLOBALS["glVDkgOCQKadaswLNmew"], 
                       $GLOBALS["GOwlpKhEimCdSmkZMbNR"], 
                       $GLOBALS["NMdDXZnwEQVnVFxMBVw"], 
                       $GLOBALS["roNpHphPnBFPpTtlGjLl"], 
                       array('entity_type'=>1, 'store_id'=> Mage::app()->getStore()->getId()),
                       $GLOBALS["daWoxIretRloKFsopCtQ"]
                );
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["glVDkgOCQKadaswLNmew"], $GLOBALS["TxKKShAyajUHzxDEYMAz"]);
                break;
            case $GLOBALS["qIoNxfvcrBCFQMSciZu"]:
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["BoWuBfavKqJxeLgCuLA"], $GLOBALS["TadxZIBCwBlxKgJKpBc"]);
                break;
            case $GLOBALS["JQPsrpNlQDJyOHjBcJiq"]:
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["BoWuBfavKqJxeLgCuLA"], $GLOBALS["TxKKShAyajUHzxDEYMAz"]);
                break;
            case $GLOBALS["uRksYckIsLnTlqVQYuDv"]:
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["LNJcPXllxExzrmvPuZCw"], $GLOBALS["TxKKShAyajUHzxDEYMAz"]);
                break;
            default: 
                $GNueIxcckpOucEcfNBZY->setOrder($GLOBALS["HStcHLdiWhHgZNzNbBJU"], $GLOBALS["TadxZIBCwBlxKgJKpBc"]);
                break;
        }
        return $GNueIxcckpOucEcfNBZY;
    }

    public function getReviewSummary($vryRWOSAuUlWWHqCFzmZ, $store = null)
    {
    	if(empty($store)){
    		$store = Mage::app()->getStore()->getId();
    	}

    	$summaryData = Mage::getModel($GLOBALS["AifixoOKOxcKsjcSxsUU"])
            ->setStoreId($store)
            ->load($vryRWOSAuUlWWHqCFzmZ);

        $summary = $summaryData->getRatingSummary();
        $snIrEtsgLHodMjoIhykY = round($summary * 0.05, 1);
        $data = array(
			'count'         => $summaryData->getReviewsCount(),
			'summary'       => $summary, 
			'averageRating' => $snIrEtsgLHodMjoIhykY 
        	);
        return $data;
    }

    public function productInfo($data)
    {
    	$productId = $data[$GLOBALS["ksmBVCTZnuQUbdBtBigo"]];
    	$storeId = Mage::app()->getStore()->getId();

    	$productData = Mage::helper($GLOBALS["wevDtCIIgCyGFOaRFnvt"])->getProductCache($productId, $storeId);

        if (!empty($productData)){
        	$product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->setStoreId($storeId)->load($productId);
	
			$pZjMNQjsiqvhJyzWSssH = Mage::app()->getFrontController()->getRequest();
			$tTXOxtgyeIgZevbLYuSP = $pZjMNQjsiqvhJyzWSssH->getRequestedRouteName() . $GLOBALS["rojWvnbZNAUBRjTQLXdg"] .
	    	    $pZjMNQjsiqvhJyzWSssH->getRequestedControllerName() . $GLOBALS["rojWvnbZNAUBRjTQLXdg"] .
	        	$pZjMNQjsiqvhJyzWSssH->getRequestedActionName();
			$PFDBlNsvmGunhaRzErIA= $tTXOxtgyeIgZevbLYuSP. $GLOBALS["yRaXKDNdHoIIrzRiXSKd"];
			$VIkIPlyfSKOwyqBlBfhw = array(
				'object'  => $this,
				'product' => $product
				);
			Mage::dispatchEvent($PFDBlNsvmGunhaRzErIA, $VIkIPlyfSKOwyqBlBfhw);

        	if(isset($data[$GLOBALS["LEkBfuIEeWYbfafjzUIK"]]) && $data[$GLOBALS["LEkBfuIEeWYbfafjzUIK"]] == $GLOBALS["SHlRCNLzGtCGyHhhetLl"]){
        		Mage::dispatchEvent($GLOBALS["sUkETZfXQGPZAnJuIIhu"], array('product' => $product));
        		Mage::getSingleton($GLOBALS["gWHzKFIlyRTLYLZstOE"])->setLastViewedProductId($product->getId());
        	}
            $information = $this->successStatus();
            $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["dZflgWRBqhDGhXArjEvY"]] = $productData;
            $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["dZflgWRBqhDGhXArjEvY"]][$GLOBALS["idumNZtnyCdKUNpoNPo"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["AtEfFxOGkhyngBAXUXI"])->_getConnectorModel($GLOBALS["qcrjgZfRtvjCecarEwcK"]))->_getRatingOptions(array(
				$GLOBALS["VzlXpDYQwtySTyLctKVI"] => $productId,
				));
            if(isset($data[$GLOBALS["LEkBfuIEeWYbfafjzUIK"]]) && $data[$GLOBALS["LEkBfuIEeWYbfafjzUIK"]] == $GLOBALS["SHlRCNLzGtCGyHhhetLl"]){
            	$information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zXCOxsQYPQXnbOHmBrBV"]] = $this->getRecentlyViewedProducts();
            }
        }else{
            $information = $this->errorStatus();
        }
        return $information;
    }

    public function _productPrices($product)
    {
        $prices = array();
        $type = $product->getTypeId();
        switch ($type) {          
            case Mage_Catalog_Model_Product_Type::TYPE_BUNDLE :
                $productPrice = $product->getPriceModel();
                if (version_compare(Mage::getVersion(), $GLOBALS["zSTseaujPuZiOqYeRhMX"], $GLOBALS["keNuMDRuqVbtNisoXiNN"]) === true) {
                    list($vDJFLmITADqpeEfYipbP, $UbNvewUjKhlwappeFAlo) = $productPrice->getTotalPrices($product, null, null, false);
                }else{
                    list($vDJFLmITADqpeEfYipbP, $UbNvewUjKhlwappeFAlo) = $productPrice->getPrices($product, null, null, false);
                }
               
                if ($product->getPriceType() == 1) {
                    $QRaauonZCAPdNwZSxjvd = Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->getAmount($product);
                    $QgMniKQwMwPpKLuLQbPy = $QRaauonZCAPdNwZSxjvd;
                    if (Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->isTaxable()) {
                        $_attributes = Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->getProductWeeeAttributesForRenderer($product, null, null, null, true);
                        $QgMniKQwMwPpKLuLQbPy = Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->getAmountInclTaxes($_attributes);
                    }
                    if ($QRaauonZCAPdNwZSxjvd && Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->typeOfDisplay($product, array(0, 1, 4))) {
                        $vDJFLmITADqpeEfYipbP += $QRaauonZCAPdNwZSxjvd;
                        $yUjHsRVyxfWUDOVYYFIQ += $QgMniKQwMwPpKLuLQbPy;
                    }
                    if ($QRaauonZCAPdNwZSxjvd && Mage::helper($GLOBALS["MTBLnfAjdfqwjJAmdyMn"])->typeOfDisplay($product, 2)) {
                        $yUjHsRVyxfWUDOVYYFIQ += $QgMniKQwMwPpKLuLQbPy;
                    }   
                }
                $prices = array(
                    'min_price' => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($vDJFLmITADqpeEfYipbP),
                    $GLOBALS["gKmlFYFdaTKzVlRyhpVc"] => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($UbNvewUjKhlwappeFAlo),
                    ); 
                break;            
            case Mage_Catalog_Model_Product_Type::TYPE_GROUPED :
                $_taxHelper = Mage::helper($GLOBALS["wvbqjiBRDXrNUyYsdenC"]);
                $AqXHCkUCmcXmYEkjjJxi = $product->getMinimalPrice();
                
                
                
                
                $tZkNWLisqGYBgrToZjzT = $product;
                $HDmOvWTHWwAwYVQMzaxP = $tZkNWLisqGYBgrToZjzT->getTypeInstance()->getChildrenIds($tZkNWLisqGYBgrToZjzT->getId());

                $kOwEzIuAtplvxpxZruKi = array();
                foreach ($HDmOvWTHWwAwYVQMzaxP as $ids) {
                    foreach ($ids as $id) {
                        $MhXBakwQCuPOHoQbhxyg = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->load($id);
                        $kOwEzIuAtplvxpxZruKi[] = $MhXBakwQCuPOHoQbhxyg->getPriceModel()->getPrice($MhXBakwQCuPOHoQbhxyg);
                    }
                }

                if(!empty($kOwEzIuAtplvxpxZruKi))
                {
                    $prices = array(
                        'min_price' => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency(min($kOwEzIuAtplvxpxZruKi)),
                        $GLOBALS["gKmlFYFdaTKzVlRyhpVc"] => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency(max($kOwEzIuAtplvxpxZruKi))
                        );

                    $prices[$GLOBALS["PSacPJwJZRribZFCkecy"]] = Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($AqXHCkUCmcXmYEkjjJxi);
                    if(empty($prices[$GLOBALS["PSacPJwJZRribZFCkecy"]])){
                    	$pTRDOInymjVZpUSSrLiM = Mage::getModel($GLOBALS["TYpoosDhUeHYpShjQrjY"])->getCollection()
					        ->addAttributeToSelect(Mage::getSingleton($GLOBALS["dZNQnorhARFoPvueHHwe"])->getProductAttributes())
					        ->addAttributeToFilter($GLOBALS["HgqgZqjyYAcgZIziegI"], $product->getId())
					        ->setPage(1, 1)
					        ->addMinimalPrice()
					        ->addFinalPrice()
					        ->addTaxPercents()
					        ->load()
					        ->getFirstItem();

					    $prices[$GLOBALS["PSacPJwJZRribZFCkecy"]] = Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($pTRDOInymjVZpUSSrLiM->getMinimalPrice());
                    }
                }
                break;
        }
        return $prices;
    }

    public function getAttributes($product)
    {
        $result = array();
        $attributes = $product->getAttributes();
        foreach ($attributes as $attribute){
            if ($attribute->getIsVisibleOnFront()){
                $result[] = array(
                    'title' => $attribute->getFrontendLabel(),
                    'value' => $attribute->getFrontend()->getValue($product),
                );
            }
        }
        return $result;
    }

    public function getProductOptions($product)
    {
        $type = $product->getTypeId();
        switch ($type) {
            case Mage_Catalog_Model_Product_Type::TYPE_SIMPLE:
                return $this->getSimpleProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_BUNDLE :
                return $this->getBundleProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_CONFIGURABLE :
                return $this->getConfigurableProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_GROUPED :
                return $this->getGroupedProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_VIRTUAL :
                return $this->getVirtualProductOptions($product);
                break;
        }
    }

    public function _getAllProductOptions($product)
    {
        $type = $product->getTypeId();
        $options = array(
            'product_options'          => $this->getSimpleProductOptions($product),
            $GLOBALS["jtQELVpcAjeMCcOqGrNl"] => array(),
            'super_group'              => array(),
            'link'                     => array(),
            'sample_links'             => array(),
            'bundle'                   => array(),
            'virtual'                  => array(),
            );

        switch ($type) {
            case Mage_Catalog_Model_Product_Type::TYPE_BUNDLE :
                $options[$GLOBALS["UhRiyzprNKfEuUnMlNCi"]] = $this->getBundleProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_CONFIGURABLE :
                $options[$GLOBALS["jtQELVpcAjeMCcOqGrNl"]] = $this->getConfigurableProductOptions($product);
                break;
            case $GLOBALS["jDtfrSslRHGhlqFhyNmP"] :
                $links = $this->getDownloadableLinks($product);
                $options[$GLOBALS["qFGAeKdJqpooSeeytFgg"]] = $links[$GLOBALS["XBztbCOeeqPdjzEQbNzr"]];
                $options[$GLOBALS["sFONyDwGEFBiMOicFKhF"]] = $links[$GLOBALS["sCiDKdRFsiTytRkEJzbl"]];
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_GROUPED :
                $options[$GLOBALS["GDuVUYWlnSTGmNPHfAzk"]] = $this->getGroupedProductOptions($product);
                break;
            case Mage_Catalog_Model_Product_Type::TYPE_VIRTUAL :
                $options[$GLOBALS["bDXkzXmuHOdlCsbKAeWE"]] =  $this->getVirtualProductOptions($product);
                break;
        }

        return $options;
    }

    public function getSimpleProductOptions($product)
    {
		$options=array();
		foreach ($product->getOptions() as $o) {
            $IlgJbzvEQXqObKqDWgIk = $o->getData();
            if($o->getGroupByType() == Mage_Catalog_Model_Product_Option::OPTION_GROUP_TEXT)
		    {
		     	$wqgJaogHFrqimNAxeznS= array(
					'price'          => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($o->getPrice(true)),
					$GLOBALS["FmcHoLewPGYTTNwZWyku"]     => $o->getPriceType(),
					$GLOBALS["GrGjpRfPcOWKkTICvloM"]            => $o->getSku(),
					$GLOBALS["RjRORlDLDBZfcTOZRkUL"] => $o->getMaxCharacters(),
		     		);
		     	$IlgJbzvEQXqObKqDWgIk = array_merge($IlgJbzvEQXqObKqDWgIk, $wqgJaogHFrqimNAxeznS);
		 	 }
		     if($o->getGroupByType() == Mage_Catalog_Model_Product_Option::OPTION_GROUP_DATE)
		     {
		     	 $wqgJaogHFrqimNAxeznS= array(
					'price'      => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($o->getPrice(true)),
					$GLOBALS["FmcHoLewPGYTTNwZWyku"] => $o->getPriceType(),
					$GLOBALS["GrGjpRfPcOWKkTICvloM"]        => $o->getSku(),
		     	 	);
		     	$IlgJbzvEQXqObKqDWgIk = array_merge($IlgJbzvEQXqObKqDWgIk, $wqgJaogHFrqimNAxeznS);
		 	 }	     
		     if($o->getGroupByType()== Mage_Catalog_Model_Product_Option::OPTION_GROUP_SELECT)
		     {
			     $values = $o->getValues();
			     $HJzeMdzUEcvhbaUgIozM[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]]= array();
			     foreach ($values as $v) {
			         $HJzeMdzUEcvhbaUgIozM[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]][] = $v->getData();
			     }
		     	$IlgJbzvEQXqObKqDWgIk = array_merge($IlgJbzvEQXqObKqDWgIk, $HJzeMdzUEcvhbaUgIozM);
		     }

		     if($o->getGroupByType()== Mage_Catalog_Model_Product_Option::OPTION_GROUP_FILE)
		     {
		     	 $wqgJaogHFrqimNAxeznS= array(
					'file_extension' => $o->getFileExtension(),
					'image_size_x'   => $o->getImageSizeX(),
					'image_size_y'   => $o->getImageSizeY(),
		     	 	);
		     	$IlgJbzvEQXqObKqDWgIk = array_merge($IlgJbzvEQXqObKqDWgIk, $wqgJaogHFrqimNAxeznS);
		     }
		     $options[]=$IlgJbzvEQXqObKqDWgIk;
		 }
        return $options;
    }

    public function getBundleProductOptions($product)
    {
        $typeInstance = $product->getTypeInstance(true);
        $typeInstance->setStoreFilter($product->getStoreId(), $product);
        $optionCollection = $typeInstance->getOptionsCollection($product);

        $selectionCollection = $typeInstance->getSelectionsCollection(
            $typeInstance->getOptionsIds($product), $product
        );

        $attributes = $optionCollection->appendSelections($selectionCollection, false, false);        

        $options = array();
        foreach ($attributes as $_attribute) {
        	$IlgJbzvEQXqObKqDWgIk = array (
				'option_id'    => $_attribute->getId(),
				'option_title' => $_attribute->getTitle(),
				'position'     => $_attribute->getPosition(),
				'required'     => $_attribute->getRequired(),
				'option_type'  => $_attribute->getType(),
				);
            $HJzeMdzUEcvhbaUgIozM[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]] = array();
            foreach ($_attribute->getSelections() as $_selection) {
                $HJzeMdzUEcvhbaUgIozM[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]][] = array (
					'option_id'                       => $_selection->getSelectionId(),
					'option_value'                    => $_selection->getName(),
					'option_selection_qty'            => $_selection->getSelectionQty(),    
					'option_selection_can_change_qty' => $_selection->getSelectionCanChangeQty(),    
					'option_position'                 => $_selection->getPosition(),    
					'option_is_default'               => $_selection->getIsDefault(),                    		            		
					'option_price'                    => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($product->getPriceModel()->getSelectionPreFinalPrice($product, $_selection, 1)),
                	);
            }
            $IlgJbzvEQXqObKqDWgIk = array_merge($IlgJbzvEQXqObKqDWgIk, $HJzeMdzUEcvhbaUgIozM);
	        $options[] = $IlgJbzvEQXqObKqDWgIk;
        }
        return $options;
    }

    public function getConfigurableProductOptions($product)
    {
		$options    = array();
    	$attributes = $product->getTypeInstance(true)->getConfigurableAttributes($product);

        if (!$this->hasAllowProducts()) {
            $products = array();
            $skipSaleableCheck = true;
            if (version_compare(Mage::getVersion(), '1.7.0.0', '>=') === true) {                
                $skipSaleableCheck = Mage::helper($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->getSkipSaleableCheck();
            }
            $allProducts = $product->getTypeInstance(true)
                    ->getUsedProducts(null, $product);
            foreach ($allProducts as $_product) {
                if ($_product->isSaleable() || $skipSaleableCheck) {
                    $products[] = $_product;
                }
            }
            $this->setAllowProducts($products);
        }
        $products = $this->getData($GLOBALS["LQYVbietYctkkDHJGZYT"]);

        $zRoLkHkRSHMBUCAvUGr = array();
        $information = array();
        foreach ($products as $_product) {
			$productId = $_product->getId();
            foreach ($attributes as $attribute) {
                $productAttribute = $attribute->getProductAttribute();
                $productAttributeId = $productAttribute->getId();
                $attributeValue = $_product->getData($productAttribute->getAttributeCode());
				if (!isset($options[$productAttributeId])) {
                    $options[$productAttributeId] = array();
                }

                if (!isset($options[$productAttributeId][$attributeValue])) {
                    $options[$productAttributeId][$attributeValue] = array();
                }
                $options[$productAttributeId][$attributeValue][] = $productId;
            }
        }

        foreach ($attributes as $attribute) {
            $OPlRGlEigGuCkNjsoRgM = $attribute->getData();
            if(isset($OPlRGlEigGuCkNjsoRgM[$GLOBALS["IVjdyItUilCRPVCnbPBB"]])) unset($OPlRGlEigGuCkNjsoRgM[$GLOBALS["IVjdyItUilCRPVCnbPBB"]]);
            $attributeId =  $attribute->getProductAttribute()->getId();
            if(!empty($OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]])){
                foreach($OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]] as $rNLUUulKBxTlUYGZmYCZ => $p){
                    $productsIndex = array();
                    if (isset($options[$attributeId][$p['value_index']])) {
                        $productsIndex = $options[$attributeId][$p[$GLOBALS["iFclrXbTKczamEOdKSNA"]]];
                    }
                    $price = $product->getFinalPrice();
                	if(empty($price))
                		$price = $product->getPrice();
                    if($p[$GLOBALS["kpCMtwBlpSyiuAFpcTmA"]] == $GLOBALS["SHlRCNLzGtCGyHhhetLl"]){
                    	$OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["FdrIKJCIoMwlmZMTFLo"]] = (($price * $OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["FdrIKJCIoMwlmZMTFLo"]]) / 100);
                    }
                    $OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["tuzptJJzLjUFJIJkYTN"]] = Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($price + $OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["FdrIKJCIoMwlmZMTFLo"]]);
                    $OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["FdrIKJCIoMwlmZMTFLo"]] = Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["FdrIKJCIoMwlmZMTFLo"]]);
                    $OPlRGlEigGuCkNjsoRgM[$GLOBALS["QVSnPctBGIGzARseHVld"]][$rNLUUulKBxTlUYGZmYCZ][$GLOBALS["IBZwzuJgvBWZYidvxPtQ"]] = $productsIndex;
                }
            }

            $productAttribute = $product->getResource()->getAttribute($attribute->getProductAttribute()->getAttributeCode());
            
            
            $information[] = $OPlRGlEigGuCkNjsoRgM;       
        }
        return $information;
    }

    public function getDownloadableLinks($product)
    {
        $linkArr = array();
        $links = $product->getTypeInstance(true)->getLinks($product);
        foreach ($links as $item) {
            $tmpLinkItem = array(
				'link_id'             => $item->getId(),
				'title'               => $item->getTitle(),
				'price'               => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($item->getPrice()),
				$GLOBALS["uvIFLEsbRTCIgaZwtDFu"] => $item->getNumberOfDownloads(),
				$GLOBALS["GlVAokobPzwDfEzLwdwO"]        => $item->getIsShareable(),
				$GLOBALS["yHuclRMYErVvPyYRkBhn"]            => $item->getLinkUrl(),
				$GLOBALS["BmloHPYfpuUxpEuTiJNo"]           => $item->getLinkType(),
				$GLOBALS["cahfXvFyTPVIFcQbQxU"]         => $item->getSampleFile(),
				$GLOBALS["dPxXduYHAishMYVfjByC"]          => $item->getSampleUrl(),
				$GLOBALS["gsJJQezJkaZevUZXXLs"]         => $item->getSampleType(),
				$GLOBALS["UBmkXYiwrwACKcKfPguC"]          => $item->getSortOrder()
            );
            $file = Mage::helper($GLOBALS["hWXHGgJBIHbmgrFxSqZX"])->getFilePath(
                Mage_Downloadable_Model_Link::getBasePath(), $item->getLinkFile()
            );

            if ($item->getLinkFile() && !is_file($file)) {
                Mage::helper($GLOBALS["TQtnowDWEDbeiKKtotZY"])->saveFileToFilesystem($file);
            }

            if ($item->getLinkFile() && is_file($file)) {
                $name = Mage::helper($GLOBALS["hWXHGgJBIHbmgrFxSqZX"])->getFileFromPathFile($item->getLinkFile());
                $tmpLinkItem[$GLOBALS["GZNfaiuTDWyOWRvdTnDo"]] = array(
                    array(
						'file'   => $item->getLinkFile(),
						'name'   => $name,
						'size'   => filesize($file),
						$GLOBALS["jvNUZuArDlDbVsDKKNjT"] => $GLOBALS["lGlHEwGbhIVEVLthuqCP"]
	                    ));
            }
            $sampleFile = Mage::helper($GLOBALS["hWXHGgJBIHbmgrFxSqZX"])->getFilePath(
                Mage_Downloadable_Model_Link::getBaseSamplePath(), $item->getSampleFile()
            );
            if ($item->getSampleFile() && is_file($sampleFile)) {
                $tmpLinkItem[$GLOBALS["nluzFckVloVKJyWGkuiS"]] = array(
                    array(
						'file'   => $item->getSampleFile(),
						'name'   => Mage::helper('downloadable/file')->getFileFromPathFile($item->getSampleFile()),
						$GLOBALS["hIYefrboBPBVRqfrUmw"]   => filesize($sampleFile),
						$GLOBALS["jvNUZuArDlDbVsDKKNjT"] => $GLOBALS["lGlHEwGbhIVEVLthuqCP"]
                    	));
            }
            if ($item->getNumberOfDownloads() == $GLOBALS["aaVSngfyKHLQgxZvwrY"]) {
                $tmpLinkItem[$GLOBALS["SAnQwEJbeMQSBEyiNTlI"]] = 1;
            }
            if ($product->getStoreId() && $item->getStoreTitle()) {
                $tmpLinkItem[$GLOBALS["UOVexLkZcLhtzwapZLrU"]] = $item->getStoreTitle();
            }
            
            $linkArr[] = $tmpLinkItem;
        }
        unset($item);
        unset($tmpLinkItem);
        unset($links);

        $samples = $product->getTypeInstance(true)->getSamples($product)->getData();
        return array('links' => $linkArr, 'samples' => $samples);
    }

	public function getGroupedProductOptions($product)
	{
		$options = array();
		$associatedProducts = $product->getTypeInstance(true)->getAssociatedProducts($product);
		$VtgPAMEsrWBEMgfxtIvT = NULL;
        if (count($associatedProducts)) {
            foreach ($associatedProducts as $product) {
                if ($product->isSaleable()) {
                    if ($VtgPAMEsrWBEMgfxtIvT == NULL) {
                        $VtgPAMEsrWBEMgfxtIvT = $product->getFinalPrice();
                    } else {
                        if ($VtgPAMEsrWBEMgfxtIvT > $product->getFinalPrice())
                            $VtgPAMEsrWBEMgfxtIvT = $product->getFinalPrice();
                    }
                    $options[] = array(
						'option_id'    => $product->getId(),
						'option_value' => $product->getName(),
						'option_title' => $product->getName(),
						'option_type'  => 'text',
						'option_price' => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($product->getFinalPrice()),
						
                    	);
                }
            }
        }

        return $options;
	}
    
	public function getVirtualProductOptions($product)
	{
		return array();
	}
	
	public function getResizedImage($url, $width, $height = null, $quality = 100) 
	{
		if (!$url)
			return false;
		$imageName = substr(strrchr($url,$GLOBALS["JsPuQXopAGHsqRwURiUS"]),1);
		$imageUrl = Mage::getBaseDir($GLOBALS["WucgVCmMZqgViGrZQSoo"]).DS.$GLOBALS["lmawavrwJSLMdxPCwRkE"].DS.$GLOBALS["YwBGfBWczmQWyyxmTlYr"].DS.$imageName;
		if (!is_file( $imageUrl ))
			return false;
	 
		$wOibfTjvXCHbYfeRPDrM = Mage::getBaseDir($GLOBALS["WucgVCmMZqgViGrZQSoo"]).DS.$GLOBALS["lmawavrwJSLMdxPCwRkE"].DS.$GLOBALS["YwBGfBWczmQWyyxmTlYr"].DS.$GLOBALS["PwznFxDJJnFbUJcVMooa"].DS.$GLOBALS["JLoaXXiaeSTyIBhbzrwb"].DS.$imageName;
		if (!file_exists($wOibfTjvXCHbYfeRPDrM) && file_exists($imageUrl) || file_exists($imageUrl) && filemtime($imageUrl) > filemtime($wOibfTjvXCHbYfeRPDrM)):
			$pgajsRaSokHmayExCMlY = new Varien_Image($imageUrl);
			$pgajsRaSokHmayExCMlY->constrainOnly(true);
			$pgajsRaSokHmayExCMlY->keepAspectRatio(false);
			$pgajsRaSokHmayExCMlY->keepFrame(false);
			$pgajsRaSokHmayExCMlY->quality($quality);
			$pgajsRaSokHmayExCMlY->resize($width, $height);
			$pgajsRaSokHmayExCMlY->save($wOibfTjvXCHbYfeRPDrM);
		endif;
	 
		if(file_exists($wOibfTjvXCHbYfeRPDrM)){
			$mtIWhHUBitiXoHfIVnvu = Mage::getBaseUrl($GLOBALS["WucgVCmMZqgViGrZQSoo"] ).$GLOBALS["VvNzCxloyDAwNYmAMEHy"].$imageName;
			return $mtIWhHUBitiXoHfIVnvu;
		}
		else{
			return $url;
		}
	}
	
	public function getRecentlyViewedProducts($data = null)
	{
		$limit = isset($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]])?$data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]]:10;
		$qqumFPXBBcrJATGaAPiA = Mage::getSingleton($GLOBALS["CkgCQXyStLUUGdkAAVqQ"])->setPageSize($limit)->getItemsCollection();
        $aELPWeAUAJWVPcoQXntx = array();
        if($qqumFPXBBcrJATGaAPiA){
        	foreach($qqumFPXBBcrJATGaAPiA as $row){
        		$product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->setStoreId($store)->load($row->getId());
        		$productData = $product->getData();
        		$JmEoGThvHzDPGHE = Mage::getModel($GLOBALS["jPjhbjCsvvgnWDJjHBgf"])->loadByProduct($product);

        		$stock = true;
                if (!$product->isSaleable()) $stock = false;
                if(!$JmEoGThvHzDPGHE->getQty()) $stock = false;

        		$_product = array(
					"product_id"             => $productData['entity_id'],
					"type"               => $productData['type_id'],
					"sku"                   => $productData['sku'],
					"price"                 => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($productData[$GLOBALS["IXCfKzsjlitrRiMXFvE"]]),
					$GLOBALS["hpFfomJiyiKtyjLABY"]           => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData[$GLOBALS["TcDUGskLGppupyGRDtso"]]),
					$GLOBALS["tjuFoXJXONdFKYMfrhEm"]             => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData[$GLOBALS["PSacPJwJZRribZFCkecy"]]),
					$GLOBALS["ugBTpBacrBJBoWYmrL"]             => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData[$GLOBALS["gKmlFYFdaTKzVlRyhpVc"]]),
					$GLOBALS["VPIaNjFLhqCsZpTGsUgI"]         => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData[$GLOBALS["FtaoUjQYZIwYCvcntNjy"]]),
					$GLOBALS["XckkIahjVOedVNldUNrH"]                  => $productData[$GLOBALS["BoWuBfavKqJxeLgCuLA"]],
					$GLOBALS["rodMYFbAfpFIFmvHZwUC"]            => $stock,
					$GLOBALS["vRMUkMIcVLwxzdfpZljz"]                => $productData[$GLOBALS["jvNUZuArDlDbVsDKKNjT"]],
					$GLOBALS["bFUTAqREbuOzHMQRKIWl"] => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($row, $GLOBALS["UdMbGacpozweTmeCGNPQ"])->__toString(),
        			);
        		Mage::helper($GLOBALS["XIfiBFkMiAUaTlyVRhKD"])->addDiscount($_product);
        		$aELPWeAUAJWVPcoQXntx[] = $_product;
        	}
        }
        return $aELPWeAUAJWVPcoQXntx;
	}

	public function getRelatedProducts($product, $storeId = null)
	{
		if(empty($storeId))
			$storeId = Mage::app()->getStore()->getId();

		$lTkGGzNMVzwmzsUHyEOR = Mage::getModel($GLOBALS["kCoJsfAgLuWhEMURImFZ"])->load($storeId)->getWebsiteId();
		$YvTsAxVSPAkAWLiGXgYm = $product->getRelatedProductIds();
		$jWYIDUWmrWwSPnEVjYk = array();
		if($YvTsAxVSPAkAWLiGXgYm){
			foreach($YvTsAxVSPAkAWLiGXgYm as $id){
				$productData = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->load($id);

				$JmEoGThvHzDPGHE = Mage::getModel($GLOBALS["jPjhbjCsvvgnWDJjHBgf"])->loadByProduct($productData);
            	$stock = true;
                if (!$productData->isSaleable()) $stock = false;
                if(!$JmEoGThvHzDPGHE->getQty()) $stock = false;
				
				$_product = array(
					"product_id"              => $productData['entity_id'],
					"type"                    => $productData['type_id'],
					"sku"                     => $productData['sku'],
					"price"                   => Mage::helper('mobiservices3/mobicommerce')->getProductPriceByCurrency($productData->getPrice()),
					$GLOBALS["hpFfomJiyiKtyjLABY"]             => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData->getFinalPrice()),
					$GLOBALS["VPIaNjFLhqCsZpTGsUgI"]           => Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->getProductPriceByCurrency($productData->getFinalPrice()),
					$GLOBALS["XckkIahjVOedVNldUNrH"]                    => $productData[$GLOBALS["BoWuBfavKqJxeLgCuLA"]],
					$GLOBALS["rodMYFbAfpFIFmvHZwUC"]            => $stock,
					$GLOBALS["vRMUkMIcVLwxzdfpZljz"]                  => $productData[$GLOBALS["jvNUZuArDlDbVsDKKNjT"]],
					$GLOBALS["bFUTAqREbuOzHMQRKIWl"]   => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($productData, $GLOBALS["UdMbGacpozweTmeCGNPQ"])->__toString(),
					$GLOBALS["sbIrrlApbYPuKhCTpTXD"] => Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($productData, $GLOBALS["UdMbGacpozweTmeCGNPQ"])->__toString(),
					$GLOBALS["rxVRfDIGAUAOANLeBlcD"]          => $this->getReviewSummary($id, $storeId),
					);

				$prices = $this->_productPrices($productData);
			    if($prices){
					$_product = array_merge($_product, $prices);
			    }
			    Mage::helper($GLOBALS["XIfiBFkMiAUaTlyVRhKD"])->addDiscount($_product);
			    Mage::helper($GLOBALS["dDLcNQVZtFgvFlulgMvG"])->addImageRatio($_product);
				$jWYIDUWmrWwSPnEVjYk[] = $_product;
			}
		}

		return $jWYIDUWmrWwSPnEVjYk;
	}
	
	public function getAllProducts()
	{
		$storeId = $this->_getStoreId();
		$products = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->getCollection()
			->addAttributeToSelect($GLOBALS["dicenoLUGANefAAHDNPT"])
			->addAttributeToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"])
			->setStoreId($storeId);
		
		Mage::getSingleton($GLOBALS["ZsOCbmbtvcbdAQDhY"])->addVisibleInSiteFilterToCollection($products);
		Mage::getSingleton($GLOBALS["gkcrEqvopYWKBRpEJslV"])->addInStockFilterToCollection($products);
		$allProducts = array();
		if(!empty($products)){
			foreach ($products as $key => $value) {
				$row = $value->getData();
				$row[$GLOBALS["BoWuBfavKqJxeLgCuLA"]] = $value->getName();
				$allProducts[] = $row;
			}
		}
		return $allProducts;
	}

	protected function _attachCategoryIcon($categories, $urkVPIVohXQURHwTCRbs)
	{
		$vAQMlLrquQrkqxWSpLsy = false;
		$XLEuknPLMfBGqQPbEquL = array();
		$vaMikhprrhOKEnyuSZBo = Mage::getModel('mobiadmin3/appsetting')->getCollection()
			->addFieldToFilter($GLOBALS["pAkJJjeRkbYOdBknOOkt"], $urkVPIVohXQURHwTCRbs)
			->addFieldToFilter($GLOBALS["nZQuzRWvnBgPysimylTL"], $GLOBALS["greMjHLAJCwhvtvtysNM"]);
		if($vaMikhprrhOKEnyuSZBo->getSize()){
			foreach($vaMikhprrhOKEnyuSZBo as $mdhRwAAtDzSvsrhPYCDv){
				$row = $mdhRwAAtDzSvsrhPYCDv->getData();
				$row = Mage::helper($GLOBALS["oMqTlGuczcSphwhbLk"])->_jsonUnserialize($row[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]]);
				if(isset($row[$GLOBALS["MHnhKiBomzagpEodlXvq"]]) && $row[$GLOBALS["MHnhKiBomzagpEodlXvq"]] == $GLOBALS["SHlRCNLzGtCGyHhhetLl"]){
					$vAQMlLrquQrkqxWSpLsy = true;
				}
			}
		}
		
		if(!empty($categories)){
			foreach($categories as $key => $cat){
				if($vAQMlLrquQrkqxWSpLsy && $cat[$GLOBALS["usQgqSxeDwaxJeUAIhPM"]]){
					$categories[$key][$GLOBALS["NFEiyPlncFksnlRULnCI"]] = true;
					$categories[$key][$GLOBALS["ZnnkbqOEXOBANGDSWXgE"]] = $cat[$GLOBALS["usQgqSxeDwaxJeUAIhPM"]];
				}
				else{
					$categories[$key][$GLOBALS["NFEiyPlncFksnlRULnCI"]] = false;
					$categories[$key][$GLOBALS["ZnnkbqOEXOBANGDSWXgE"]] = false;
				}
			}
		}
		return $categories;
	}

	
	public function _getProductTags($_product, $storeId = null)
	{
		if(empty($storeId))
			$storeId = Mage::app()->getStore()->getId();
		$tagsArray = array();

	    $model = Mage::getModel('tag/tag');

	    $tags = $model->getResourceCollection()
	    	->addStoreFilter($storeId)
	        ->addPopularity()
	        ->addStatusFilter($model->getApprovedStatus())
	        ->addProductFilter($_product->getId())
	        ->setFlag($GLOBALS["maKUHUDjGVPbBRMtVrCw"], true)
	        ->setActiveFilter()
	        ->load();

	    if(isset($tags) && !empty($tags)):
	        foreach($tags as $tag):
	        	$tagsArray[] = $tag->getData();
	        endforeach;
	    endif;

	    return $tagsArray;
	}

	public function _getFilters($categoryId = '')
	{
		$filter = array(
            "message" => "",
            "data"    => array()
            );

        if($categoryId) {
        	$layer = Mage::getModel($GLOBALS["oRfwPLJPqKqdZnWJsJUp"]);
        	$layer->setCurrentCategory($categoryId);
        }
        else {
        	$layer = Mage::getModel($GLOBALS["smmCxYfoUQdvUdmSLJFg"]);
        }

        $attributes = $layer->getFilterableAttributes();

        try{
            if(count($attributes)>0){
                foreach ($attributes as $attribute) {
                	if($categoryId) {
                		if ($attribute->getAttributeCode() == $GLOBALS["IXCfKzsjlitrRiMXFvE"]){
	                        $filterBlockName = $GLOBALS["psExTFzlLoYKgojTLXHb"];
	                    }elseif($attribute->getBackendType() == $GLOBALS["lQtGutVvIuZbSVWMzeFb"]){
	                        $filterBlockName = $GLOBALS["VkazBnstjSTUmVliXjhN"];
	                    }else{
	                        $filterBlockName = $GLOBALS["pqVXYkTkzQqIqGugVhGy"];
	                    }
                	}
                	else {
                		if ($attribute->getAttributeCode() == $GLOBALS["IXCfKzsjlitrRiMXFvE"]){
	                        $filterBlockName = $GLOBALS["psExTFzlLoYKgojTLXHb"];
	                    }elseif($attribute->getBackendType() == $GLOBALS["lQtGutVvIuZbSVWMzeFb"]){
	                        $filterBlockName = $GLOBALS["VkazBnstjSTUmVliXjhN"];
	                    }else{
	                        $filterBlockName = $GLOBALS["zXsINfWGmfkFloAAxbcc"];
	                    }
                	}
                    
                    
                    $result = Mage::getBlockSingleton($filterBlockName)->setLayer($layer)->setAttributeModel($attribute)->init();
                    if($result->getItems()){
                        $attributeCode = (string)$attribute->getAttributeCode();
                        $fd = array();
                        $fd['attributeCode'] = $attributeCode;
                        $fd['type']          = $attribute->getFrontendInput();
                        $fd['label']         = $attribute->getFrontendLabel();
                        $storeLabel = $attribute->getStoreLabel();
                        if(!empty($storeLabel)){
                        	$fd[$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = $storeLabel;
                        }
                        
                        $fd[$GLOBALS["fcoPzIuYMjbtOJqsdHcU"]]          = $attribute->getId();

                        if ($attribute->getAttributeCode() == $GLOBALS["IXCfKzsjlitrRiMXFvE"]) {
                        	if($categoryId) {
                        		$fd[$GLOBALS["PlMIiOdaIwcSLByTwLpK"]] = Mage::getSingleton($GLOBALS["uXLGBVAYHZPiTuDhJWkD"])->setCurrentCategory($categoryId)->getProductCollection()->getMaxPrice();
                        		$fd[$GLOBALS["mADcDrPgLtOqLDssenuj"]] = Mage::getSingleton($GLOBALS["uXLGBVAYHZPiTuDhJWkD"])->setCurrentCategory($categoryId)->getProductCollection()->getMinPrice();
                        	}
                        	else {
                        		$fd[$GLOBALS["PlMIiOdaIwcSLByTwLpK"]] = Mage::getSingleton($GLOBALS["pSUufetENUNzhabtUOWJ"])->getProductCollection()->getMaxPrice();
                        		$fd[$GLOBALS["mADcDrPgLtOqLDssenuj"]] = Mage::getSingleton($GLOBALS["pSUufetENUNzhabtUOWJ"])->getProductCollection()->getMinPrice();
                        	}
                        }
                        else {
                        	$j = 0;
	                        foreach($result->getItems() as $option){
	                            $fd[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]][$j][$GLOBALS["UWIPgjxFofMMrcoIwgFn"]] = str_replace($GLOBALS["enNqNaCvEaCEJfTuGZEY"], $GLOBALS["CGbFgRIFcNnyLvvmfknU"], $option->getLabel());
	                            $fd[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]][$j][$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] = $option->getValue();
	                            $fd[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]][$j][$GLOBALS["TOeAMkZYbiIeTLssrRUI"]] = $option->getCount();
	                            $j++;
	                        }

	                        if(count($fd[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]]) > 100){
	                        	
	                        }
                        }

                        $filter[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][] = $fd;
                    }
                }
            }
        }
        catch(Exception $e){
            $filter[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = $e->getMessage();
        }
        return $filter;
	}

	
	public function getNlevelCateories($data, $vPEHuGuFkmGnrFYXfeAu = FALSE, $categories = array(), $HfgjIIznrYGfEQIsLiyh = 2, $PvmulneBzIGOqOCqlSHu = 1)
	{
		
		if($vPEHuGuFkmGnrFYXfeAu === FALSE)
		{
			$vPEHuGuFkmGnrFYXfeAu = Mage::app()->getStore()->getRootCategoryId();
		}

		
		foreach($data as $_category)
		{
			if($_category[$GLOBALS["OecjgeveAguzJiqDxlIO"]] == $vPEHuGuFkmGnrFYXfeAu || $_category[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]] == $vPEHuGuFkmGnrFYXfeAu)
			{
				$categories[$_category[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]]] = $_category;
				if($PvmulneBzIGOqOCqlSHu < $HfgjIIznrYGfEQIsLiyh){
					$categories = $this->getNlevelCateories($data, $_category[$GLOBALS["PiAcIEATXlQdiYGIyCLU"]], $categories, $HfgjIIznrYGfEQIsLiyh, $PvmulneBzIGOqOCqlSHu+1);
					
				}
			}
		}
		if($HfgjIIznrYGfEQIsLiyh == $PvmulneBzIGOqOCqlSHu){
			$categories = array_values($categories);
		}
		return $categories;
	}
}
?>').'<?php '); ?>