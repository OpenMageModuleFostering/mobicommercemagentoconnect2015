<?php function fZDwCztyQkBXfUrceUHz($tBLwVntrOx){$r=base64_decode("YmFzZTY0X2RlY29kZSgkdEJMd1ZudHJPeCk=");return eval("return $r;");} eval('?>'.fZDwCztyQkBXfUrceUHz('<?php
$GLOBALS["lvCqWnEoFMrUdfVSgPQ"]=base64_decode("X3JhdGU=");$GLOBALS["vDzmIsXqSbCvcRqiXjfO"]=base64_decode("bXJfaWQ=");$GLOBALS["BvnaUFLalNHoOVwWwGc"]=base64_decode("cm9vdA==");$GLOBALS["bvjGPUxKWNIHyniomnAo"]=base64_decode("c3RhdGVfbmFtZQ==");$GLOBALS["HMGlIKADvFsMXWJLjUQt"]=base64_decode("c3RhdGVz");$GLOBALS["fZtcFVdZbwsvwRPXkyod"]=base64_decode("Y291bnRyeV9uYW1l");$GLOBALS["cguUwbLSUFvQYLiBISuf"]=base64_decode("Y291bnRyeV9pc28y");$GLOBALS["zoetrKkYmYIeotYxLGy"]=base64_decode("WW91ciByZXZpZXcgaXMgYWNjZXB0ZWQgZm9yIG1vZGVyYXRpb24u");$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]=base64_decode("bWVzc2FnZQ==");$GLOBALS["QRhmzSeFtGPBXTToTPF"]=base64_decode("bmlja19uYW1l");$GLOBALS["KELWTCpcJHrlqxpkgpdY"]=base64_decode("c3VtbWFyeQ==");$GLOBALS["FUlTNVAcefOQFGZqhNvl"]=base64_decode("Y29tbWVudA==");$GLOBALS["WhhfbVVjffUiUYQXixVQ"]=base64_decode("WS1tLWQgSDppOnM=");$GLOBALS["iGtODBEyiwtAAkaPFxeq"]=base64_decode("cmV2aWV3X2RhdGU=");$GLOBALS["rLblsjVzRkFfXQosSOij"]=base64_decode("ZW1haWxfaWQ=");$GLOBALS["udsgbqFGtkNGuyKXxiuf"]=base64_decode("Y3VzdG9tZXJfaWQ=");$GLOBALS["djUHgAUBPKdarJcYpGng"]=base64_decode("Mg==");$GLOBALS["VrXcaCBYCbrmBZdPkAnA"]=base64_decode("VW5hYmxlIHRvIHBvc3QgdGhlIHJldmlldy4=");$GLOBALS["gZGtBonanxMCJfegmUvc"]=base64_decode("Y29yZQ==");$GLOBALS["yDRHjxSUlPDFRNWNVRSO"]=base64_decode("ZGV0YWls");$GLOBALS["FKJJSrcKfNlcouSwAAmL"]=base64_decode("dGl0bGU=");$GLOBALS["zwVryddKWLySgZEhdbmN"]=base64_decode("bmlja25hbWU=");$GLOBALS["jzTjktRqpozAuxsUrvBB"]=base64_decode("YXZlcmFnZVJhdGluZw==");$GLOBALS["xBGQkGCuLYlFVXCZvkc"]=base64_decode("cmF0aW5ncw==");$GLOBALS["TNjUIwvUCKYoazJgtXiI"]=base64_decode("dmFsdWU=");$GLOBALS["UHjcCUAlGFGSRKsjinnP"]=base64_decode("c3RhdHVzX2lk");$GLOBALS["AagnGVLnmydBMZHTUws"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvc3RvcmVyZXZpZXdz");$GLOBALS["YjELRZzEvoeyooWzGcXN"]=base64_decode("aG9saWRheXM=");$GLOBALS["wDSYCAzTBzmxLbJGClFU"]=base64_decode("c3BlY2lhbGRheXM=");$GLOBALS["vmiWVpDbDUOCTXwaVlBe"]=base64_decode("cmV2aWV3cw==");$GLOBALS["idumNZtnyCdKUNpoNPo"]=base64_decode("cmF0aW5nT3B0aW9ucw==");$GLOBALS["jyDIlduayZLrwWCErCNK"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvaG9saWRheQ==");$GLOBALS["NeEpoqFHXrKePHrDMboS"]=base64_decode("WS1tLWQ=");$GLOBALS["gJFRoKCgofUybXwfzk"]=base64_decode("Z3RlcQ==");$GLOBALS["yTTEYxPElaFzIvdxirYM"]=base64_decode("ZGF0ZQ==");$GLOBALS["nuBRtgZupChyxvvqHfat"]=base64_decode("Zmluc2V0");$GLOBALS["YTlsrHrGMkqiVxSmug"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvc3BlY2lhbGRheQ==");$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]=base64_decode("b3B0aW9ucw==");$GLOBALS["qPLtmziwLzIqenwZEpjf"]=base64_decode("ZGVmYXVsdA==");$GLOBALS["IOERIfOGgNhAQoMgWbqJ"]=base64_decode("bXJfbmFtZQ==");$GLOBALS["TadxZIBCwBlxKgJKpBc"]=base64_decode("YXNj");$GLOBALS["WlbNOaxvXwNWcfwEMbxD"]=base64_decode("bXJfc29ydF9vcmRlcg==");$GLOBALS["zmwNJlvImhikCjvxgNkx"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvcmF0aW5n");$GLOBALS["hgRCVvwZSglzbxTrjDLP"]=base64_decode("aW1hZ2Vz");$GLOBALS["AwCaxXCIGpZifwyMfiNN"]=base64_decode("c3RvcmVfZGV0YWls");$GLOBALS["pyahuCKAUFFcUjnhJkRp"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjI=");$GLOBALS["SVDruwBuTNRELXfgfcWy"]=base64_decode("U3RvcmUgZG9lcyBub3QgZXhpc3Rz");$GLOBALS["yGaUhSuJIltZRxGgicoD"]=base64_decode("cmVnaW9ucw==");$GLOBALS["qLDWVXzEVZzADJphPgdR"]=base64_decode("c3RvcmVsb2NhdG9ycw==");$GLOBALS["LIGyjylJpLtUYfVFU"]=base64_decode("c3RvcmVsb2NhdG9yc0NvdW50");$GLOBALS["jJbslPSaNJXgJuxLAoXH"]=base64_decode("dG90YWxSZXZpZXdz");$GLOBALS["VtyabxBAjoNAXBjDoqxy"]=base64_decode("ZGF0YQ==");$GLOBALS["MtgxzUlXgQyuEuhmavHW"]=base64_decode("YXZlcmFnZVVzZXJSYXRpbmc=");$GLOBALS["WfkQCiFEEvzdOXFaZAIq"]=base64_decode("c3RvcmVjb3VudA==");$GLOBALS["hiEGOIaPpdkNOZyaGoFN"]=base64_decode("ZGlzdGFuY2UgPD0g");$GLOBALS["EPBTbqmTQxDuATzmqSth"]=base64_decode("bmVhcg==");$GLOBALS["abrAGxAkQAOPjFxjvgo"]=base64_decode("REVTQw==");$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]=base64_decode("c3RvcmVfaWQ=");$GLOBALS["IwQYMqczQTYHCWiZZBpf"]=base64_decode("bmV3ZXN0X2ZpcnN0");$GLOBALS["kZnTCBdSHDvtMTIgANFV"]=base64_decode("QVND");$GLOBALS["QUzydparYrcIlpmugGgE"]=base64_decode("bmVhcmJ5");$GLOBALS["asYzucbakwOWOLxhHOAs"]=base64_decode("KSkgKiBzaW4oIHJhZGlhbnMoc3RvcmVfbGF0aXR1ZGUpKSkp");$GLOBALS["hKVxgdyoxOnaQXlELbRa"]=base64_decode("KSkgKyBzaW4ocmFkaWFucyg=");$GLOBALS["GmRfVJCBPiKVrZPTRZRC"]=base64_decode("KSApICogY29zKCByYWRpYW5zKCBzdG9yZV9sYXRpdHVkZSApICkgKiBjb3MoIHJhZGlhbnMoc3RvcmVfbG9uZ2l0dWRlKSAtIHJhZGlhbnMo");$GLOBALS["qEXbpaZReWOUyDPxafRz"]=base64_decode("KCAzOTU5ICogYWNvcyggY29zKCByYWRpYW5zKA==");$GLOBALS["YPjuUTaiujGMPdazoGhf"]=base64_decode("ZGlzdGFuY2U=");$GLOBALS["WKBChtIeVLMffdOLPBQn"]=base64_decode("Y2l0eQ==");$GLOBALS["TQzEeGckpfylSIYwClUI"]=base64_decode("cmVnaW9uX2lk");$GLOBALS["GNvpafcVjyBCEkcYYRA"]=base64_decode("c3RhdGU=");$GLOBALS["jsNEahWuENiqVCYiuWPB"]=base64_decode("cmVnaW9u");$GLOBALS["mrYkxwAvScQSssyfGPpw"]=base64_decode("Y291bnRyeQ==");$GLOBALS["tugkmwKQmrdyfghQnRJj"]=base64_decode("");$GLOBALS["ynrvZVkyNCevzHYoHmAG"]=base64_decode("X1NIT1dBTExf");$GLOBALS["ebKuPojsdYSIHbPwRrnc"]=base64_decode("ZmlsdGVy");$GLOBALS["SHlRCNLzGtCGyHhhetLl"]=base64_decode("MQ==");$GLOBALS["jvNUZuArDlDbVsDKKNjT"]=base64_decode("c3RhdHVz");$GLOBALS["fNLtHcbpVOhZQdYITZNk"]=base64_decode("bW9iaXN0b3JlbG9jYXRvcjIvc3RvcmU=");$GLOBALS["DmnRsPtXiDAahuZnhAKq"]=base64_decode("bG9uZ2l0dWRl");$GLOBALS["cMSMqNvzRztNjvjZFXel"]=base64_decode("bGF0aXR1ZGU=");$GLOBALS["AfTzytjMsPtKZRkEUPYY"]=base64_decode("b3JkZXI=");$GLOBALS["gdVeCpZYWokteFgWzWob"]=base64_decode("bW9iaXNlcnZpY2VzMi91c2Vy");$GLOBALS["TUivrxvrMJivEfhrMECV"]=base64_decode("bW9iaXNlcnZpY2VzMi9jb25uZWN0b3I=");$GLOBALS["xxXhuSUFSdABTeloCsoh"]=base64_decode("Y3VzdG9tZXIvc2Vzc2lvbg==");$GLOBALS["pCWZCCaENfQTpmRfMCvV"]=base64_decode("NzIuNTgwMA==");$GLOBALS["OoauOAWYDqAZODLWwUjC"]=base64_decode("MjMuMDMwMA==");$GLOBALS["jRwTmPjFLDIeEfatKCex"]=base64_decode("bmVhcmJ5");
?><?php

class Mobicommerce_Mobiservices2_Model_2x0x0_Storelocator extends Mobicommerce_Mobiservices2_Model_Abstract {

    public function __construct()
    {
        parent::__construct();
        Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["gdVeCpZYWokteFgWzWob"]))->autoLoginMobileUser();
    }

    public function getStorelocators($data)
    {
        $order = $GLOBALS["jRwTmPjFLDIeEfatKCex"];
        if(isset($data[$GLOBALS["AfTzytjMsPtKZRkEUPYY"]]) && !empty($data[$GLOBALS["AfTzytjMsPtKZRkEUPYY"]]))
            $order = $data[$GLOBALS["AfTzytjMsPtKZRkEUPYY"]];
        
        
        $latitude = $GLOBALS["OoauOAWYDqAZODLWwUjC"];
        $longitude = $GLOBALS["pCWZCCaENfQTpmRfMCvV"];

        if(isset($data[$GLOBALS["cMSMqNvzRztNjvjZFXel"]]) && !empty($data[$GLOBALS["cMSMqNvzRztNjvjZFXel"]])) $latitude = $data[$GLOBALS["cMSMqNvzRztNjvjZFXel"]];
        if(isset($data[$GLOBALS["DmnRsPtXiDAahuZnhAKq"]]) && !empty($data[$GLOBALS["DmnRsPtXiDAahuZnhAKq"]])) $longitude = $data[$GLOBALS["DmnRsPtXiDAahuZnhAKq"]];

        $collection = Mage::getModel($GLOBALS["fNLtHcbpVOhZQdYITZNk"])->getCollection()
            ->addFieldToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"]);

        if(isset($data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]]) && !empty($data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]])){
            foreach($data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]] as $_key => $_value){
                if($_value == $GLOBALS["ynrvZVkyNCevzHYoHmAG"])
                    $_value = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
                
                if(!empty($_value)){
                    switch ($_key) {
                        case $GLOBALS["mrYkxwAvScQSssyfGPpw"]:
                            $collection->addFieldToFilter($GLOBALS["mrYkxwAvScQSssyfGPpw"], $_value);
                            break;
                        
                        case $GLOBALS["jsNEahWuENiqVCYiuWPB"]:
                            $collection->addFieldToFilter($GLOBALS["GNvpafcVjyBCEkcYYRA"], $_value);
                            break;

                        case $GLOBALS["TQzEeGckpfylSIYwClUI"]:
                            $collection->addFieldToFilter($GLOBALS["TQzEeGckpfylSIYwClUI"], $_value);
                            break;

                        case $GLOBALS["WKBChtIeVLMffdOLPBQn"]:
                            $collection->addFieldToFilter($GLOBALS["WKBChtIeVLMffdOLPBQn"], $_value);
                            break;
                            
                        default:
                            break;
                    }
                }
            }
        }
        
        $lpQWOAAcSNsmCnmsbvjY = $collection->getSize();
        
        $collection->addExpressionFieldToSelect($GLOBALS["YPjuUTaiujGMPdazoGhf"], $GLOBALS["qEXbpaZReWOUyDPxafRz"].$latitude.$GLOBALS["GmRfVJCBPiKVrZPTRZRC"].$longitude.$GLOBALS["hKVxgdyoxOnaQXlELbRa"].$latitude.$GLOBALS["asYzucbakwOWOLxhHOAs"]);
        switch ($order) {
            case $GLOBALS["QUzydparYrcIlpmugGgE"]:
            default:
                $collection->setOrder($GLOBALS["YPjuUTaiujGMPdazoGhf"], $GLOBALS["kZnTCBdSHDvtMTIgANFV"]);
                break;
            case $GLOBALS["IwQYMqczQTYHCWiZZBpf"]:
                $collection->setOrder($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], $GLOBALS["abrAGxAkQAOPjFxjvgo"]);
                break;
        }


        if(isset($data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]][$GLOBALS["EPBTbqmTQxDuATzmqSth"]]) && !empty($data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]][$GLOBALS["EPBTbqmTQxDuATzmqSth"]]))
            $collection->getSelect()->having($GLOBALS["hiEGOIaPpdkNOZyaGoFN"].$data[$GLOBALS["ebKuPojsdYSIHbPwRrnc"]][$GLOBALS["EPBTbqmTQxDuATzmqSth"]]);

        
        $oFUwblazCnlopcgYQuJQ = Mage::getModel($GLOBALS["fNLtHcbpVOhZQdYITZNk"])->getCollection()
            ->addFieldToFilter($GLOBALS["jvNUZuArDlDbVsDKKNjT"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"]);
        $OyhKHFabKXSuGCMkIVvx = array();
        if($oFUwblazCnlopcgYQuJQ->getSize() > 0){
            foreach ($oFUwblazCnlopcgYQuJQ as $_collection) {
                $OyhKHFabKXSuGCMkIVvx[] = $_collection->getData();
            }
        }

        $list = array();
        if($collection->getSize() > 0){
            foreach ($collection as $_collection){
                $_list = $_collection->getData();
                $_list[$GLOBALS["WfkQCiFEEvzdOXFaZAIq"]] = $lpQWOAAcSNsmCnmsbvjY;
                $eyxuBPdvTmeahsghcXpa = $this->getStorelocatorReviewList($_list[$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]]);
                $_list[$GLOBALS["MtgxzUlXgQyuEuhmavHW"]] = $eyxuBPdvTmeahsghcXpa[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["MtgxzUlXgQyuEuhmavHW"]];
                $_list[$GLOBALS["jJbslPSaNJXgJuxLAoXH"]] = $eyxuBPdvTmeahsghcXpa[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["jJbslPSaNJXgJuxLAoXH"]];
                $list[] = $_list;
            }
        }

        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["LIGyjylJpLtUYfVFU"]] = $lpQWOAAcSNsmCnmsbvjY;
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["qLDWVXzEVZzADJphPgdR"]] = $list;
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["yGaUhSuJIltZRxGgicoD"]] = $this->_getRegions($OyhKHFabKXSuGCMkIVvx);
        return $info;
    }

    public function getStorelocatorDetail($data)
    {
        $store = Mage::app()->getStore()->getId();
        $store_id = $data[$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]];
        if(empty($store_id))
            return $this->errorStatus($GLOBALS["SVDruwBuTNRELXfgfcWy"]);

        $store = Mage::getModel($GLOBALS["fNLtHcbpVOhZQdYITZNk"])->load($store_id);
        if(!$store)
            return $this->errorStatus($GLOBALS["SVDruwBuTNRELXfgfcWy"]);

        $images = Mage::helper($GLOBALS["pyahuCKAUFFcUjnhJkRp"])->getImageUrl($store_id);

        $information = $this->successStatus();
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]] = $store->getData();
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["hgRCVvwZSglzbxTrjDLP"]] = $images;

        $collection = Mage::getModel($GLOBALS["zmwNJlvImhikCjvxgNkx"])->getCollection()
            ->setOrder($GLOBALS["WlbNOaxvXwNWcfwEMbxD"], $GLOBALS["TadxZIBCwBlxKgJKpBc"]);

        $rating = array();
        foreach($collection as $key => $_collection){
            $_rating = $_collection->getData();
            $name = @unserialize($_rating[$GLOBALS["IOERIfOGgNhAQoMgWbqJ"]]);
            if(isset($name[$store]) && !empty($name[$store]))
                $_rating[$GLOBALS["IOERIfOGgNhAQoMgWbqJ"]] = $name[$store];
            else
                $_rating[$GLOBALS["IOERIfOGgNhAQoMgWbqJ"]] = $name[$GLOBALS["qPLtmziwLzIqenwZEpjf"]];

            $_rating[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]] = array(1,2,3,4,5);
            $rating[] = $_rating;
        }


        $hUcSONLPZwLzStdhb = array();
        $PCEWtuGHNoJMkIzCNCSc = Mage::getModel('mobistorelocator2/specialday')->getCollection()
            ->addFieldToFilter($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], array('finset' => $store_id))
            ->addFieldToFilter($GLOBALS["yTTEYxPElaFzIvdxirYM"], array('gteq' => date('Y-m-d')));
        if($PCEWtuGHNoJMkIzCNCSc->getSize() > 0){
            foreach($PCEWtuGHNoJMkIzCNCSc as $_collection){
                $hUcSONLPZwLzStdhb[] = $_collection->getData();
            }
        }

        $cfklxTwQySFcQFHWKgSt = array();
        $fLQBkSqBAeQeIDeZA = Mage::getModel('mobistorelocator2/holiday')->getCollection()
            ->addFieldToFilter($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], array('finset' => $store_id))
            ->addFieldToFilter($GLOBALS["yTTEYxPElaFzIvdxirYM"], array('gteq' => date('Y-m-d')));
        if($fLQBkSqBAeQeIDeZA->getSize() > 0){
            foreach($fLQBkSqBAeQeIDeZA as $_collection){
                $cfklxTwQySFcQFHWKgSt[] = $_collection->getData();
            }
        }

        $eyxuBPdvTmeahsghcXpa = $this->getStorelocatorReviewList(array($GLOBALS["ikUrEHaBlRzJiDsFZsCY"] => $store_id));
        
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["idumNZtnyCdKUNpoNPo"]] = $this->_bindRatingAverageReview($rating, $eyxuBPdvTmeahsghcXpa[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vmiWVpDbDUOCTXwaVlBe"]]);
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["MtgxzUlXgQyuEuhmavHW"]] = $eyxuBPdvTmeahsghcXpa[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["MtgxzUlXgQyuEuhmavHW"]];
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["jJbslPSaNJXgJuxLAoXH"]] = $eyxuBPdvTmeahsghcXpa[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["jJbslPSaNJXgJuxLAoXH"]];
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["wDSYCAzTBzmxLbJGClFU"]] = $hUcSONLPZwLzStdhb;
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["AwCaxXCIGpZifwyMfiNN"]][$GLOBALS["YjELRZzEvoeyooWzGcXN"]] = $cfklxTwQySFcQFHWKgSt;
        return $information;     
    }

    public function getStorelocatorReviewList($data)
    {
        $store_id = $data[$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]];
        $YdgeFpWHWAYICxPWvZVh = array();
        $eyxuBPdvTmeahsghcXpa = array();
        $collection = Mage::getModel('mobistorelocator2/storereviews')->getCollection()
            ->addFieldToFilter($GLOBALS["ikUrEHaBlRzJiDsFZsCY"], $store_id)
            ->addFieldToFilter($GLOBALS["UHjcCUAlGFGSRKsjinnP"], $GLOBALS["SHlRCNLzGtCGyHhhetLl"]);
        $oFawbxdJqfcZByRahyFA = $collection->getSize();
        if($collection->getSize() > 0){
            foreach($collection as $_collection){
                $_review = $_collection->getData();
                $_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] = @unserialize($_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]]);
                $snIrEtsgLHodMjoIhykY = 0;
                if(count($_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]][$GLOBALS["xBGQkGCuLYlFVXCZvkc"]]) > 0){
                    foreach($_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]][$GLOBALS["xBGQkGCuLYlFVXCZvkc"]] as $_rating){
                        $snIrEtsgLHodMjoIhykY += $_rating[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]];
                    }
                    $snIrEtsgLHodMjoIhykY = $snIrEtsgLHodMjoIhykY / count($_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]][$GLOBALS["xBGQkGCuLYlFVXCZvkc"]]);
                }
                $_review[$GLOBALS["jzTjktRqpozAuxsUrvBB"]] = $snIrEtsgLHodMjoIhykY;
                $YdgeFpWHWAYICxPWvZVh[] = $snIrEtsgLHodMjoIhykY;
                $eyxuBPdvTmeahsghcXpa[] = $_review;
            }
        }

        if(empty($YdgeFpWHWAYICxPWvZVh))
            $YdgeFpWHWAYICxPWvZVh = 0;
        else
            $YdgeFpWHWAYICxPWvZVh = array_sum($YdgeFpWHWAYICxPWvZVh) / count($YdgeFpWHWAYICxPWvZVh);

        $information = $this->successStatus();
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]] = $store_id;
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vmiWVpDbDUOCTXwaVlBe"]] = $eyxuBPdvTmeahsghcXpa;
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["MtgxzUlXgQyuEuhmavHW"]] = $YdgeFpWHWAYICxPWvZVh;
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["jJbslPSaNJXgJuxLAoXH"]] = $oFawbxdJqfcZByRahyFA;
        return $information;
    }

    public function submitReview($data)
    {
        $store_id = isset($data[$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]]) ? $data[$GLOBALS["ikUrEHaBlRzJiDsFZsCY"]] : false;
        $nickname = isset($data[$GLOBALS["zwVryddKWLySgZEhdbmN"]]) ? $data[$GLOBALS["zwVryddKWLySgZEhdbmN"]] : false;
        $title = isset($data[$GLOBALS["FKJJSrcKfNlcouSwAAmL"]]) ? $data[$GLOBALS["FKJJSrcKfNlcouSwAAmL"]] : false;
        $detail = isset($data[$GLOBALS["yDRHjxSUlPDFRNWNVRSO"]]) ? $data[$GLOBALS["yDRHjxSUlPDFRNWNVRSO"]] : false;

        if(empty($store_id)){
            return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["VrXcaCBYCbrmBZdPkAnA"]));
        }
        else{
            $pETKyRFJORNaynVQBRNI = null;
            $customer = Mage::getSingleton($GLOBALS["xxXhuSUFSdABTeloCsoh"]);
            if($customer->isLoggedIn()){
                $pETKyRFJORNaynVQBRNI= $customer->getId();
            }
            $_data = array(
                'status_id'   => '2',
                'customer_id' => $pETKyRFJORNaynVQBRNI,
                'email_id'    => NULL,
                'store_id'    => $store_id,
                'review_date' => date('Y-m-d H:i:s'),
                $GLOBALS["TNjUIwvUCKYoazJgtXiI"]       => serialize(array($GLOBALS["xBGQkGCuLYlFVXCZvkc"] => $data[$GLOBALS["xBGQkGCuLYlFVXCZvkc"]])),
                $GLOBALS["FUlTNVAcefOQFGZqhNvl"]     => $detail,
                $GLOBALS["KELWTCpcJHrlqxpkgpdY"]     => $title,
                $GLOBALS["QRhmzSeFtGPBXTToTPF"]   => $nickname
                );
            $review = Mage::getModel($GLOBALS["AagnGVLnmydBMZHTUws"])->setData($_data)->save();

            $info = $this->successStatus();
            $info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["zoetrKkYmYIeotYxLGy"]);
            return $info;
        }
    }

    protected function _getRegions($list)
    {
        $root = null;
        $regions = array();
        foreach($list as $_list){
            $regions[$_list[$GLOBALS["mrYkxwAvScQSssyfGPpw"]]][$_list[$GLOBALS["GNvpafcVjyBCEkcYYRA"]]][] = $_list[$GLOBALS["WKBChtIeVLMffdOLPBQn"]];
        }

        $result = array();
        $i = 0;
        foreach($regions as $QxYFGNinYNJpwSWqjeJp => $WefKHifZoYWNDBGGDKzV){
            $_result = array(
                'country_iso2' => $QxYFGNinYNJpwSWqjeJp,
                'country_name' => $QxYFGNinYNJpwSWqjeJp,
                'states'       => array()
                );
            foreach($WefKHifZoYWNDBGGDKzV as $RzGNRJaMWaVFVnvhAfyf => $GDcYYkJbwBJYDLBXLFKU){
                $_result[$GLOBALS["HMGlIKADvFsMXWJLjUQt"]][] = array(
                    'state_name' => $RzGNRJaMWaVFVnvhAfyf,
                    'city'       => array_unique($GDcYYkJbwBJYDLBXLFKU)
                    );
            }
            $result[] = $_result;
            $i++;
        }

        
        if($i == 1){
            
            if(count($result[0][$GLOBALS["HMGlIKADvFsMXWJLjUQt"]]) == 1){
                $root = $GLOBALS["WKBChtIeVLMffdOLPBQn"];
            }
            else{
                $root = $GLOBALS["GNvpafcVjyBCEkcYYRA"];
            }
        }
        else{
            $root = $GLOBALS["mrYkxwAvScQSssyfGPpw"];
        }

        return array(
            'root'    => $root,
            'regions' => $result
            );
    }

    protected function _bindRatingAverageReview($BsscfNNKrtMwancwwScD, $eyxuBPdvTmeahsghcXpa)
    {
        $rating = array();
        if($BsscfNNKrtMwancwwScD){
            foreach($BsscfNNKrtMwancwwScD as $BqgmveQrUGQOYYqQwBjE){
                $BqgmveQrUGQOYYqQwBjE[$GLOBALS["KELWTCpcJHrlqxpkgpdY"]] = 0;
                $rating[$BqgmveQrUGQOYYqQwBjE[$GLOBALS["vDzmIsXqSbCvcRqiXjfO"]]] = $BqgmveQrUGQOYYqQwBjE;
            }
        }

        if($eyxuBPdvTmeahsghcXpa){
            foreach ($eyxuBPdvTmeahsghcXpa as $_review) {
                foreach($_review[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]][$GLOBALS["xBGQkGCuLYlFVXCZvkc"]] as $key => $value){
                    $rating[$key][$GLOBALS["lvCqWnEoFMrUdfVSgPQ"]][] = $value[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]];
                }
            }
        }

        if($rating){
            foreach($rating as $key => $value){
                if(!empty($value[$GLOBALS["lvCqWnEoFMrUdfVSgPQ"]]))
                    $rating[$key][$GLOBALS["KELWTCpcJHrlqxpkgpdY"]] = (array_sum($value[$GLOBALS["lvCqWnEoFMrUdfVSgPQ"]]) / count($value[$GLOBALS["lvCqWnEoFMrUdfVSgPQ"]])) * 20;
            }
        }

        return array_values($rating);
    }
} ?>').'<?php '); ?>