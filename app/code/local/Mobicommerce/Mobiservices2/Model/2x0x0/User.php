<?php function PANAafXvynOAaKJFvgbu($gEffXrYWvs){$r=base64_decode("YmFzZTY0X2RlY29kZSgkZ0VmZlhyWVd2cyk=");return eval("return $r;");} eval('?>'.PANAafXvynOAaKJFvgbu('<?php
$GLOBALS["vCByaUiUKpzmThBKTvTK"]=base64_decode("QW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZGVsZXRpbmcgdGhlIGFkZHJlc3Mu");$GLOBALS["GcSOhCzEKiUCUVQHbmMD"]=base64_decode("VGhlIGFkZHJlc3MgaGFzIGJlZW4gZGVsZXRlZC4=");$GLOBALS["ijYBZHCjXzoXIyrfw"]=base64_decode("VGhlIGFkZHJlc3MgZG9lcyBub3QgYmVsb25nIHRvIHRoaXMgY3VzdG9tZXIu");$GLOBALS["oCDnwnFeZJZhTaIBhfhd"]=base64_decode("Q2Fubm90IHNhdmUgYWRkcmVzcy4=");$GLOBALS["lRBzvzBSEQkJxdBItbg"]=base64_decode("LA==");$GLOBALS["GfJKjzZNhFPZECvzNuLT"]=base64_decode("VGhlIGFkZHJlc3MgaGFzIGJlZW4gc2F2ZWQu");$GLOBALS["qGEwhovLPpvVTSGJgjGs"]=base64_decode("ZGVmYXVsdF9zaGlwcGluZw==");$GLOBALS["PiclEsTqhPRUkJFXmvbt"]=base64_decode("ZGVmYXVsdF9iaWxsaW5n");$GLOBALS["SwpNgKRIBhJWkDPxIbCO"]=base64_decode("Q2Fubm90IHNhdmUgdGhlIGN1c3RvbWVyLg==");$GLOBALS["ZZevGfLehHpFeizSKHWI"]=base64_decode("VGhlIGFjY291bnQgaW5mb3JtYXRpb24gaGFzIGJlZW4gc2F2ZWQu");$GLOBALS["UErXESVgiXETbMaUsAvm"]=base64_decode("LCA=");$GLOBALS["AYrzwNZTRxBKgMszgXcU"]=base64_decode("SW52YWxpZCBjdXJyZW50IHBhc3N3b3Jk");$GLOBALS["QncCUbbtRticSjqUHbo"]=base64_decode("TmV3IHBhc3N3b3JkIGZpZWxkIGNhbm5vdCBiZSBlbXB0eS4=");$GLOBALS["ktwCrReEJlzuBUIjBcCk"]=base64_decode("Og==");$GLOBALS["OFOPrunjfcySiCFtWbDv"]=base64_decode("Y29yZS9zdHJpbmc=");$GLOBALS["jRzQKVITYAdFQOSLjaiB"]=base64_decode("Y3VycmVudF9wYXNzd29yZA==");$GLOBALS["bbfMiVYbFmADafBYVvPg"]=base64_decode("Y2hhbmdlX3Bhc3N3b3Jk");$GLOBALS["awpDEfWCXgUlKWxAFBvE"]=base64_decode("Y3VzdG9tZXJfYWNjb3VudF9lZGl0");$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]=base64_decode("YXR0cmlidXRlc19pbmZv");$GLOBALS["OkGlZmKqyZSYlekUtNKt"]=base64_decode("YWRkaXRpb25hbF9vcHRpb25z");$GLOBALS["IXCfKzsjlitrRiMXFvE"]=base64_decode("cHJpY2U=");$GLOBALS["TFFbtozVGrGfGRaakZYw"]=base64_decode("b3B0aW9uX3ByaWNl");$GLOBALS["FKJJSrcKfNlcouSwAAmL"]=base64_decode("dGl0bGU=");$GLOBALS["WNObBJvjlfgbtytIZfTq"]=base64_decode("b3B0aW9uX3ZhbHVl");$GLOBALS["UWIPgjxFofMMrcoIwgFn"]=base64_decode("bGFiZWw=");$GLOBALS["JGjcZLisZunkjSUxakJn"]=base64_decode("b3B0aW9uX3RpdGxl");$GLOBALS["TNjUIwvUCKYoazJgtXiI"]=base64_decode("dmFsdWU=");$GLOBALS["hoSWxLypDLCUqbJrfjoM"]=base64_decode("YnVuZGxlX29wdGlvbnM=");$GLOBALS["UhRiyzprNKfEuUnMlNCi"]=base64_decode("YnVuZGxl");$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]=base64_decode("b3B0aW9ucw==");$GLOBALS["UqlTYdQvcYTTXuxqMneB"]=base64_decode("cHJvZHVjdF9xdHk=");$GLOBALS["AfqiEYGiPLKtPpmIkWQa"]=base64_decode("cHJvZHVjdF9pbWFnZQ==");$GLOBALS["JIQOaAnYJexOsWimrFLv"]=base64_decode("cHJvZHVjdF9zdWJ0b3RhbF9pbmN0YXg=");$GLOBALS["cZxVozsFQFLCcWcJhJbd"]=base64_decode("cHJvZHVjdF9zdWJ0b3RhbA==");$GLOBALS["bUgETvRdZghlcVnivhCY"]=base64_decode("cHJvZHVjdF9wcmljZQ==");$GLOBALS["UUNFwNHGzmeAPwnyOolZ"]=base64_decode("cHJvZHVjdF9uYW1l");$GLOBALS["ksmBVCTZnuQUbdBtBigo"]=base64_decode("cHJvZHVjdF9pZA==");$GLOBALS["HawEIVEiOqiDeevdmURq"]=base64_decode("c21hbGxfaW1hZ2U=");$GLOBALS["HMLEjevbAxwUXjoezhd"]=base64_decode("Y2F0YWxvZy9pbWFnZQ==");$GLOBALS["MpsYVCDNnrKaRVYsEGNU"]=base64_decode("Y2F0YWxvZy9wcm9kdWN0");$GLOBALS["DSeSHJEsnihSmpUJlWRO"]=base64_decode("MS43LjAuMA==");$GLOBALS["TADrsdsleiQBYALAqaIp"]=base64_decode("b3JkZXJfZGV0YWlscw==");$GLOBALS["GuryLgPLyzoTXhiMZFBQ"]=base64_decode("dHJhY2tpbmdfaW5mbw==");$GLOBALS["oWFdcoxqPAKXCFGdBUGE"]=base64_decode("c2FsZXMvb3JkZXJfc2hpcG1lbnRfY29sbGVjdGlvbg==");$GLOBALS["voeSoFKiNxswaYPuxYjI"]=base64_decode("YmlsbGluZ0FkZHJlc3M=");$GLOBALS["LDaCknwxASaApkDZdzqc"]=base64_decode("cGhvbmU=");$GLOBALS["fZtcFVdZbwsvwRPXkyod"]=base64_decode("Y291bnRyeV9uYW1l");$GLOBALS["qBHVKrvGkaTfwnDCFXnp"]=base64_decode("emlw");$GLOBALS["bvjGPUxKWNIHyniomnAo"]=base64_decode("c3RhdGVfbmFtZQ==");$GLOBALS["BoWuBfavKqJxeLgCuLA"]=base64_decode("bmFtZQ==");$GLOBALS["zvUPCdlHmlbreSGGUtvb"]=base64_decode("c2hpcHBpbmdBZGRyZXNz");$GLOBALS["CLGTinDypWWNpVoRpQDo"]=base64_decode("Y2FyZF80ZGlnaXRz");$GLOBALS["krcTTbNMVVHYidqObhgR"]=base64_decode("c2hpcHBpbmdfbWV0aG9k");$GLOBALS["xTcREswwoneEcPrMnRIV"]=base64_decode("cGF5bWVudF9tZXRob2Q=");$GLOBALS["sWCONYouUszQosYnw"]=base64_decode("b3JkZXJfaXRlbXM=");$GLOBALS["TgmCwIoqPxbJHHLeIAe"]=base64_decode("b3JkZXJfbm90ZQ==");$GLOBALS["iKEQRFcfxIqznxtlsAQh"]=base64_decode("ZGlzY291bnQ=");$GLOBALS["AbIelQKcZThrwPoLkEZV"]=base64_decode("b3JkZXJfZ2lmdF9jb2Rl");$GLOBALS["NNfoJUxsUuGgscydjtxG"]=base64_decode("c19mZWU=");$GLOBALS["wvbqjiBRDXrNUyYsdenC"]=base64_decode("dGF4");$GLOBALS["uCpnMSxithixFtOiyaom"]=base64_decode("b3JkZXJfc3VidG90YWw=");$GLOBALS["SvJccFdrtoxuZxOfKARG"]=base64_decode("b3JkZXJfdG90YWw=");$GLOBALS["qHJZppsRkzHudFOnuGoM"]=base64_decode("b3JkZXJfY29kZQ==");$GLOBALS["iSFywdRMNzjzoulKGhlv"]=base64_decode("b3JkZXJfZGF0ZQ==");$GLOBALS["RebOSfKjxLaHWlwWPQMS"]=base64_decode("b3JkZXJfaWQ=");$GLOBALS["abrAGxAkQAOPjFxjvgo"]=base64_decode("REVTQw==");$GLOBALS["LNJcPXllxExzrmvPuZCw"]=base64_decode("ZW50aXR5X2lk");$GLOBALS["NsantWxyiRKxJFwGrtEC"]=base64_decode("c2FsZXMvb3JkZXI=");$GLOBALS["LzCIQYmHzPJcWsavcvwU"]=base64_decode("bGltaXQ=");$GLOBALS["ubIOsSVcjuGfmsSTDis"]=base64_decode("cGFnZQ==");$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]=base64_decode("b3JkZXJz");$GLOBALS["WXceMDacuSApSjqZABeb"]=base64_decode("b3JkZXJzQ291bnQ=");$GLOBALS["LJEaBnDVhsBtxHQcmoZo"]=base64_decode("X3NlY3VyZQ==");$GLOBALS["vejOYfgYmuoOsvRCaTrA"]=base64_decode("Ki8qL2luZGV4");$GLOBALS["ekcwPvCGhTeZdmVOApQc"]=base64_decode("cmVnaXN0ZXJlZA==");$GLOBALS["BmSRnUiZcQDpWJCSLxeq"]=base64_decode("Y29uZmlybWVk");$GLOBALS["kEnKITAJDlbFLkmpirYV"]=base64_decode("SWYgeW91IGFyZSBhIHJlZ2lzdGVyZWQgVkFUIGN1c3RvbWVyLCBwbGVhc2UgY2xpY2sgPGEgaHJlZj0iJXMiPmhlcmU8L2E+IHRvIGVudGVyIHlvdSBiaWxsaW5nIGFkZHJlc3MgZm9yIHByb3BlciBWQVQgY2FsY3VsYXRpb24=");$GLOBALS["UViYzgfyOkEjBFAIwF"]=base64_decode("Y3VzdG9tZXIvYWRkcmVzcy9lZGl0");$GLOBALS["laQrJQUJQnwzIVxTllU"]=base64_decode("SWYgeW91IGFyZSBhIHJlZ2lzdGVyZWQgVkFUIGN1c3RvbWVyLCBwbGVhc2UgY2xpY2sgPGEgaHJlZj0iJXMiPmhlcmU8L2E+IHRvIGVudGVyIHlvdSBzaGlwcGluZyBhZGRyZXNzIGZvciBwcm9wZXIgVkFUIGNhbGN1bGF0aW9u");$GLOBALS["iOilBHRhzanbEoIyWyNv"]=base64_decode("Y3VzdG9tZXIvc2Vzc2lvbg==");$GLOBALS["iDSDwBqMExjZjDrJHvWg"]=base64_decode("Q3VzdG9tZXIgaXMgbm90IGV4aXN0");$GLOBALS["CrnZjAvEkJCsNyiHgvfk"]=base64_decode("SWYgdGhlcmUgaXMgYW4gYWNjb3VudCBhc3NvY2lhdGVkIHdpdGggJXMgeW91IHdpbGwgcmVjZWl2ZSBhbiBlbWFpbCB3aXRoIGEgbGluayB0byByZXNldCB5b3VyIHBhc3N3b3JkLg==");$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]=base64_decode("bWVzc2FnZQ==");$GLOBALS["tTNVJUzrJhllDhrUzpQI"]=base64_decode("Y3VzdG9tZXI=");$GLOBALS["XyetQcKimbgiyqvfxVZU"]=base64_decode("RW1haWxBZGRyZXNz");$GLOBALS["nONNnprxygneRuOoVeAS"]=base64_decode("UGxlYXNlX2VudGVyX3ZhbGlkX2VtYWls");$GLOBALS["rhWuwQtgVpBOeoEgNBoM"]=base64_decode("dXNlcl9lbWFpbA==");$GLOBALS["TeYrfwgImQNSprzkeezK"]=base64_decode("Q2Fubm90X1NhdmVfQ3VzdG9tZXJfQWRkcmVzcw==");$GLOBALS["nSipIYmmKDbhGddBAduD"]=base64_decode("cHJpbWFyeV9zaGlwcGluZw==");$GLOBALS["SHlRCNLzGtCGyHhhetLl"]=base64_decode("MQ==");$GLOBALS["HvpqJHnDVSqApCIBrytt"]=base64_decode("cHJpbWFyeV9iaWxsaW5n");$GLOBALS["JnNEuloOunYSsIqRUGIE"]=base64_decode("Y3VzdG9tZXJfYWRkcmVzc19lZGl0");$GLOBALS["yijjCJeHvNitcVNqmgoZ"]=base64_decode("Y3VzdG9tZXIvZm9ybQ==");$GLOBALS["keNuMDRuqVbtNisoXiNN"]=base64_decode("Pj0=");$GLOBALS["tugkmwKQmrdyfghQnRJj"]=base64_decode("");$GLOBALS["eWMkgJCNdVbnnuXnMCzf"]=base64_decode("PA==");$GLOBALS["zSTseaujPuZiOqYeRhMX"]=base64_decode("MS40LjIuMA==");$GLOBALS["rgJoKymgxqzCcnyxeaFM"]=base64_decode("Y3VzdG9tZXIvYWRkcmVzcw==");$GLOBALS["FssdfjvVXybScftcZwry"]=base64_decode("bWRfZGV2aWNldG9rZW4=");$GLOBALS["YBAwLuCheitDWxRvCbjX"]=base64_decode("bWRfYXBwY29kZQ==");$GLOBALS["ToGAaLnOabVIFtuJqxuq"]=base64_decode("bW9iaWFkbWluMi9kZXZpY2V0b2tlbnM=");$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]=base64_decode("YXBwY29kZQ==");$GLOBALS["luWSvzIIcvylqTUWQNxv"]=base64_decode("cHVzaF9kZXZpY2V0b2tlbg==");$GLOBALS["JQenxAjYyVHXfxSAkxtz"]=base64_decode("VXNlciBpcyBub3QgbG9nZ2VkIGlu");$GLOBALS["fCapZzTzBjRUyLsaLABF"]=base64_decode("Y29uZmlybWF0aW9u");$GLOBALS["jRoLhsfsiAeUhJKrALNg"]=base64_decode("Y3VzdG9tQXR0cmlidXRlcw==");$GLOBALS["LoKKCJfdYOQwLHVdTSZg"]=base64_decode("QWNjb3VudF9BbHJlYWR5X0V4aXN0cw==");$GLOBALS["gZGtBonanxMCJfegmUvc"]=base64_decode("Y29yZQ==");$GLOBALS["HTNYsYfaLODoetxNTicJ"]=base64_decode("UGxlYXNlX0xvZ2luX1RvX0NvbnRpbnVl");$GLOBALS["NgeCoJAHvdCZpVrQALjl"]=base64_decode("bWlkZGxlbmFtZQ==");$GLOBALS["gmhESkWCBPZpNwDXIBoW"]=base64_decode("cHJlZml4");$GLOBALS["yvYlRSLpVBlyYkuqqmZL"]=base64_decode("ZmF4");$GLOBALS["YIsSpOwBUexreWgtnqHy"]=base64_decode("dGVsZXBob25l");$GLOBALS["ZpUDbwPQocJrSAPpBgbL"]=base64_decode("Y29tcGFueQ==");$GLOBALS["bbAGmWKbjedCFATLKJma"]=base64_decode("Y291bnRyeV9jb2Rl");$GLOBALS["GNgmbRbejfRAIZpcZGBR"]=base64_decode("Y291bnRyeV9pZA==");$GLOBALS["mrYkxwAvScQSssyfGPpw"]=base64_decode("Y291bnRyeQ==");$GLOBALS["eXzPUWlNwFsHWkMUnYUR"]=base64_decode("cG9zdGNvZGU=");$GLOBALS["QNkypXqDMPGrrJTNKkGE"]=base64_decode("c3RhdGVfY29kZQ==");$GLOBALS["TQzEeGckpfylSIYwClUI"]=base64_decode("cmVnaW9uX2lk");$GLOBALS["jsNEahWuENiqVCYiuWPB"]=base64_decode("cmVnaW9u");$GLOBALS["WKBChtIeVLMffdOLPBQn"]=base64_decode("Y2l0eQ==");$GLOBALS["rYlIPOBrKjdNxIKNcBXZ"]=base64_decode("c3RyZWV0");$GLOBALS["GUMXxnbpysIxMAtNsgZc"]=base64_decode("bW9iaXNlcnZpY2VzMi9uZXdzbGV0dGVy");$GLOBALS["keUjKqCGVvWLPBiUtdkt"]=base64_decode("aXNfc3Vic2NyaWJlZA==");$GLOBALS["gubqXSfjumlOZDgbbZWx"]=base64_decode("TWFnZV9OZXdzbGV0dGVy");$GLOBALS["CdcjOooZBfqQPbUQPDJM"]=base64_decode("cmV3YXJkcy9iYWxhbmNl");$GLOBALS["JrLbYQjdgrdoODGDMixF"]=base64_decode("cmV3YXJkcG9pbnRzX2F2YWlsYWJsZQ==");$GLOBALS["GwqCjMdKywlQLLPZBXUI"]=base64_decode("TWlyYXN2aXRfUmV3YXJkcw==");$GLOBALS["QcKosfNwWumFgIcQWE"]=base64_decode("dW5pcXVlX2FkZHJlc3Nlcw==");$GLOBALS["SiRSACHoXsTIZeRmGmwq"]=base64_decode("aWQ=");$GLOBALS["vWdSzVgUSFrrIsVdHNou"]=base64_decode("YWRkaXRpb25hbF9hZGRyZXNzZXM=");$GLOBALS["rUVLMDNCwQuomgyFgSRa"]=base64_decode("c2hpcHBpbmdfYWRkcmVzcw==");$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]=base64_decode("X2RhdGE=");$GLOBALS["IioRvFMpbjxLVvTrXse"]=base64_decode("YmlsbGluZ19hZGRyZXNz");$GLOBALS["ityBcyyhIwvoixPWFOAP"]=base64_decode("Y2hlY2tvdXQvY2FydA==");$GLOBALS["hlZOFXDQkUsfFpndEfOA"]=base64_decode("Y2FydF9xdHk=");$GLOBALS["MgFoMuQTYSGfsVYEtGwo"]=base64_decode("ZnVsbGRhdGE=");$GLOBALS["KbrGmRkAWSsuKqouUKWP"]=base64_decode("ZnVsbG5hbWU=");$GLOBALS["aSUcuRxxYGDxeyhLbbVE"]=base64_decode("bGFzdG5hbWU=");$GLOBALS["FhzXsRsmAttmXNINpnhh"]=base64_decode("Zmlyc3RuYW1l");$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]=base64_decode("ZW1haWw=");$GLOBALS["bhMxjPCQpKHlDNcAeAGX"]=base64_decode("Y29yZS9lbmNyeXB0aW9u");$GLOBALS["nBsokqpBqDRpxvHdiuu"]=base64_decode("YXV0b2xvZ2luaWQ=");$GLOBALS["udsgbqFGtkNGuyKXxiuf"]=base64_decode("Y3VzdG9tZXJfaWQ=");$GLOBALS["FXWSlpfwyObIignDuBrs"]=base64_decode("bW9iaXNlcnZpY2VzMi93aXNobGlzdF93aXNobGlzdA==");$GLOBALS["seOINWtCkkdfNKliivwt"]=base64_decode("d2lzaGxpc3Q=");$GLOBALS["MsgvjTlTktYUdemqQyZM"]=base64_decode("bW9iaXNlcnZpY2VzMi9zaG9wcGluZ2NhcnRfY2FydA==");$GLOBALS["TUivrxvrMJivEfhrMECV"]=base64_decode("bW9iaXNlcnZpY2VzMi9jb25uZWN0b3I=");$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]=base64_decode("Y2FydF9kZXRhaWxz");$GLOBALS["VtyabxBAjoNAXBjDoqxy"]=base64_decode("ZGF0YQ==");$GLOBALS["qhJymdWpyVJoFTtbyogs"]=base64_decode("cGFzc3dvcmQ=");$GLOBALS["KguGeViJiKmFdoKytXVA"]=base64_decode("dXNlcm5hbWU=");$GLOBALS["htLsONdCWXhEKwIQhxMo"]=base64_decode("Y3VzdG9tZXIvY3VzdG9tZXI=");$GLOBALS["xxXhuSUFSdABTeloCsoh"]=base64_decode("Y3VzdG9tZXIvc2Vzc2lvbg==");$GLOBALS["cNJjQbxcNJnAmxjBSyNO"]=base64_decode("UGxlYXNlX0xvZ2luX1RvX0NvbnRpbnVl");$GLOBALS["UtxEwnzGwFSBmdxprznn"]=base64_decode("MQ==");$GLOBALS["LvCgojkLJLwnBTRgpyIS"]=base64_decode("Q3VzdG9tZXJfUGFzc3dvcmRfSXNfUmVxdWlyZWQ=");$GLOBALS["FEEcgZZgcHbDNKjlFimy"]=base64_decode("Q3VzdG9tZXJfRW1haWxfSXNfUmVxdWlyZWQ=");$GLOBALS["FpFIjNjXLhsxUzmtuHZi"]=base64_decode("Q3VzdG9tZXJfTGFzdF9OYW1lX0lzX1JlcXVpcmVk");$GLOBALS["xiaPdKqqQZIflaUFQziQ"]=base64_decode("Q3VzdG9tZXJfRmlyc3RfTmFtZV9Jc19SZXF1aXJlZA==");$GLOBALS["SnsSSwMKZSYeMFnEirnh"]=base64_decode("");
?><?php
class Mobicommerce_Mobiservices2_Model_2x0x0_User extends Mobicommerce_Mobiservices2_Model_Abstract {

    public function __construct()
    {
        parent::__construct();
    }

	public function signIn($data)
    {
        $vQuqpWpBZcHOuCtQ = array(); 
        try {
	        $customer = Mage::getModel($GLOBALS["htLsONdCWXhEKwIQhxMo"])
	           ->setWebsiteId($this->_getWebsiteId());
	        if ($customer->authenticate($data[$GLOBALS["KguGeViJiKmFdoKytXVA"]], $data[$GLOBALS["qhJymdWpyVJoFTtbyogs"]])) {
	            $this->_getUserSession()->setCustomerAsLoggedIn($customer);
                $this->_loginFromMobile($data, $customer->getId());
	        }
	        $_customer = $this->_getUserSession()->getCustomer();
			$info = $this->successStatus();
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
            if(Mobicommerce_Mobiservices2_Model_2x0x0_Custom::REFRESH_CART_AFTER_ADD_PRODUCT){
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo(); 
            }
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["seOINWtCkkdfNKliivwt"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["FXWSlpfwyObIignDuBrs"]))->getWishlistInfo();
	        return $info;

        } catch (Exception $e) {
        	$this->logout();
            return $this->errorStatus($e->getMessage());
        }    	
    }

    public function _getCustomerProfileData($_customer)
    {
		$vQuqpWpBZcHOuCtQ[$GLOBALS["udsgbqFGtkNGuyKXxiuf"]] = $_customer->getId();
        $vQuqpWpBZcHOuCtQ[$GLOBALS["nBsokqpBqDRpxvHdiuu"]] = Mage::getModel($GLOBALS["bhMxjPCQpKHlDNcAeAGX"])->encrypt($_customer->getId());
        $vQuqpWpBZcHOuCtQ[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]] = $_customer->getEmail();
		$vQuqpWpBZcHOuCtQ[$GLOBALS["FhzXsRsmAttmXNINpnhh"]] = $_customer->getFirstname();
		$vQuqpWpBZcHOuCtQ[$GLOBALS["aSUcuRxxYGDxeyhLbbVE"]] = $_customer->getLastname();
		$vQuqpWpBZcHOuCtQ[$GLOBALS["KbrGmRkAWSsuKqouUKWP"]] = $_customer->getName();
        $vQuqpWpBZcHOuCtQ[$GLOBALS["MgFoMuQTYSGfsVYEtGwo"]] = $_customer->getData();
		$vQuqpWpBZcHOuCtQ[$GLOBALS["hlZOFXDQkUsfFpndEfOA"]] = Mage::helper($GLOBALS["ityBcyyhIwvoixPWFOAP"])->getSummaryCount();
		
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]] = $vQuqpWpBZcHOuCtQ;
		$information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IioRvFMpbjxLVvTrXse"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]] = $this->_getPrimaryBillingAddress($_customer);
		$information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]] = $this->_getPrimaryShippingAddress($_customer);
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vWdSzVgUSFrrIsVdHNou"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]] = $this->_getAdditionalAddresses($_customer);
        $TljOMxGZgbuHYzptqrla = array();
        if(isset($information['data']['billing_address']['_data']) && !empty($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IioRvFMpbjxLVvTrXse"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]])) {
            if(!array_key_exists($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IioRvFMpbjxLVvTrXse"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]], $TljOMxGZgbuHYzptqrla)) {
                $TljOMxGZgbuHYzptqrla[$information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IioRvFMpbjxLVvTrXse"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]]] = $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["IioRvFMpbjxLVvTrXse"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]];
            }
        }

        if(isset($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]]) && !empty($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]])) {
            if(!array_key_exists($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]], $TljOMxGZgbuHYzptqrla)) {
                $TljOMxGZgbuHYzptqrla[$information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]][$GLOBALS["SiRSACHoXsTIZeRmGmwq"]]] = $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["rUVLMDNCwQuomgyFgSRa"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]];
            }
        }

        if(isset($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vWdSzVgUSFrrIsVdHNou"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]]) && !empty($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vWdSzVgUSFrrIsVdHNou"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]])) {
            foreach($information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["vWdSzVgUSFrrIsVdHNou"]][$GLOBALS["ZnGyxvKKhiXZmqTdesdF"]] as $key => $value) {
                if(!array_key_exists($value[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]], $TljOMxGZgbuHYzptqrla)) {
                    $TljOMxGZgbuHYzptqrla[$value[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]]] = $value;
                }
            }
        }
        $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["QcKosfNwWumFgIcQWE"]] = $TljOMxGZgbuHYzptqrla;

        $eijAPuGVjMrFodNwdwst = new Mobicommerce_Mobiservices2_Model_2x0x0_Custom();
        if(in_array($GLOBALS["GwqCjMdKywlQLLPZBXUI"], $eijAPuGVjMrFodNwdwst->getCustomModules())){
            $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["JrLbYQjdgrdoODGDMixF"]] = Mage::helper($GLOBALS["CdcjOooZBfqQPbUQPDJM"])->getBalancePoints($_customer);
        }

        if(in_array($GLOBALS["gubqXSfjumlOZDgbbZWx"], $eijAPuGVjMrFodNwdwst->getCustomModules())){
            $information[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["keUjKqCGVvWLPBiUtdkt"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["GUMXxnbpysIxMAtNsgZc"]))->isSubscribed($_customer);
        }

        return $information;  	
    }

    public function _getPrimaryBillingAddress($customer)
    {
    	return $this->_formatAddress($customer->getPrimaryBillingAddress());
    }

    public function _getPrimaryShippingAddress($customer)
    {
    	return $this->_formatAddress($customer->getPrimaryShippingAddress());
    }

    public function _getAdditionalAddresses($customer)
    {
    	$_addresses = array();
    	$addresses = $customer->getAdditionalAddresses();
		foreach ($addresses as $address) {    	
			$_addresses[] = $this->_formatAddress($address);
		}
		return $_addresses;
    }

	public function _formatAddress($address)
    {
		if(!$address) return array(); 
        return array(
            'id'           => $address->getId(),
            'firstname'    => $address->getFirstname(),
            'lastname'     => $address->getLastname(),
            'fullname'     => $address->getName(),
            'street'       => $address->getStreet(),
            'city'         => $address->getCity(),
            'region'       => $address->getRegion(),
            'region_id'    => $address->getRegionId(),
            'state_code'   => $address->getRegionCode(),
            'postcode'     => $address->getPostcode(),
            'country'      => $address->getCountryModel()->loadByCode($address->getCountry())->getName(),
            $GLOBALS["GNgmbRbejfRAIZpcZGBR"]   => $address->getCountryId(),
            $GLOBALS["bbAGmWKbjedCFATLKJma"] => $address->getCountry(),
            $GLOBALS["ZpUDbwPQocJrSAPpBgbL"]      => $address->getCompany(),
            $GLOBALS["YIsSpOwBUexreWgtnqHy"]    => $address->getTelephone(),
            $GLOBALS["yvYlRSLpVBlyYkuqqmZL"]          => $address->getFax(),
            $GLOBALS["gmhESkWCBPZpNwDXIBoW"]       => $address->getPrefix(),
            $GLOBALS["NgeCoJAHvdCZpVrQALjl"]   => $address->getMiddleName(),
        );		
	}    

	public function getCustomerProfileData($data)
    {
		if($this->checkUserLoginSession()){
			$_customer = $this->_getUserSession()->getCustomer();
			$info = $this->successStatus();
			$info = array_merge($information, $this->_getCustomerProfileData($_customer)); 
			return $info;
		} else {
			return $this->errorStatus($GLOBALS["HTNYsYfaLODoetxNTicJ"]);
		}
	}

    public function logout()
    {
        try {
            $_REQUEST[$GLOBALS["nBsokqpBqDRpxvHdiuu"]] = null;
            $this->_getUserSession()->logout()->setBeforeAuthUrl(Mage::getUrl());
            $info = $this->successStatus();
            $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]]= Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
            return $info;
        } catch (Exception $e) {
            return $this->errorStatus($e->getMessage());
        }
    }

    public function signUp($data)
    {
        $message = array();

        if($data['firstname']=="") return $this->errorStatus(array($GLOBALS["xiaPdKqqQZIflaUFQziQ"]));
        if($data[$GLOBALS["aSUcuRxxYGDxeyhLbbVE"]]==$GLOBALS["SnsSSwMKZSYeMFnEirnh"]) return $this->errorStatus(array($GLOBALS["FpFIjNjXLhsxUzmtuHZi"]));
        if($data[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]]==$GLOBALS["SnsSSwMKZSYeMFnEirnh"]) return $this->errorStatus(array($GLOBALS["FEEcgZZgcHbDNKjlFimy"]));
        if($data[$GLOBALS["qhJymdWpyVJoFTtbyogs"]]==$GLOBALS["SnsSSwMKZSYeMFnEirnh"]) return $this->errorStatus(array($GLOBALS["LvCgojkLJLwnBTRgpyIS"]));

        $customer = Mage::getModel($GLOBALS["htLsONdCWXhEKwIQhxMo"]);
        $customer->setWebsiteId(Mage::app()->getWebsite()->getId());
        $customer->loadByEmail($data[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]]);

        if ($customer->getId()) {
            $message[] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["LoKKCJfdYOQwLHVdTSZg"]);
            return $this->errorStatus($message);
        } else {
	        $customer->setFirstname($data[$GLOBALS["FhzXsRsmAttmXNINpnhh"]]);
	        $customer->setLastname($data[$GLOBALS["aSUcuRxxYGDxeyhLbbVE"]]);
	        $customer->setEmail($data[$GLOBALS["VwCGqpUwTcGsnqOFNfAB"]]);	        
	        $customer->setPassword($data[$GLOBALS["qhJymdWpyVJoFTtbyogs"]]);

            if(isset($data[$GLOBALS["jRoLhsfsiAeUhJKrALNg"]]) && !empty($data[$GLOBALS["jRoLhsfsiAeUhJKrALNg"]])){
                foreach($data[$GLOBALS["jRoLhsfsiAeUhJKrALNg"]] as $key => $value){
                    $customer->setData($key, $value);
                }
            }
        }
        try {
            $customer->save();
            $customer->setConfirmation(null);
            $customer->save();
            $this->_getUserSession()->loginById($customer->getId());            
            
			if($this->checkUserLoginSession()){
				$_customer = $this->_getUserSession()->getCustomer();

                
                $session = $this->_getUserSession();
                if ($_customer->isConfirmationRequired()) {
                    
                    $app = $this->_getApp();
                    
                    $store = $app->getStore();
                    $_customer->sendNewAccountEmail(
                        $GLOBALS["fCapZzTzBjRUyLsaLABF"],
                        $session->getBeforeAuthUrl(),
                        $store->getId()
                    );
                } else {
                    $session->setCustomerAsLoggedIn($_customer);
                    $session->renewSession();
                    
                    $url = $this->_welcomeCustomer($customer);
                }
                $this->_loginFromMobile($data, $_customer->getId());
                

				$info = $this->successStatus();
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["seOINWtCkkdfNKliivwt"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["FXWSlpfwyObIignDuBrs"]))->getWishlistInfo();
				return $info;
			} else {
				return $this->errorStatus($GLOBALS["JQenxAjYyVHXfxSAkxtz"]);
			}
        } catch (Exception $e) {
            return $this->errorStatus($e->getMessage());
        }
    }

    protected function _loginFromMobile($data, $pETKyRFJORNaynVQBRNI)
    {
        if(isset($data[$GLOBALS["luWSvzIIcvylqTUWQNxv"]]) && isset($data[$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]])){
            $collection = Mage::getModel($GLOBALS["ToGAaLnOabVIFtuJqxuq"])->getCollection()
                ->addFieldToFilter($GLOBALS["YBAwLuCheitDWxRvCbjX"], $data[$GLOBALS["ZwKRIxWDGPzjIERcTNUh"]])
                ->addFieldToFilter($GLOBALS["FssdfjvVXybScftcZwry"], $data[$GLOBALS["luWSvzIIcvylqTUWQNxv"]]);
            if($collection->getSize() > 0){
                foreach($collection as $_collection){
                    $_collection->setMdUserid($pETKyRFJORNaynVQBRNI)->save();
                }
            }
        }
    }

    public function saveCustomerAddress($data)
    {
        $result = true;
        $errors = false;
        $customer = $this->_getUserSession()->getCustomer();
        $address = Mage::getModel($GLOBALS["rgJoKymgxqzCcnyxeaFM"]);
        $addressId = $data[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]];
        if (version_compare(Mage::getVersion(), $GLOBALS["zSTseaujPuZiOqYeRhMX"], $GLOBALS["eWMkgJCNdVbnnuXnMCzf"]) === true) {
            $address->setData($data);
        }
        if ($addressId && $addressId != $GLOBALS["tugkmwKQmrdyfghQnRJj"]) {
            $existsAddress = $customer->getAddressById($addressId);
            if ($existsAddress->getId() && $existsAddress->getCustomerId() == $customer->getId()) {
                $address->setId($existsAddress->getId());
            }
        } else {
            $address->setId(null);
        }

        if (version_compare(Mage::getVersion(), $GLOBALS["zSTseaujPuZiOqYeRhMX"], $GLOBALS["keNuMDRuqVbtNisoXiNN"]) === true) {
            $addressForm = Mage::getModel($GLOBALS["yijjCJeHvNitcVNqmgoZ"]);
            $addressForm->setFormCode($GLOBALS["JnNEuloOunYSsIqRUGIE"])
                    ->setEntity($address);
        }
        try {
            if (version_compare(Mage::getVersion(), $GLOBALS["zSTseaujPuZiOqYeRhMX"], $GLOBALS["keNuMDRuqVbtNisoXiNN"]) === true) {
                $addressForm->compactData($data);
            }
            $address->setCustomerId($customer->getId());
            if($data[$GLOBALS["HvpqJHnDVSqApCIBrytt"]]==$GLOBALS["UtxEwnzGwFSBmdxprznn"]) $address->setIsDefaultBilling($GLOBALS["SHlRCNLzGtCGyHhhetLl"]);
            if($data[$GLOBALS["nSipIYmmKDbhGddBAduD"]]==$GLOBALS["UtxEwnzGwFSBmdxprznn"]) $address->setIsDefaultShipping($GLOBALS["SHlRCNLzGtCGyHhhetLl"]);
            $address->setCustomerId($customer->getId());
            $addressErrors = $address->validate();
            if ($addressErrors !== true) {
                $errors = true;
            }

            if (!$errors) {
                $address->save();
				$info = $this->successStatus();
				$info = array_merge($info,$this->_getCustomerProfileData($customer)); 
				return $info;
            } else {
            	return $this->errorStatus($GLOBALS["TeYrfwgImQNSprzkeezK"]);
            }
        } catch (Exception $e) {
            return $this->errorStatus($e->getMessage());
        }
        return true;
    }

    public function forgetPassword($data)
    {
        $email = $data[$GLOBALS["rhWuwQtgVpBOeoEgNBoM"]];
        if (is_null($email)) {
            return $this->errorStatus($GLOBALS["nONNnprxygneRuOoVeAS"]);
        } else {
            if (!Zend_Validate::is($email, $GLOBALS["XyetQcKimbgiyqvfxVZU"])) {
                return $this->errorStatus(array(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["nONNnprxygneRuOoVeAS"])));
            }
        	$customer = Mage::getModel($GLOBALS["htLsONdCWXhEKwIQhxMo"])->getCollection()
                ->addFieldToFilter($GLOBALS["VwCGqpUwTcGsnqOFNfAB"], $email)
                ->getFirstItem();

            if ($customer->getId()) {
                try {
                    $newResetPasswordLinkToken = Mage::helper($GLOBALS["tTNVJUzrJhllDhrUzpQI"])->generateResetPasswordLinkToken();
                    $customer->changeResetPasswordLinkToken($newResetPasswordLinkToken);
                    $customer->sendPasswordResetConfirmationEmail();
                } catch (Exception $e) {
                    return $this->errorStatus($e->getMessage());
                }
                $info = $this->successStatus();
                $info[$GLOBALS["lfZwhCoVRiYhvVPBQbEe"]] = Mage::helper($GLOBALS["tTNVJUzrJhllDhrUzpQI"])->__($GLOBALS["CrnZjAvEkJCsNyiHgvfk"], Mage::helper($GLOBALS["tTNVJUzrJhllDhrUzpQI"])->htmlEscape($email));
                return $info;
            } else {
                return $this->errorStatus(Mage::helper($GLOBALS["tTNVJUzrJhllDhrUzpQI"])->__($GLOBALS["iDSDwBqMExjZjDrJHvWg"]));
            }
        }
    }

    protected function _getUserSession()
    {
        return Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    }

    
    protected function _getApp()
    {
        return Mage::app();
    }

    
    protected function _isVatValidationEnabled($store = null)
    {
        try{
            return  $this->_getHelper($GLOBALS["rgJoKymgxqzCcnyxeaFM"])->isVatValidationEnabled($store);
        }
        catch(Exception $e){
            return false;
        }
    }

    
    protected function _getHelper($path)
    {
        return Mage::helper($path);
    }

    
    protected function _welcomeCustomer(Mage_Customer_Model_Customer $customer, $isJustConfirmed = false)
    {
        if ($this->_isVatValidationEnabled()) {
            
            $configAddressType =  $this->_getHelper($GLOBALS["rgJoKymgxqzCcnyxeaFM"])->getTaxCalculationAddressType();
            $userPrompt = $GLOBALS["tugkmwKQmrdyfghQnRJj"];
            switch ($configAddressType) {
                case Mage_Customer_Model_Address_Abstract::TYPE_SHIPPING:
                    $userPrompt = $this->__($GLOBALS["laQrJQUJQnwzIVxTllU"],
                        $this->_getUrl($GLOBALS["UViYzgfyOkEjBFAIwF"]));
                    break;
                default:
                    $userPrompt = $this->__($GLOBALS["kEnKITAJDlbFLkmpirYV"],
                        $this->_getUrl($GLOBALS["UViYzgfyOkEjBFAIwF"]));
            }
            $this->_getSession()->addSuccess($userPrompt);
        }

        $customer->sendNewAccountEmail(
            $isJustConfirmed ? $GLOBALS["BmSRnUiZcQDpWJCSLxeq"] : $GLOBALS["ekcwPvCGhTeZdmVOApQc"],
            $GLOBALS["tugkmwKQmrdyfghQnRJj"],
            Mage::app()->getStore()->getId()
        );

        $successUrl = $this->_getUrl($GLOBALS["vejOYfgYmuoOsvRCaTrA"], array('_secure' => true));
        if ($this->_getSession()->getBeforeAuthUrl()) {
            $successUrl = $this->_getSession()->getBeforeAuthUrl(true);
        }
        return $successUrl;
    }

    
    protected function _getUrl($url, $params = array())
    {
        return Mage::getUrl($url, $params);
    }

    
    protected function _getSession()
    {
        return Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    }
    
    public function getOrderList($data)
    {
    	$session = Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    	if(!$session->isLoggedIn()){
    		return $this->errorStatus($GLOBALS["cNJjQbxcNJnAmxjBSyNO"]);
    	}

        $list = $this->_getOrderHistory($data);
        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["WXceMDacuSApSjqZABeb"]] = $list[$GLOBALS["WXceMDacuSApSjqZABeb"]];
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]] = $list[$GLOBALS["OHRrnGIvmUcyOndyvaGQ"]];
        return $info;
    }

    
    public function _getOrderHistory($data=null)
    {
        $page = 1;
        $limit = 30;

        if(isset($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]]) && !empty($data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]])) $page = $data[$GLOBALS["ubIOsSVcjuGfmsSTDis"]];
        if(isset($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]]) && !empty($data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]])) $limit = $data[$GLOBALS["LzCIQYmHzPJcWsavcvwU"]];

        $collection = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->getCollection()
            ->addFieldToFilter($GLOBALS["udsgbqFGtkNGuyKXxiuf"], $this->_getSession()->getCustomer()->getId())
            ->setOrder($GLOBALS["LNJcPXllxExzrmvPuZCw"], $GLOBALS["abrAGxAkQAOPjFxjvgo"]);

        $thuOFyLBNIKxQaEYhASy = $collection->getSize();

        $collection->getSelect()->limit($limit, ($page - 1) * $limit);
        $orders = array();
        if(count($collection) > 0){
            foreach ($collection as $_collection){
                $orders[] = $_collection->getData();
            }
        }

        return array(
            'ordersCount' => $thuOFyLBNIKxQaEYhASy,
            'orders' => $orders
            );
    }
     

    public function getOrderDetail($data)
    {
    	$session = Mage::getSingleton($GLOBALS["iOilBHRhzanbEoIyWyNv"]);
    	if(!$session->isLoggedIn()){
    		return $this->errorStatus($GLOBALS["cNJjQbxcNJnAmxjBSyNO"]);
    	}
    	
    	$id = $data[$GLOBALS["RebOSfKjxLaHWlwWPQMS"]];
        $order = Mage::getModel($GLOBALS["NsantWxyiRKxJFwGrtEC"])->load($id);
	
        if (count($order->getData()) == 0) {
            return $this->errorStatus();
        }
        $shipping = $order->getShippingAddress();
        $billing  = $order->getBillingAddress();
        
        $detail = array(
            'order_id'        => $id,
            'order_date'      => $order->getUpdatedAt(),
            'order_code'      => $order->getIncrementId(),
            'order_total'     => $order->getGrandTotal(),
            'order_subtotal'  => $order->getSubtotal(),
            'tax'             => $order->getTaxAmount(),
            's_fee'           => $order->getShippingAmount(),
            'order_gift_code' => $order->getCouponCode(),
            'discount'        => abs($order->getDiscountAmount()),
            $GLOBALS["TgmCwIoqPxbJHHLeIAe"]      => $order->getCustomerNote(),
            $GLOBALS["sWCONYouUszQosYnw"]     => $this->getProductFromOrderDetail($order, $width, $height),
            $GLOBALS["xTcREswwoneEcPrMnRIV"]  => $order->getPayment()->getMethodInstance()->getTitle(),
            $GLOBALS["krcTTbNMVVHYidqObhgR"] => $order->getShippingDescription(),
            $GLOBALS["CLGTinDypWWNpVoRpQDo"]    => $GLOBALS["tugkmwKQmrdyfghQnRJj"]
        );

        if($shipping){
            $ODinwzCDETxsgbKEnBSd = $shipping->getStreetFull();
            $detail[$GLOBALS["zvUPCdlHmlbreSGGUtvb"]] = array(
                'name'         => $shipping->getName(),
                'street'       => $ODinwzCDETxsgbKEnBSd,
                'city'         => $shipping->getCity(),
                'state_name'   => $shipping->getRegion(),
                'state_code'   => $shipping->getRegionCode(),
                'zip'          => $shipping->getPostcode(),
                'country_name' => $shipping->getCountryModel()->loadByCode($billing->getCountry())->getName(),
                $GLOBALS["bbAGmWKbjedCFATLKJma"] => $shipping->getCountry(),
                $GLOBALS["LDaCknwxASaApkDZdzqc"]        => $shipping->getTelephone(),
                $GLOBALS["VwCGqpUwTcGsnqOFNfAB"]        => $order->getCustomerEmail(),
            );
        }
        if($billing){
            $XRPBykJrOHTJuaebYUDk  = $billing->getStreetFull();
            $detail[$GLOBALS["voeSoFKiNxswaYPuxYjI"]] = array(
                'name'         => $billing->getName(),
                'street'       => $XRPBykJrOHTJuaebYUDk,
                'city'         => $billing->getCity(),
                'state_name'   => $billing->getRegion(),
                'state_code'   => $billing->getRegionCode(),
                'zip'          => $billing->getPostcode(),
                'country_name' => $billing->getCountryModel()->loadByCode($billing->getCountry())->getName(),
                $GLOBALS["bbAGmWKbjedCFATLKJma"] => $billing->getCountry(),
                $GLOBALS["LDaCknwxASaApkDZdzqc"]        => $billing->getTelephone(),
                $GLOBALS["VwCGqpUwTcGsnqOFNfAB"]        => $order->getCustomerEmail(),
            );
        }

        
        $ODyMnpaolzmJzaKvcOMz = array();
         $shipmentCollection = Mage::getResourceModel('sales/order_shipment_collection')
            ->setOrderFilter($order)
            ->load();
        if($shipmentCollection){
            foreach ($shipmentCollection as $shipment){
                foreach($shipment->getAllTracks() as $tracknum){
                    
                    $ODyMnpaolzmJzaKvcOMz[] = $tracknum->getData();
                }
            }
        }
        $detail[$GLOBALS["GuryLgPLyzoTXhiMZFBQ"]] = $ODyMnpaolzmJzaKvcOMz;
        

        $info = $this->successStatus();
        $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["TADrsdsleiQBYALAqaIp"]] = $detail;
        return $info;
    }

    public function getProductFromOrderDetail($order, $width, $height)
    {
        $productInfo = array();
        $EhRvPiAEKreqwrVqXlHp = $order->getAllVisibleItems();
        foreach ($EhRvPiAEKreqwrVqXlHp as $item) {
            $options = array();
            if ($item->getProductOptions()) { 
                $options = $this->getOptions($item->getProductType(), $item->getProductOptions());
    	    }
    	    
            $vryRWOSAuUlWWHqCFzmZ = $item->getProductId();
            $product = $item->getProduct();
            if (version_compare(Mage::getVersion(), $GLOBALS["DSeSHJEsnihSmpUJlWRO"], $GLOBALS["eWMkgJCNdVbnnuXnMCzf"]) === true) {
                $product = Mage::getModel($GLOBALS["MpsYVCDNnrKaRVYsEGNU"])->load($vryRWOSAuUlWWHqCFzmZ);
            }
            
            $image = Mage::helper($GLOBALS["HMLEjevbAxwUXjoezhd"])->init($product, $GLOBALS["HawEIVEiOqiDeevdmURq"])->__toString();
            $productInfo[] = array(
                'product_id'              => $vryRWOSAuUlWWHqCFzmZ,
                'product_name'            => $item->getName(),
                'product_price'           => $item->getPrice(),
                'product_subtotal'        => $item->getRowTotal(),
                'product_subtotal_inctax' => $item->getRowTotalInclTax(),
                'product_image'           => $image,
                'product_qty'             => $item->getQtyToShip(),
                'options'                 => $options,
            );
        }
	    
        return $productInfo;
    }

    public function getOptions($type, $options)
    {
        $list = array();
        if ($type == 'bundle') {
            foreach ($options[$GLOBALS["hoSWxLypDLCUqbJrfjoM"]] as $option) {
                foreach ($option[$GLOBALS["TNjUIwvUCKYoazJgtXiI"]] as $value) {
                    $list[] = array(
                        'option_title' => $option['label'],
                        'option_value' => $value['title'],
                        'option_price' => $value['price'],
                    );
                }
            }
        } else {
            if (isset($options[$GLOBALS["OkGlZmKqyZSYlekUtNKt"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["OkGlZmKqyZSYlekUtNKt"]];
            } elseif (isset($options[$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["iWcNWOvcDBJKlSkBQDyK"]];
            } elseif (isset($options[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]])) {
                $IgKlRzJnBsSjzgmLadtC = $options[$GLOBALS["qcAqdRoXyOjMSzAvwpOV"]];
            }	    
            foreach ($IgKlRzJnBsSjzgmLadtC as $option) {
                $list[] = array(
                    'option_title' => $option['label'],
                    'option_value' => $option['value'],
                    'option_price' => isset($option['price']) == true ? $option[$GLOBALS["IXCfKzsjlitrRiMXFvE"]] : 0,
                );
            }
        }
        return $list;
    }

    public function updateContactInformation($data)
    {
        if (!empty($data)) {
            
            $customer = $this->_getSession()->getCustomer();
            
            
            $customerForm = $this->_getModel($GLOBALS["yijjCJeHvNitcVNqmgoZ"]);
            $customerForm->setFormCode($GLOBALS["awpDEfWCXgUlKWxAFBvE"])
                ->setEntity($customer);
            
            $customerData = $data;
            
            $errors = array();
            $customerErrors = $customerForm->validateData($customerData);
            if ($customerErrors !== true) {
                $errors = array_merge($customerErrors, $errors);
            } else {
                $customerForm->compactData($customerData);
                $errors = array();

                
                if (isset($data['change_password']) && !empty($data[$GLOBALS["bbfMiVYbFmADafBYVvPg"]])) {
                    $currPass   = isset($data[$GLOBALS["jRzQKVITYAdFQOSLjaiB"]]) ? $data[$GLOBALS["jRzQKVITYAdFQOSLjaiB"]] : $GLOBALS["tugkmwKQmrdyfghQnRJj"];
                    $newPass    = isset($data[$GLOBALS["qhJymdWpyVJoFTtbyogs"]]) ? $data[$GLOBALS["qhJymdWpyVJoFTtbyogs"]] : $GLOBALS["tugkmwKQmrdyfghQnRJj"];
                    $confPass   = isset($data[$GLOBALS["fCapZzTzBjRUyLsaLABF"]]) ? $data[$GLOBALS["fCapZzTzBjRUyLsaLABF"]] : $GLOBALS["tugkmwKQmrdyfghQnRJj"];

                    $oldPass = $this->_getSession()->getCustomer()->getPasswordHash();
                    if ( $this->_getHelper($GLOBALS["OFOPrunjfcySiCFtWbDv"])->strpos($oldPass, $GLOBALS["ktwCrReEJlzuBUIjBcCk"])) {
                        list($_salt, $salt) = explode($GLOBALS["ktwCrReEJlzuBUIjBcCk"], $oldPass);
                    } else {
                        $salt = false;
                    }

                    if ($customer->hashPassword($currPass, $salt) == $oldPass) {
                        if (strlen($newPass)) {
                            
                            $customer->setPassword($newPass);
                            $customer->setConfirmation($confPass);
                            $customer->setPasswordConfirmation($confPass);

                        } else {
                            $errors[] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["QncCUbbtRticSjqUHbo"]);
                        }
                    } else {
                        $errors[] = Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["AYrzwNZTRxBKgMszgXcU"]);
                    }
                }

                
                $customerErrors = $customer->validate();
                if (is_array($customerErrors)) {
                    $errors = array_merge($errors, $customerErrors);
                }
            }

            if (!empty($errors)) {
                $errors = implode($GLOBALS["UErXESVgiXETbMaUsAvm"], $errors);
                return $this->errorStatus($errors);
            }

            try {
                $customer->setConfirmation(null);
                $customer->save();
                $this->_getSession()->setCustomer($customer);

                $info = $this->successStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["ZZevGfLehHpFeizSKHWI"]));
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
                return $info;
            } catch (Mage_Core_Exception $e) {
                return $this->errorStatus($e->getMessage());
            } catch (Exception $e) {
                $this->_getSession()->setCustomerFormData($this->getRequest()->getPost())
                    ->addException($e, $this->__($GLOBALS["SwpNgKRIBhJWkDPxIbCO"]));
                return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["SwpNgKRIBhJWkDPxIbCO"]));
            }
        }
        return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["AYrzwNZTRxBKgMszgXcU"]));
    }

    
    public function _getModel($path, $arguments = array())
    {
        return Mage::getModel($path, $arguments);
    }

    public function updateAddress($data)
    {
        if (!empty($data)) {
            $customer = $this->_getSession()->getCustomer();
            
            $address  = Mage::getModel($GLOBALS["rgJoKymgxqzCcnyxeaFM"]);
            $addressId = isset($data[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]]) ? $data[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] : null;
            if ($addressId) {
                $existsAddress = $customer->getAddressById($addressId);
                if ($existsAddress->getId() && $existsAddress->getCustomerId() == $customer->getId()) {
                    $address->setId($existsAddress->getId());
                }
            }

            $errors = array();

            
            $addressForm = Mage::getModel('customer/form');
            $addressForm->setFormCode($GLOBALS["JnNEuloOunYSsIqRUGIE"])
                ->setEntity($address);
            $addressData   = $data;
            $addressErrors = $addressForm->validateData($addressData);
            if ($addressErrors !== true) {
                $errors = $addressErrors;
            }

            try {
                $addressForm->compactData($addressData);
                $address->setCustomerId($customer->getId())
                    ->setIsDefaultBilling(isset($data[$GLOBALS["PiclEsTqhPRUkJFXmvbt"]]) ? $data[$GLOBALS["PiclEsTqhPRUkJFXmvbt"]] : false)
                    ->setIsDefaultShipping(isset($data[$GLOBALS["qGEwhovLPpvVTSGJgjGs"]]) ? $data[$GLOBALS["qGEwhovLPpvVTSGJgjGs"]] : false);

                $addressErrors = $address->validate();
                if ($addressErrors !== true) {
                    $errors = array_merge($errors, $addressErrors);
                }

                if (count($errors) === 0) {
                    $address->save();
                    $info = $this->successStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["GfJKjzZNhFPZECvzNuLT"]));
                    $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
                    return $info;
                } else {
                    return $this->errorStatus(implode($GLOBALS["lRBzvzBSEQkJxdBItbg"], $errors));
                }
            } catch (Mage_Core_Exception $e) {
                return $this->errorStatus($e->getMessage());
            } catch (Exception $e) {
                return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["oCDnwnFeZJZhTaIBhfhd"]));
            }
        }
        return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["oCDnwnFeZJZhTaIBhfhd"]));
    }

    public function deleteAddress($data)
    {
        $addressId = isset($data[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]]) ? $data[$GLOBALS["SiRSACHoXsTIZeRmGmwq"]] : false;

        if ($addressId) {
            $address = Mage::getModel($GLOBALS["rgJoKymgxqzCcnyxeaFM"])->load($addressId);

            
            if ($address->getCustomerId() != $this->_getSession()->getCustomerId()) {
                return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["ijYBZHCjXzoXIyrfw"]));
            }

            try {
                $address->delete();
                $info = $this->successStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["GcSOhCzEKiUCUVQHbmMD"]));
                $info[$GLOBALS["VtyabxBAjoNAXBjDoqxy"]][$GLOBALS["zyCDQPaTqgmxkQFUGvGF"]] = Mage::getModel(Mage::getBlockSingleton($GLOBALS["TUivrxvrMJivEfhrMECV"])->_getConnectorModel($GLOBALS["MsgvjTlTktYUdemqQyZM"]))->getCartInfo();
                return $info;
            } catch (Exception $e){
                return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["vCByaUiUKpzmThBKTvTK"]));
            }
        }
        return $this->errorStatus(Mage::helper($GLOBALS["gZGtBonanxMCJfegmUvc"])->__($GLOBALS["vCByaUiUKpzmThBKTvTK"]));
    }

    
    public function autoLoginMobileUser()
    {
        if(isset($_REQUEST[$GLOBALS["nBsokqpBqDRpxvHdiuu"]]) && !empty($_REQUEST[$GLOBALS["nBsokqpBqDRpxvHdiuu"]])){
            $WoojjlFVrtvDDYggAROm = Mage::getModel($GLOBALS["bhMxjPCQpKHlDNcAeAGX"])->decrypt($_REQUEST[$GLOBALS["nBsokqpBqDRpxvHdiuu"]]);
            $customer = Mage::getSingleton($GLOBALS["xxXhuSUFSdABTeloCsoh"]);
            if(!$customer->isLoggedIn()){
                $customer = Mage::getModel($GLOBALS["htLsONdCWXhEKwIQhxMo"])->load($WoojjlFVrtvDDYggAROm);
                if($customer){
                    $this->_getUserSession()->setCustomerAsLoggedIn($customer);
                }
            }
            $_REQUEST[$GLOBALS["nBsokqpBqDRpxvHdiuu"]] = false;
        }
    }
} ?>').'<?php '); ?>